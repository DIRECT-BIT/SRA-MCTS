{"question": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n"}
{"question": "Given an input string `s` and a pattern `p`, implement regular expression matching with support for `'.'` and `'*'` where:\n\n*   `'.'` Matches any single character.​​​​\n*   `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the **entire** input string (not partial).\n\n"}
{"question": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\n_Merge all the linked-lists into one sorted linked-list and return it._\n\n"}
{"question": "Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_.\n\n`k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\n"}
{"question": "You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**.\n\nA **concatenated substring** in `s` is a substring that contains all the strings of any permutation of `words` concatenated.\n\n*   For example, if `words = [ \"ab \", \"cd \", \"ef \"]`, then `\"abcdef \"`, `\"abefcd \"`, `\"cdabef \"`, `\"cdefab \"`, `\"efabcd \"`, and `\"efcdab \"` are all concatenated strings. `\"acdbef \"` is not a concatenated substring because it is not the concatenation of any permutation of `words`.\n\nReturn _the starting indices of all the concatenated substrings in_ `s`. You can return the answer in **any order**.\n\n"}
{"question": "Given a string containing just the characters `'('` and `')'`, return _the length of the longest valid (well-formed) parentheses_ _substring_.\n\n"}
{"question": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy **all of the following rules**:\n\n1.  Each of the digits `1-9` must occur exactly once in each row.\n2.  Each of the digits `1-9` must occur exactly once in each column.\n3.  Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe `'.'` character indicates empty cells.\n\n"}
{"question": "Given an unsorted integer array `nums`, return the smallest missing positive integer.\n\nYou must implement an algorithm that runs in `O(n)` time and uses constant extra space.\n\n"}
{"question": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.\n\n"}
{"question": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n*   `'?'` Matches any single character.\n*   `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the **entire** input string (not partial).\n\n"}
{"question": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**.\n\nEach solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.\n\n"}
{"question": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_.\n\n"}
{"question": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:\n\n1.  `\"123 \"`\n2.  `\"132 \"`\n3.  `\"213 \"`\n4.  `\"231 \"`\n5.  `\"312 \"`\n6.  `\"321 \"`\n\nGiven `n` and `k`, return the `kth` permutation sequence.\n\n"}
{"question": "A **valid number** can be split up into these components (in order):\n\n1.  A **decimal number** or an **integer**.\n2.  (Optional) An `'e'` or `'E'`, followed by an **integer**.\n\nA **decimal number** can be split up into these components (in order):\n\n1.  (Optional) A sign character (either `'+'` or `'-'`).\n2.  One of the following formats:\n    1.  One or more digits, followed by a dot `'.'`.\n    2.  One or more digits, followed by a dot `'.'`, followed by one or more digits.\n    3.  A dot `'.'`, followed by one or more digits.\n\nAn **integer** can be split up into these components (in order):\n\n1.  (Optional) A sign character (either `'+'` or `'-'`).\n2.  One or more digits.\n\nFor example, all the following are valid numbers: `[ \"2 \", \"0089 \", \"-0.1 \", \"+3.14 \", \"4. \", \"-.9 \", \"2e10 \", \"-90E3 \", \"3e+7 \", \"+6e-1 \", \"53.5e93 \", \"-123.456e789 \"]`, while the following are not valid numbers: `[ \"abc \", \"1a \", \"1e \", \"e3 \", \"99e2.5 \", \"--6 \", \"-+3 \", \"95a54e53 \"]`.\n\nGiven a string `s`, return `true` _if_ `s` _is a **valid number**_.\n\n"}
{"question": "Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly `maxWidth` characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\n\n**Note:**\n\n*   A word is defined as a character sequence consisting of non-space characters only.\n*   Each word's length is guaranteed to be greater than `0` and not exceed `maxWidth`.\n*   The input array `words` contains at least one word.\n\n"}
{"question": "Given two strings `word1` and `word2`, return _the minimum number of operations required to convert `word1` to `word2`_.\n\nYou have the following three operations permitted on a word:\n\n*   Insert a character\n*   Delete a character\n*   Replace a character\n\n"}
{"question": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_** _of_ `s` _such that every character in_ `t` _(**including duplicates**) is included in the window_. If there is no such substring, return _the empty string_ `\" \"`.\n\nThe testcases will be generated such that the answer is **unique**.\n\n"}
{"question": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return _the area of the largest rectangle in the histogram_.\n\n"}
{"question": "Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return _its area_.\n\n"}
{"question": "We can scramble a string s to get a string t using the following algorithm:\n\n1.  If the length of the string is 1, stop.\n2.  If the length of the string is > 1, do the following:\n    *   Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n    *   **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n    *   Apply step 1 recursively on each of the two substrings `x` and `y`.\n\nGiven two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.\n\n"}
{"question": "Given two strings `s` and `t`, return _the number of distinct_ **_subsequences_** _of_ `s` _which equals_ `t`.\n\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\n"}
{"question": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete **at most two transactions**.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n"}
{"question": "A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.\n\nThe **path sum** of a path is the sum of the node's values in the path.\n\nGiven the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_.\n\n"}
{"question": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n*   Every adjacent pair of words differs by a single letter.\n*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n*   `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words_ `[beginWord, s1, s2, ..., sk]`.\n\n"}
{"question": "A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n*   Every adjacent pair of words differs by a single letter.\n*   Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n*   `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or_ `0` _if no such sequence exists._\n\n"}
{"question": "Given a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\nReturn _the **minimum** cuts needed for a palindrome partitioning of_ `s`.\n\n"}
{"question": "There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.\n\nYou are giving candies to these children subjected to the following requirements:\n\n*   Each child must have at least one candy.\n*   Children with a higher rating get more candies than their neighbors.\n\nReturn _the minimum number of candies you need to have to distribute the candies to the children_.\n\n"}
{"question": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n"}
{"question": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_.\n\n"}
{"question": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n\n*   `[4,5,6,7,0,1,4]` if it was rotated `4` times.\n*   `[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_.\n\nYou must decrease the overall operation steps as much as possible.\n\n"}
{"question": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be **called multiple times**.\n\n**Method read4:**\n\nThe API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\n**Definition of read4:**\n\n    Parameter:  char\\[\\] buf4\n    Returns:    int\n\nbuf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\].\n\nBelow is a high-level example of how `read4` works:\n\nFile file( \"abcde `\"); // File is  \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  \" \", fp points to end of file`\n\n**Method read:**\n\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\n**Definition of read:**\n\n    Parameters:\tchar\\[\\] buf, int n\n    Returns:\tint\n\nbuf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].\n\n**Note:**\n\n*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n*   The read function may be **called multiple times**.\n*   Please remember to **RESET** your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see [here](https://leetcode.com/faq/) for more details.\n*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n*   It is guaranteed that in a given test case the same buffer `buf` is called by `read`.\n\n"}
{"question": "Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `0`.\n\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\n"}
{"question": "The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.\n\nReturn _the knight's minimum initial health so that he can rescue the princess_.\n\n**Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n"}
{"question": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n"}
{"question": "Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_.\n\nEach word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\n"}
{"question": "You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.\n\nReturn _the shortest palindrome you can find by performing this transformation_.\n\n"}
{"question": "A city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_.\n\nThe geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:\n\n*   `lefti` is the x coordinate of the left edge of the `ith` building.\n*   `righti` is the x coordinate of the right edge of the `ith` building.\n*   `heighti` is the height of the `ith` building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.\n\nThe **skyline** should be represented as a list of \"key points \" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\n**Note:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n"}
{"question": "You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`.\n\nFind a pair of indices `(i, j)` such that:\n\n*   `i != j`,\n*   `abs(i - j) <= indexDiff`.\n*   `abs(nums[i] - nums[j]) <= valueDiff`, and\n\nReturn `true` _if such pair exists or_ `false` _otherwise_.\n\n"}
{"question": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_.\n\n**Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n"}
{"question": "Given an integer `n`, count _the total number of digit_ `1` _appearing in all non-negative integers less than or equal to_ `n`.\n\n"}
{"question": "You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn _the max sliding window_.\n\n"}
{"question": "Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return _the number of **strobogrammatic numbers** in the range_ `[low, high]`.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n"}
{"question": "There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.\n\n*   For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...\n\nReturn _the minimum cost to paint all houses_.\n\n"}
{"question": "There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\n\nYou are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are **sorted lexicographically** by the rules of this new language.\n\nReturn _a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules._ If there is no solution, return `\" \"`_._ If there are multiple solutions, return _**any of them**_.\n\n"}
{"question": "Given the `root` of a binary search tree, a `target` value, and an integer `k`, return _the_ `k` _values in the BST that are closest to the_ `target`. You may return the answer in **any order**.\n\nYou are **guaranteed** to have only one unique set of `k` values in the BST that are closest to the `target`.\n\n"}
{"question": "Convert a non-negative integer `num` to its English words representation.\n\n"}
{"question": "Given a string `num` that contains only digits and an integer `target`, return _**all possibilities** to insert the binary operators_ `'+'`_,_ `'-'`_, and/or_ `'*'` _between the digits of_ `num` _so that the resultant expression evaluates to the_ `target` _value_.\n\nNote that operands in the returned expressions **should not** contain leading zeros.\n\n"}
{"question": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\n*   For example, for `arr = [2,3,4]`, the median is `3`.\n*   For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\nImplement the MedianFinder class:\n\n*   `MedianFinder()` initializes the `MedianFinder` object.\n*   `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n*   `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return _the minimal **total travel distance**_.\n\nThe **total travel distance** is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.\n\n"}
{"question": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n**Clarification:** The input/output format is the same as [how LeetCode serializes a binary tree](https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-). You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n"}
{"question": "Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\nReturn _a list of **unique strings** that are valid with the minimum number of removals_. You may return the answer in **any order**.\n\n"}
{"question": "You are given an `m x n` binary matrix `image` where `0` represents a white pixel and `1` represents a black pixel.\n\nThe black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.\n\nGiven two integers `x` and `y` that represents the location of one of the black pixels, return _the area of the smallest (axis-aligned) rectangle that encloses all black pixels_.\n\nYou must write an algorithm with less than `O(mn)` runtime complexity\n\n"}
{"question": "You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).\n\nWe may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.\n\nReturn _an array of integers_ `answer` _where_ `answer[i]` _is the number of islands after turning the cell_ `(ri, ci)` _into a land_.\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n"}
{"question": "Given a 2D matrix `matrix`, handle multiple queries of the following types:\n\n1.  **Update** the value of a cell in `matrix`.\n2.  Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nImplement the NumMatrix class:\n\n*   `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n*   `void update(int row, int col, int val)` **Updates** the value of `matrix[row][col]` to be `val`.\n*   `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\n"}
{"question": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\nReturn _the maximum coins you can collect by bursting the balloons wisely_.\n\n"}
{"question": "Given an integer array `nums`, return _an integer array_ `counts` _where_ `counts[i]` _is the number of smaller elements to the right of_ `nums[i]`.\n\n"}
{"question": "You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where:\n\n*   each `0` marks **an empty land** that you can pass by freely,\n*   each `1` marks **a building** that you cannot pass through, and\n*   each `2` marks **an obstacle** that you cannot pass through.\n\nYou want to build a house on an empty land that reaches all buildings in the **shortest total travel** distance. You can only move up, down, left, and right.\n\nReturn _the **shortest travel distance** for such a house_. If it is not possible to build such a house according to the above rules, return `-1`.\n\nThe **total travel distance** is the sum of the distances between the houses of the friends and the meeting point.\n\nThe distance is calculated using [Manhattan Distance](http://en.wikipedia.org/wiki/Taxicab_geometry), where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.\n\nCreate the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\nReturn an array of the `k` digits representing the answer.\n\n"}
{"question": "Given an integer array `nums` and two integers `lower` and `upper`, return _the number of range sums that lie in_ `[lower, upper]` _inclusive_.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.\n\n"}
{"question": "Given an `m x n` integers `matrix`, return _the length of the longest increasing path in_ `matrix`.\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed).\n\n"}
{"question": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.\n\nReturn _the minimum number of patches required_.\n\n"}
{"question": "You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\nAll of the tickets belong to a man who departs from `\"JFK \"`, thus, the itinerary must begin with `\"JFK \"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\n*   For example, the itinerary `[ \"JFK \", \"LGA \"]` has a smaller lexical order than `[ \"JFK \", \"LGB \"]`.\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\n"}
{"question": "You are given an array of integers `distance`.\n\nYou start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\n\nReturn `true` _if your path crosses itself or_ `false` _if it does not_.\n\n"}
{"question": "You are given a **0-indexed** array of **unique** strings `words`.\n\nA **palindrome pair** is a pair of integers `(i, j)` such that:\n\n*   `0 <= i, j < words.length`,\n*   `i != j`, and\n*   `words[i] + words[j]` (the concatenation of the two strings) is a palindrome.\n\nReturn _an array of all the **palindrome pairs** of_ `words`.\n\n"}
{"question": "Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the `SummaryRanges` class:\n\n*   `SummaryRanges()` Initializes the object with an empty stream.\n*   `void addNum(int value)` Adds the integer `value` to the stream.\n*   `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`.\n\n"}
{"question": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.\n\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\n\nReturn _the maximum number of envelopes you can Russian doll (i.e., put one inside the other)_.\n\n**Note:** You cannot rotate an envelope.\n\n"}
{"question": "Given a string `s` and an integer `k`, rearrange `s` such that the same characters are **at least** distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\" \"`.\n\n"}
{"question": "Given an `m x n` matrix `matrix` and an integer `k`, return _the max sum of a rectangle in the matrix such that its sum is no larger than_ `k`.\n\nIt is **guaranteed** that there will be a rectangle with a sum no larger than `k`.\n\n"}
{"question": "`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the `RandomizedCollection` class:\n\n*   `RandomizedCollection()` Initializes the empty `RandomizedCollection` object.\n*   `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise.\n*   `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n*   `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on **average** `O(1)` time complexity.\n\n**Note:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.\n\n"}
{"question": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\nReturn `true` _if all the rectangles together form an exact cover of a rectangular region_.\n\n"}
{"question": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n\nGiven a list of `stones`' positions (in units) in sorted **ascending order**, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.\n\nIf the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.\n\n"}
{"question": "Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return _the volume of water it can trap after raining_.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**.\n\nReturn _the minimized largest sum of the split_.\n\nA **subarray** is a contiguous part of the array.\n\n"}
{"question": "A string can be **abbreviated** by replacing any number of **non-adjacent** substrings with their lengths. For example, a string such as `\"substitution \"` could be abbreviated as (but not limited to):\n\n*   `\"s10n \"` ( `\"s ubstitutio n \"`)\n*   `\"sub4u4 \"` ( `\"sub stit u tion \"`)\n*   `\"12 \"` ( `\"substitution \"`)\n*   `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`)\n*   `\"substitution \"` (no substrings replaced)\n\nNote that `\"s55n \"` ( `\"s ubsti tutio n \"`) is not a valid abbreviation of `\"substitution \"` because the replaced substrings are adjacent.\n\nThe **length** of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `\"s10n \"` has a length of `3` (`2` letters + `1` substring) and `\"su3i1u2on \"` has a length of `9` (`6` letters + `3` substrings).\n\nGiven a target string `target` and an array of strings `dictionary`, return _an **abbreviation** of_ `target` _with the **shortest possible length** such that it is **not an abbreviation** of **any** string in_ `dictionary`_. If there are multiple shortest abbreviations, return any of them_.\n\n"}
{"question": "A password is considered strong if the below conditions are all met:\n\n*   It has at least `6` characters and at most `20` characters.\n*   It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**.\n*   It does not contain three repeating characters in a row (i.e., `\"B**aaa**bb0 \"` is weak, but `\"B**aa**b**a**0 \"` is strong).\n\nGiven a string `password`, return _the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`._\n\nIn one step, you can:\n\n*   Insert one character to `password`,\n*   Delete one character from `password`, or\n*   Replace one character of `password` with another character.\n\n"}
{"question": "Given an array of **unique** strings `words`, return _all the_ **[word squares](https://en.wikipedia.org/wiki/Word_square)** _you can build from_ `words`. The same word from `words` can be used **multiple times**. You can return the answer in **any order**.\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n*   For example, the word sequence `[ \"ball \", \"area \", \"lead \", \"lady \"]` forms a word square because each word reads the same both horizontally and vertically.\n\n"}
{"question": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\nFor example, you may serialize the following `3-ary` tree\n\nas `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format.\n\nOr you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.\n\nFor example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nYou do not necessarily need to follow the above-suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.\n\n"}
{"question": "Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example)._\n\nFor example, you may encode the following `3-ary` tree to a binary tree in this way:\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n\nNote that the above is just an example which _might or might not_ work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n\n"}
{"question": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\n\nImplement the `AllOne` class:\n\n*   `AllOne()` Initializes the object of the data structure.\n*   `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`.\n*   `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement.\n*   `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\" \"`.\n*   `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\" \"`.\n\n**Note** that each function must run in `O(1)` average time complexity.\n\n"}
{"question": "Given two integers `n` and `k`, return _the_ `kth` _lexicographically smallest integer in the range_ `[1, n]`.\n\n"}
{"question": "Given an integer array `nums`, return _the number of all the **arithmetic subsequences** of_ `nums`.\n\nA sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n*   For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences.\n*   For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence.\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n*   For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\nThe test cases are generated so that the answer fits in **32-bit** integer.\n\n"}
{"question": "There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n\n1.  Choose some live pigs to feed.\n2.  For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.\n3.  Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time.\n4.  After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n5.  Repeat this process until you run out of time.\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return _the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time_.\n\n"}
{"question": "Design and implement a data structure for a [Least Frequently Used (LFU)](https://en.wikipedia.org/wiki/Least_frequently_used) cache.\n\nImplement the `LFUCache` class:\n\n*   `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.\n*   `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.\n*   `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated.\n\nTo determine the least frequently used key, a **use counter** is maintained for each key in the cache. The key with the smallest **use counter** is the least frequently used key.\n\nWhen a key is first inserted into the cache, its **use counter** is set to `1` (due to the `put` operation). The **use counter** for a key in the cache is incremented either a `get` or `put` operation is called on it.\n\nThe functions `get` and `put` must each run in `O(1)` average time complexity.\n\n"}
{"question": "You are given an array of transactions `transactions` where `transactions[i] = [fromi, toi, amounti]` indicates that the person with `ID = fromi` gave `amounti $` to the person with `ID = toi`.\n\nReturn _the minimum number of transactions required to settle the debt_.\n\n"}
{"question": "We define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times.\n\n*   For example, `str == [ \"abc \", 3] == \"abcabcabc \"`.\n\nWe define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`.\n\n*   For example, `s1 = \"abc \"` can be obtained from `s2 = \"ab**dbe**c \"` based on our definition by removing the bolded underlined characters.\n\nYou are given two strings `s1` and `s2` and two integers `n1` and `n2`. You have the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`.\n\nReturn _the maximum integer_ `m` _such that_ `str = [str2, m]` _can be obtained from_ `str1`.\n\n"}
{"question": "Given a string `s`, encode the string such that its encoded length is the shortest.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. `k` should be a positive integer.\n\nIf an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return **any of them**.\n\n"}
{"question": "Given an array of strings `words` (**without duplicates**), return _all the **concatenated words** in the given list of_ `words`.\n\nA **concatenated word** is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.\n\n"}
{"question": "Given an integer n, return _the **largest palindromic integer** that can be represented as the product of two `n`\\-digits integers_. Since the answer can be very large, return it **modulo** `1337`.\n\n"}
{"question": "The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\n*   For examples, if `arr = [2,3,4]`, the median is `3`.\n*   For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`.\n\nYou are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\nReturn _the median array for each window in the original array_. Answers within `10-5` of the actual value will be accepted.\n\n"}
{"question": "Given an integer `n` represented as a string, return _the smallest **good base** of_ `n`.\n\nWe call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are `1`'s.\n\n"}
{"question": "You are playing a variation of the game Zuma.\n\nIn this variation of Zuma, there is a **single row** of colored balls on a board, where each ball can be colored red `'R'`, yellow `'Y'`, blue `'B'`, green `'G'`, or white `'W'`. You also have several colored balls in your hand.\n\nYour goal is to **clear all** of the balls from the board. On each turn:\n\n*   Pick **any** ball from your hand and insert it in between two balls in the row or on either end of the row.\n*   If there is a group of **three or more consecutive balls** of the **same color**, remove the group of balls from the board.\n    *   If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n*   If there are no more balls on the board, then you win the game.\n*   Repeat this process until you either win or do not have any more balls in your hand.\n\nGiven a string `board`, representing the row of balls on the board, and a string `hand`, representing the balls in your hand, return _the **minimum** number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return_ `-1`.\n\n"}
{"question": "You are controlling a robot that is located somewhere in a room. The room is modeled as an `m x n` binary grid where `0` represents a wall and `1` represents an empty slot.\n\nThe robot starts at an unknown location in the room that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API `Robot`.\n\nYou are tasked to use the robot to clean the entire room (i.e., clean every empty cell in the room). The robot with the four given APIs can move forward, turn left, or turn right. Each turn is `90` degrees.\n\nWhen the robot tries to move into a wall cell, its bumper sensor detects the obstacle, and it stays on the current cell.\n\nDesign an algorithm to clean the entire room using the following APIs:\n\ninterface Robot {\n  // returns true if next cell is open and robot moves into the cell.\n  // returns false if next cell is obstacle and robot stays on the current cell.\n  boolean move();\n\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\n  // Each turn will be 90 degrees.\n  void turnLeft();\n  void turnRight();\n\n  // Clean the current cell.\n  void clean();\n}\n\n**Note** that the initial direction of the robot will be facing up. You can assume all four edges of the grid are all surrounded by a wall.\n\n**Custom testing:**\n\nThe input is only given to initialize the room and the robot's position internally. You must solve this problem \"blindfolded \". In other words, you must control the robot using only the four mentioned APIs without knowing the room layout and the initial robot's position.\n\n"}
{"question": "Given an integer array `nums`, return _the number of **reverse pairs** in the array_.\n\nA **reverse pair** is a pair `(i, j)` where:\n\n*   `0 <= i < j < nums.length` and\n*   `nums[i] > 2 * nums[j]`.\n\n"}
{"question": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.\n\nGiven the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return _a string_ `instructions` _of all the instructions that the ball should follow to drop in the hole with the **shortest distance** possible_. If there are multiple valid instructions, return the **lexicographically minimum** one. If the ball can't drop in the hole, return `\"impossible \"`.\n\nIf there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).\n\nThe **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n"}
{"question": "Suppose LeetCode will start its **IPO** soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the **IPO**. Since it has limited resources, it can only finish at most `k` distinct projects before the **IPO**. Help LeetCode design the best way to maximize its total capital after finishing at most `k` distinct projects.\n\nYou are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it.\n\nInitially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\n\nPick a list of **at most** `k` distinct projects from given projects to **maximize your final capital**, and return _the final maximized capital_.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n"}
{"question": "In the video game Fallout 4, the quest **\"Road to Freedom \"** requires players to reach a metal dial called the **\"Freedom Trail Ring \"** and use the dial to spell a specific keyword to open the door.\n\nGiven a string `ring` that represents the code engraved on the outer ring and another string `key` that represents the keyword that needs to be spelled, return _the minimum number of steps to spell all the characters in the keyword_.\n\nInitially, the first character of the ring is aligned at the `\"12:00 \"` direction. You should spell all the characters in `key` one by one by rotating `ring` clockwise or anticlockwise to make each character of the string key aligned at the `\"12:00 \"` direction and then by pressing the center button.\n\nAt the stage of rotating the ring to spell the key character `key[i]`:\n\n1.  You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`'s characters at the `\"12:00 \"` direction, where this character must equal `key[i]`.\n2.  If the character `key[i]` has been aligned at the `\"12:00 \"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n"}
{"question": "You have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n\nFor each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n\nGiven an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return _the minimum number of moves to make all the washing machines have the same number of dresses_. If it is not possible to do it, return `-1`.\n\n"}
{"question": "Given an array of **distinct** strings `words`, return _the minimal possible **abbreviations** for every word_.\n\nThe following are the rules for a string abbreviation:\n\n1.  The **initial** abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\n2.  If more than one word shares the **same** abbreviation, then perform the following operation:\n    *   **Increase** the prefix (characters in the first part) of each of their abbreviations by `1`.\n        *   For example, say you start with the words `[ \"abcdef \", \"abndef \"]` both initially abbreviated as `\"a4f \"`. Then, a sequence of operations would be `[ \"a4f \", \"a4f \"]` -> `[ \"ab3f \", \"ab3f \"]` -> `[ \"abc2f \", \"abn2f \"]`.\n    *   This operation is repeated until every abbreviation is **unique**.\n3.  At the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n"}
{"question": "You are given several `boxes` with different colors represented by different positive numbers.\n\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.\n\nReturn _the maximum points you can get_.\n\n"}
{"question": "Given an integer array `nums` of length `n`, return `true` if there is a triplet `(i, j, k)` which satisfies the following conditions:\n\n*   `0 < i, i + 1 < j, j + 1 < k < n - 1`\n*   The sum of subarrays `(0, i - 1)`, `(i + 1, j - 1)`, `(j + 1, k - 1)` and `(k + 1, n - 1)` is equal.\n\nA subarray `(l, r)` represents a slice of the original array starting from the element indexed `l` to the element indexed `r`.\n\n"}
{"question": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   `'A'`: Absent.\n*   `'L'`: Late.\n*   `'P'`: Present.\n\nAny student is eligible for an attendance award if they meet **both** of the following criteria:\n\n*   The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n*   The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nGiven an integer `n`, return _the **number** of possible attendance records of length_ `n` _that make a student eligible for an attendance award. The answer may be very large, so return it **modulo**_ `109 + 7`.\n\n"}
{"question": "Given a string `n` representing an integer, return _the closest integer (not including itself), which is a palindrome_. If there is a tie, return _**the smaller one**_.\n\nThe closest is defined as the absolute difference minimized between two integers.\n\n"}
{"question": "LeetCode wants to give one of its best employees the option to travel among `n` cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n\nRules and restrictions:\n\n1.  You can only travel among `n` cities, represented by indexes from `0` to `n - 1`. Initially, you are in the city indexed `0` on **Monday**.\n2.  The cities are connected by flights. The flights are represented as an `n x n` matrix (not necessarily symmetrical), called `flights` representing the airline status from the city `i` to the city `j`. If there is no flight from the city `i` to the city `j`, `flights[i][j] == 0`; Otherwise, `flights[i][j] == 1`. Also, `flights[i][i] == 0` for all `i`.\n3.  You totally have `k` weeks (each week has **seven days**) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we do not consider the impact of flight time.\n4.  For each city, you can only have restricted vacation days in different weeks, given an `n x k` matrix called `days` representing this relationship. For the value of `days[i][j]`, it represents the maximum days you could take a vacation in the city `i` in the week `j`.\n5.  You could stay in a city beyond the number of vacation days, but you should work on the extra days, which will not be counted as vacation days.\n6.  If you fly from city `A` to city `B` and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city `B` in that week.\n7.  We do not consider the impact of flight hours on the calculation of vacation days.\n\nGiven the two matrices `flights` and `days`, return _the maximum vacation days you could take during_ `k` _weeks_.\n\n"}
{"question": "You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden.\n\nFence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**.\n\nReturn _the coordinates of trees that are exactly located on the fence perimeter_. You may return the answer in **any order**.\n\n"}
{"question": "Design a data structure that simulates an in-memory file system.\n\nImplement the FileSystem class:\n\n*   `FileSystem()` Initializes the object of the system.\n*   `List ls(String path)`\n    \n    *   If `path` is a file path, returns a list that only contains this file's name.\n    *   If `path` is a directory path, returns the list of file and directory names **in this directory**.\n    \n    The answer should in **lexicographic order**.\n*   `void mkdir(String path)` Makes a new directory according to the given `path`. The given directory path does not exist. If the middle directories in the path do not exist, you should create them as well.\n*   `void addContentToFile(String filePath, String content)`\n    *   If `filePath` does not exist, creates that file containing given `content`.\n    *   If `filePath` already exists, appends the given `content` to original content.\n*   `String readContentFromFile(String filePath)` Returns the content in the file at `filePath`.\n\n"}
{"question": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\n\nA code snippet is valid if all the following rules hold:\n\n1.  The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid.\n2.  A **closed tag** (not necessarily valid) has exactly the following format : `TAG_CONTENT`. Among them, is the start tag, and is the end tag. The TAG\\_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG\\_NAME and TAG\\_CONTENT are valid.\n3.  A **valid** `TAG_NAME` only contain **upper-case letters**, and has length in range \\[1,9\\]. Otherwise, the `TAG_NAME` is **invalid**.\n4.  A **valid** `TAG_CONTENT` may contain other **valid closed tags**, **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG\\_NAME. Otherwise, the `TAG_CONTENT` is **invalid**.\n5.  A start tag is unmatched if no end tag exists with the same TAG\\_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n6.  A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or ``, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).``\n``` *   The cdata has the following format : . The range of `CDATA_CONTENT` is defined as the characters between ``and the **first subsequent** `]]>`.`` ``*   `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.`` ```\n\n``` ``  "}
{"question": "Given a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones.\n\n"}
{"question": "For an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`.\n\nGiven two integers n and k, return the number of different arrays consist of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`.\n\n"}
{"question": "There are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`.\n\nYou will start on the `1st` day and you cannot take two or more courses simultaneously.\n\nReturn _the maximum number of courses that you can take_.\n\n"}
{"question": "Design the basic function of **Excel** and implement the function of the sum formula.\n\nImplement the `Excel` class:\n\n*   `Excel(int height, char width)` Initializes the object with the `height` and the `width` of the sheet. The sheet is an integer matrix `mat` of size `height x width` with the row index in the range `[1, height]` and the column index in the range `['A', width]`. All the values should be **zero** initially.\n*   `void set(int row, char column, int val)` Changes the value at `mat[row][column]` to be `val`.\n*   `int get(int row, char column)` Returns the value at `mat[row][column]`.\n*   `int sum(int row, char column, List numbers)` Sets the value at `mat[row][column]` to be the sum of cells represented by `numbers` and returns the value at `mat[row][column]`. This sum formula **should exist** until this cell is overlapped by another value or another sum formula. `numbers[i]` could be on the format:\n    *   `\"ColRow \"` that represents a single cell.\n        *   For example, `\"F7 \"` represents the cell `mat[7]['F']`.\n    *   `\"ColRow1:ColRow2 \"` that represents a range of cells. The range will always be a rectangle where `\"ColRow1 \"` represent the position of the top-left cell, and `\"ColRow2 \"` represents the position of the bottom-right cell.\n        *   For example, `\"B3:F7 \"` represents the cells `mat[i][j]` for `3 <= i <= 7` and `'B' <= j <= 'F'`.\n\n**Note:** You could assume that there will not be any circular sum reference.\n\n*   For example, `mat[1]['A'] == sum(1, \"B \")` and `mat[1]['B'] == sum(1, \"A \")`.\n\n"}
{"question": "You have `k` lists of sorted integers in **non-decreasing order**. Find the **smallest** range that includes at least one number from each of the `k` lists.\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`.\n\n"}
{"question": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\n**In addition** to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1* \"` may represent any of the encoded messages `\"11 \"`, `\"12 \"`, `\"13 \"`, `\"14 \"`, `\"15 \"`, `\"16 \"`, `\"17 \"`, `\"18 \"`, or `\"19 \"`. Decoding `\"1* \"` is equivalent to decoding **any** of the encoded messages it can represent.\n\nGiven a string `s` consisting of digits and `'*'` characters, return _the **number** of ways to **decode** it_.\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`).\n\nYou are given a string array `sentences` and an integer array `times` both of length `n` where `sentences[i]` is a previously typed sentence and `times[i]` is the corresponding number of times the sentence was typed. For each input character except `'#'`, return the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed.\n\nHere are the specific rules:\n\n*   The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.\n*   The returned top `3` hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).\n*   If less than `3` hot sentences exist, return as many as you can.\n*   When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.\n\nImplement the `AutocompleteSystem` class:\n\n*   `AutocompleteSystem(String[] sentences, int[] times)` Initializes the object with the `sentences` and `times` arrays.\n*   `List input(char c)` This indicates that the user typed the character `c`.\n    *   Returns an empty array `[]` if `c == '#'` and stores the inputted sentence in the system.\n    *   Returns the top `3` historical hot sentences that have the same prefix as the part of the sentence already typed. If there are fewer than `3` matches, return them all.\n\n"}
{"question": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\nFind a contiguous subarray whose **length is greater than or equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.\n\n"}
{"question": "You are given an integer array `coins` (**1-indexed**) of length `n` and an integer `maxJump`. You can jump to any index `i` of the array `coins` if `coins[i] != -1` and you have to pay `coins[i]` when you visit index `i`. In addition to that, if you are currently at index `i`, you can only jump to any index `i + k` where `i + k <= n` and `k` is a value in the range `[1, maxJump]`.\n\nYou are initially positioned at index `1` (`coins[1]` is not `-1`). You want to find the path that reaches index n with the minimum cost.\n\nReturn an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the **lexicographically smallest** such path. If it is not possible to reach index n, return an empty array.\n\nA path `p1 = [Pa1, Pa2, ..., Pax]` of length `x` is **lexicographically smaller** than `p2 = [Pb1, Pb2, ..., Pbx]` of length `y`, if and only if at the first `j` where `Paj` and `Pbj` differ, `Paj < Pbj`; when no such `j` exists, then `x < y`.\n\n"}
{"question": "Start from integer `1`, remove any integer that contains `9` such as `9`, `19`, `29`...\n\nNow, you will have a new integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...]`.\n\nGiven an integer `n`, return _the_ `nth` (**1-indexed**) integer in the new sequence.\n\n"}
{"question": "There is a strange printer with the following two special properties:\n\n*   The printer can only print a sequence of **the same character** each time.\n*   At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\nGiven a string `s`, return _the minimum number of turns the printer needed to print it_.\n\n"}
{"question": "Nearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**).\n\nGiven three integers `m`, `n`, and `k`, return _the_ `kth` _smallest element in the_ `m x n` _multiplication table_.\n\n"}
{"question": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n\n*   `0` means the cell cannot be walked through.\n*   `1` represents an empty cell that can be walked through.\n*   A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).\n\nStarting from the point `(0, 0)`, return _the minimum steps you need to walk to cut off all the trees_. If you cannot cut off all the trees, return `-1`.\n\n**Note:** The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\n"}
{"question": "You are given an integer array `cards` of length `4`. You have four cards, each containing a number in the range `[1, 9]`. You should arrange the numbers on these cards in a mathematical expression using the operators `['+', '-', '*', '/']` and the parentheses `'('` and `')'` to get the value 24.\n\nYou are restricted with the following rules:\n\n*   The division operator `'/'` represents real division, not integer division.\n    *   For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`.\n*   Every operation done is between two numbers. In particular, we cannot use `'-'` as a unary operator.\n    *   For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1 \"` is **not allowed**.\n*   You cannot concatenate numbers together\n    *   For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12 \"` is not valid.\n\nReturn `true` if you can get such expression that evaluates to `24`, and `false` otherwise.\n\n"}
{"question": "You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on **exactly one** bulb every day until all bulbs are on after `n` days.\n\nYou are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is **0-indexed** and `x` is **1-indexed.**\n\nGiven an integer `k`, return _the **minimum day number** such that there exists two **turned on** bulbs that have **exactly** `k` bulbs between them that are **all turned off**. If there isn't such day, return `-1`._\n\n"}
{"question": "In this problem, a rooted tree is a **directed** graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n\nThe given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a **directed** edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.\n\nReturn _an edge that can be removed so that the resulting graph is a rooted tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the given 2D-array.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one.\n\n"}
{"question": "We are given `n` different types of `stickers`. Each sticker has a lowercase English word on it.\n\nYou would like to spell out the given string `target` by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\n\nReturn _the minimum number of stickers that you need to spell out_ `target`. If the task is impossible, return `-1`.\n\n**Note:** In all test cases, all words were chosen randomly from the `1000` most common US English words, and `target` was chosen as a concatenation of two random words.\n\n"}
{"question": "There are several squares being dropped onto the X-axis of a 2D plane.\n\nYou are given a 2D integer array `positions` where `positions[i] = [lefti, sideLengthi]` represents the `ith` square with a side length of `sideLengthi` that is dropped with its left edge aligned with X-coordinate `lefti`.\n\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands **on the top side of another square** or **on the X-axis**. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\n\nAfter each square is dropped, you must record the **height of the current tallest stack of squares**.\n\nReturn _an integer array_ `ans` _where_ `ans[i]` _represents the height described above after dropping the_ `ith` _square_.\n\n"}
{"question": "You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is **not** in `blacklist`. Any integer that is in the mentioned range and not in `blacklist` should be **equally likely** to be returned.\n\nOptimize your algorithm such that it minimizes the number of calls to the **built-in** random function of your language.\n\nImplement the `Solution` class:\n\n*   `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`.\n*   `int pick()` Returns a random integer in the range `[0, n - 1]` and not in `blacklist`.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nAn island is considered to be the same as another if they have the same shape, or have the same shape after **rotation** (90, 180, or 270 degrees only) or **reflection** (left/right direction or up/down direction).\n\nReturn _the number of **distinct** islands_.\n\n"}
{"question": "Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.\n\nImplement the `MaxStack` class:\n\n*   `MaxStack()` Initializes the stack object.\n*   `void push(int x)` Pushes element `x` onto the stack.\n*   `int pop()` Removes the element on top of the stack and returns it.\n*   `int top()` Gets the element on the top of the stack without removing it.\n*   `int peekMax()` Retrieves the maximum element in the stack without removing it.\n*   `int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the **top-most** one.\n\nYou must come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call.\n\n"}
{"question": "The **distance of a pair** of integers `a` and `b` is defined as the absolute difference between `a` and `b`.\n\nGiven an integer array `nums` and an integer `k`, return _the_ `kth` _smallest **distance among all the pairs**_ `nums[i]` _and_ `nums[j]` _where_ `0 <= i < j < nums.length`.\n\n"}
{"question": "Given a string `formula` representing a chemical formula, return _the count of each atom_.\n\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\n\nOne or more digits representing that element's count may follow if the count is greater than `1`. If the count is `1`, no digits will follow.\n\n*   For example, `\"H2O \"` and `\"H2O2 \"` are possible, but `\"H1O2 \"` is impossible.\n\nTwo formulas are concatenated together to produce another formula.\n\n*   For example, `\"H2O2He3Mg4 \"` is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a formula.\n\n*   For example, `\"(H2O2) \"` and `\"(H2O2)3 \"` are formulas.\n\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than `1`), followed by the second name (in sorted order), followed by its count (if that count is more than `1`), and so on.\n\nThe test cases are generated so that all the values in the output fit in a **32-bit** integer.\n\n"}
{"question": "Given strings `s1` and `s2`, return _the minimum contiguous substring part of_ `s1`_, so that_ `s2` _is a subsequence of the part_.\n\nIf there is no such window in `s1` that covers all characters in `s2`, return the empty string `\" \"`. If there are multiple such minimum-length windows, return the one with the **left-most starting index**.\n\n"}
{"question": "Given a string s, return _the number of different non-empty palindromic subsequences in_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA subsequence of a string is obtained by deleting zero or more characters from the string.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`.\n\n"}
{"question": "A `k`\\-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)\n\nYou are given some events `[startTime, endTime)`, after each given event, return an integer `k` representing the maximum `k`\\-booking between all the previous events.\n\nImplement the `MyCalendarThree` class:\n\n*   `MyCalendarThree()` Initializes the object.\n*   `int book(int startTime, int endTime)` Returns an integer `k` representing the largest integer such that there exists a `k`\\-booking in the calendar.\n\n"}
{"question": "You are given a string expression representing a Lisp-like expression to return the integer value of.\n\nThe syntax for these expressions is given as follows.\n\n*   An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n*   (An integer could be positive or negative.)\n*   A let expression takes the form `\"(let v1 e1 v2 e2 ... vn en expr) \"`, where let is always the string `\"let \"`, then there are one or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let expression is the value of the expression `expr`.\n*   An add expression takes the form `\"(add e1 e2) \"` where add is always the string `\"add \"`, there are always two expressions `e1`, `e2` and the result is the addition of the evaluation of `e1` and the evaluation of `e2`.\n*   A mult expression takes the form `\"(mult e1 e2) \"` where mult is always the string `\"mult \"`, there are always two expressions `e1`, `e2` and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\n*   For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names `\"add \"`, `\"let \"`, and `\"mult \"` are protected and will never be used as variable names.\n*   Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\n\n"}
{"question": "You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.\n\n*   `0` means the cell is empty, so you can pass through,\n*   `1` means the cell contains a cherry that you can pick up and pass through, or\n*   `-1` means the cell contains a thorn that blocks your way.\n\nReturn _the maximum number of cherries you can collect by following the rules below_:\n\n*   Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n*   After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n*   When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n*   If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.\n\n"}
{"question": "Design a special dictionary that searches the words in it by a prefix and a suffix.\n\nImplement the `WordFilter` class:\n\n*   `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.\n*   `f(string pref, string suff)` Returns _the index of the word in the dictionary,_ which has the prefix `pref` and the suffix `suff`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`.\n\n"}
{"question": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\n\nThe world is modeled as an `m x n` binary grid `isInfected`, where `isInfected[i][j] == 0` represents uninfected cells, and `isInfected[i][j] == 1` represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two **4-directionally** adjacent cells, on the shared boundary.\n\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There **will never be a tie**.\n\nReturn _the number of walls used to quarantine all the infected regions_. If the world will become fully infected, return the number of walls used.\n\n"}
{"question": "There is a safe protected by a password. The password is a sequence of `n` digits where each digit can be in the range `[0, k - 1]`.\n\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the **most recent** `n` **digits** that were entered each time you type a digit.\n\n*   For example, the correct password is `\"345 \"` and you enter in `\"012345 \"`:\n    *   After typing `0`, the most recent `3` digits is `\"0 \"`, which is incorrect.\n    *   After typing `1`, the most recent `3` digits is `\"01 \"`, which is incorrect.\n    *   After typing `2`, the most recent `3` digits is `\"012 \"`, which is incorrect.\n    *   After typing `3`, the most recent `3` digits is `\"123 \"`, which is incorrect.\n    *   After typing `4`, the most recent `3` digits is `\"234 \"`, which is incorrect.\n    *   After typing `5`, the most recent `3` digits is `\"345 \"`, which is correct and the safe unlocks.\n\nReturn _any string of **minimum length** that will unlock the safe **at some point** of entering it_.\n\n"}
{"question": "You are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively.\n\nA **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`.\n\n*   For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**.\n\nReturn _the minimum possible size of a containing set_.\n\n"}
{"question": "We are given a list `schedule` of employees, which represents the working time for each employee.\n\nEach employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order.\n\nReturn the list of finite intervals representing **common, positive-length free time** for _all_ employees, also in sorted order.\n\n(Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined). Also, we wouldn't include intervals like \\[5, 5\\] in our answer, as they have zero length.\n\n"}
{"question": "**Special binary strings** are binary strings with the following two properties:\n\n*   The number of `0`'s is equal to the number of `1`'s.\n*   Every prefix of the binary string has at least as many `1`'s as `0`'s.\n\nYou are given a **special binary** string `s`.\n\nA move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\n\nReturn _the lexicographically largest resulting string possible after applying the mentioned operations on the string_.\n\n"}
{"question": "There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands.\n\nThe people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`.\n\nReturn _the minimum number of swaps so that every couple is sitting side by side_. A swap consists of choosing any two people, then they stand up and switch seats.\n\n"}
{"question": "You are given an integer array `arr`.\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn _the largest number of chunks we can make to sort the array_.\n\n"}
{"question": "Given an expression such as `expression = \"e + 8 - a + 5 \"` and an evaluation map such as `{ \"e \": 1}` (given in terms of `evalvars = [ \"e \"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[ \"-1*a \", \"14 \"]`\n\n*   An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n*   A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n*   A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x \"` or `\"-x \"`.\n\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\n\n*   For example, `expression = \"1 + 2 * 3 \"` has an answer of `[ \"7 \"]`.\n\nThe format of the output is as follows:\n\n*   For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n    *   For example, we would never write a term like `\"b*a*c \"`, only `\"a*b*c \"`.\n*   Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n    *   For example, `\"a*a*b*c \"` has degree `4`.\n*   The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\n*   An example of a well-formatted answer is `[ \"-2*a*a*a \", \"3*a*a*b \", \"3*b*b \", \"4*a \", \"5*c \", \"-6 \"]`.\n*   Terms (including constant terms) with coefficient `0` are not included.\n    *   For example, an expression of `\"0 \"` has an output of `[]`.\n\n**Note:** You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n"}
{"question": "Implement a basic calculator to evaluate a simple expression string.\n\nThe expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should **truncate toward zero**.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n"}
{"question": "On an `2 x 3` board, there are five tiles labeled from `1` to `5`, and an empty square represented by `0`. A **move** consists of choosing `0` and a 4-directionally adjacent number and swapping it.\n\nThe state of the board is solved if and only if the board is `[[1,2,3],[4,5,0]]`.\n\nGiven the puzzle board `board`, return _the least number of moves required so that the state of the board is solved_. If it is impossible for the state of the board to be solved, return `-1`.\n\n"}
{"question": "You are given an integer array `stations` that represents the positions of the gas stations on the **x-axis**. You are also given an integer `k`.\n\nYou should add `k` new gas stations. You can add the stations anywhere on the **x-axis**, and not necessarily on an integer position.\n\nLet `penalty()` be the maximum distance between **adjacent** gas stations after adding the `k` new stations.\n\nReturn _the smallest possible value of_ `penalty()`. Answers within `10-6` of the actual answer will be accepted.\n\n"}
{"question": "You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`.\n\nThe rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\nReturn _the least time until you can reach the bottom right square_ `(n - 1, n - 1)` _if you start at the top left square_ `(0, 0)`.\n\n"}
{"question": "Given four integers `sx`, `sy`, `tx`, and `ty`, return `true` _if it is possible to convert the point_ `(sx, sy)` _to the point_ `(tx, ty)` _through some operations__, or_ `false` _otherwise_.\n\nThe allowed operation on some point `(x, y)` is to convert it to either `(x, x + y)` or `(x + y, y)`.\n\n"}
{"question": "You are given an `n x n` binary grid `board`. In each move, you can swap any two rows with each other, or any two columns with each other.\n\nReturn _the minimum number of moves to transform the board into a **chessboard board**_. If the task is impossible, return `-1`.\n\nA **chessboard board** is a board where no `0`'s and no `1`'s are 4-directionally adjacent.\n\n"}
{"question": "Let `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`.\n\n*   For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end.\n\nGiven an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`.\n\n"}
{"question": "You are given an array `nums`. You can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. Afterward, any entries that are less than or equal to their index are worth one point.\n\n*   For example, if we have `nums = [2,4,1,3,0]`, and we rotate by `k = 2`, it becomes `[1,3,0,2,4]`. This is worth `3` points because `1 > 0` \\[no points\\], `3 > 1` \\[no points\\], `0 <= 2` \\[one point\\], `2 <= 3` \\[one point\\], `4 <= 4` \\[one point\\].\n\nReturn _the rotation index_ `k` _that corresponds to the highest score we can achieve if we rotated_ `nums` _by it_. If there are multiple answers, return the smallest such index `k`.\n\n"}
{"question": "You are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`.\n\n*   For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`.\n\nReturn _the minimum number of needed operations to make_ `nums1` _and_ `nums2` _**strictly increasing**_. The test cases are generated so that the given input always makes it possible.\n\nAn array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`.\n\n"}
{"question": "You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if:\n\n*   It is directly connected to the top of the grid, or\n*   At least one other brick in its four adjacent cells is **stable**.\n\nYou are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks).\n\nReturn _an array_ `result`_, where each_ `result[i]` _is the number of bricks that will **fall** after the_ `ith` _erasure is applied._\n\n**Note** that an erasure may refer to a location with no brick, and if it does, no bricks drop.\n\n"}
{"question": "You are given an integer array `nums`.\n\nYou should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\n**Note** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.\n\n"}
{"question": "You are given an array of integers `nums` represents the numbers written on a chalkboard.\n\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become `0`, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is `0`.\n\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to `0`, then that player wins.\n\nReturn `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n"}
{"question": "You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n*   For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\nReturn _the least number of buses you must take to travel from_ `source` _to_ `target`. Return `-1` if it is not possible.\n\n"}
{"question": "Your car starts at position `0` and speed `+1` on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions `'A'` (accelerate) and `'R'` (reverse):\n\n*   When you get an instruction `'A'`, your car does the following:\n    *   `position += speed`\n    *   `speed *= 2`\n*   When you get an instruction `'R'`, your car does the following:\n    *   If your speed is positive then `speed = -1`\n    *   otherwise `speed = 1`Your position stays the same.\n\nFor example, after commands `\"AAR \"`, your car goes to positions `0 --> 1 --> 3 --> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`.\n\nGiven a target position `target`, return _the length of the shortest sequence of instructions to get there_.\n\n"}
{"question": "You are given an `n x n` binary matrix `grid`. You are allowed to change **at most one** `0` to be `1`.\n\nReturn _the size of the largest **island** in_ `grid` _after applying this operation_.\n\nAn **island** is a 4-directionally connected group of `1`s.\n\n"}
{"question": "Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`.\n\n*   For example, calling `countUniqueChars(s)` if `s = \"LEETCODE \"` then `\"L \"`, `\"T \"`, `\"C \"`, `\"O \"`, `\"D \"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.\n\nGiven a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer.\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n"}
{"question": "Given an integer `n`, return _the number of ways you can write_ `n` _as the sum of consecutive positive integers._\n\n"}
{"question": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\nYou are given the integer `n` and the array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nReturn an array `answer` of length `n` where `answer[i]` is the sum of the distances between the `ith` node in the tree and all other nodes.\n\n"}
{"question": "Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.\n\nFor example, `\"tars \"` and `\"rats \"` are similar (swapping at positions `0` and `2`), and `\"rats \"` and `\"arts \"` are similar, but `\"star \"` is not similar to `\"tars \"`, `\"rats \"`, or `\"arts \"`.\n\nTogether, these form two connected groups by similarity: `{ \"tars \", \"rats \", \"arts \"}` and `{ \"star \"}`. Notice that `\"tars \"` and `\"arts \"` are in the same group even though they are not similar. Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\n\nWe are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?\n\n"}
{"question": "You are given an array of unique strings `words` where `words[i]` is six letters long. One word of `words` was chosen as a secret word.\n\nYou are also given the helper object `Master`. You may call `Master.guess(word)` where `word` is a six-letter-long string, and it must be from `words`. `Master.guess(word)` returns:\n\n*   `-1` if `word` is not from `words`, or\n*   an integer representing the number of exact matches (value and position) of your guess to the secret word.\n\nThere is a parameter `allowedGuesses` for each test case where `allowedGuesses` is the maximum number of times you can call `Master.guess(word)`.\n\nFor each test case, you should call `Master.guess` with the secret word without exceeding the maximum number of allowed guesses. You will get:\n\n*   **`\"Either you took too many guesses, or you did not find the secret word. \"`** if you called `Master.guess` more than `allowedGuesses` times or if you did not call `Master.guess` with the secret word, or\n*   **`\"You guessed the secret word correctly. \"`** if you called `Master.guess` with the secret word with the number of calls to `Master.guess` less than or equal to `allowedGuesses`.\n\nThe test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).\n\n"}
{"question": "You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge.\n\nReturn _the length of the shortest path that visits every node_. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\n\n"}
{"question": "You are given a 2D array of axis-aligned `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2]` denotes the `ith` rectangle where `(xi1, yi1)` are the coordinates of the **bottom-left corner**, and `(xi2, yi2)` are the coordinates of the **top-right corner**.\n\nCalculate the **total area** covered by all `rectangles` in the plane. Any area covered by two or more rectangles should only be counted **once**.\n\nReturn _the **total area**_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Strings `s1` and `s2` are `k`**\\-similar** (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`**\\-similar**.\n\n"}
{"question": "There are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker.\n\nWe want to hire exactly `k` workers to form a paid group. To hire a group of `k` workers, we must pay them according to the following rules:\n\n1.  Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n2.  Every worker in the paid group must be paid at least their minimum wage expectation.\n\nGiven the integer `k`, return _the least amount of money needed to form a paid group satisfying the above conditions_. Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the length of the shortest non-empty **subarray** of_ `nums` _with a sum of at least_ `k`. If there is no such **subarray**, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "You are given an `m x n` grid `grid` where:\n\n*   `'.'` is an empty cell.\n*   `'#'` is a wall.\n*   `'@'` is the starting point.\n*   Lowercase letters represent keys.\n*   Uppercase letters represent locks.\n\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\n\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\n\nFor some `1 <= k <= 6`, there is exactly one lowercase and one uppercase letter of the first `k` letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\n\nReturn _the lowest number of moves to acquire all keys_. If it is impossible, return `-1`.\n\n"}
{"question": "A car travels from a starting position to a destination which is `target` miles east of the starting position.\n\nThere are gas stations along the way. The gas stations are represented as an array `stations` where `stations[i] = [positioni, fueli]` indicates that the `ith` gas station is `positioni` miles east of the starting position and has `fueli` liters of gas.\n\nThe car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\n\nReturn _the minimum number of refueling stops the car must make in order to reach its destination_. If it cannot reach the destination, return `-1`.\n\nNote that if the car reaches a gas station with `0` fuel left, the car can still refuel there. If the car reaches the destination with `0` fuel left, it is still considered to have arrived.\n\n"}
{"question": "A positive integer is _magical_ if it is divisible by either `a` or `b`.\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n"}
{"question": "There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.\n\nLet's call a **profitable scheme** any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.\n\nReturn the number of schemes that can be chosen. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n"}
{"question": "You are given an undirected graph (the **\"original graph \"**) with `n` nodes labeled from `0` to `n - 1`. You decide to **subdivide** each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will **subdivide** the edge into. Note that `cnti == 0` means you will not subdivide the edge.\n\nTo **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`, `[xcnti, vi]`.\n\nIn this **new graph**, you want to know how many nodes are **reachable** from the node `0`, where a node is **reachable** if the distance is `maxMoves` or less.\n\nGiven the original graph and `maxMoves`, return _the number of nodes that are **reachable** from node_ `0` _in the new graph_.\n\n"}
{"question": "You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\nEach move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\nReturn _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.\n\n"}
{"question": "The **width** of a sequence is the difference between the maximum and minimum elements in the sequence.\n\nGiven an array of integers `nums`, return _the sum of the **widths** of all the non-empty **subsequences** of_ `nums`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n"}
{"question": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n\nImplement the `FreqStack` class:\n\n*   `FreqStack()` constructs an empty frequency stack.\n*   `void push(int val)` pushes an integer `val` onto the top of the stack.\n*   `int pop()` removes and returns the most frequent element in the stack.\n    *   If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n"}
{"question": "You are given a string `s` and an integer `k`. You can choose one of the first `k` letters of `s` and append it at the end of the string..\n\nReturn _the lexicographically smallest string you could have after applying the mentioned step any number of moves_.\n\n"}
{"question": "Given an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.\n\nReturn _the number of positive integers that can be generated_ that are less than or equal to a given integer `n`.\n\n"}
{"question": "You are given a string `s` of length `n` where `s[i]` is either:\n\n*   `'D'` means decreasing, or\n*   `'I'` means increasing.\n\nA permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` is called a **valid permutation** if for all valid `i`:\n\n*   If `s[i] == 'D'`, then `perm[i] > perm[i + 1]`, and\n*   If `s[i] == 'I'`, then `perm[i] < perm[i + 1]`.\n\nReturn _the number of **valid permutations**_ `perm`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Let's say a positive integer is a **super-palindrome** if it is a palindrome, and it is also the square of a palindrome.\n\nGiven two positive integers `left` and `right` represented as strings, return _the number of **super-palindromes** integers in the inclusive range_ `[left, right]`.\n\n"}
{"question": "A game on an **undirected** graph is played by two players, Mouse and Cat, who alternate turns.\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.\n\nDuring each player's turn, they **must** travel along one edge of the graph that meets where they are. For example, if the Mouse is at node 1, it **must** travel to any node in `graph[1]`.\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\n\nThen, the game can end in three ways:\n\n*   If ever the Cat occupies the same node as the Mouse, the Cat wins.\n*   If ever the Mouse reaches the Hole, the Mouse wins.\n*   If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a `graph`, and assuming both players play optimally, return\n\n*   `1` if the mouse wins the game,\n*   `2` if the cat wins the game, or\n*   `0` if the game is a draw.\n\n"}
{"question": "Your music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\n*   Every song is played **at least once**.\n*   A song can only be played again only if `k` other songs have been played.\n\nGiven `n`, `goal`, and `k`, return _the number of possible playlists that you can create_. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\nNote that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.\n\n"}
{"question": "You are given an array `arr` which consists of only zeros and ones, divide the array into **three non-empty parts** such that all of these parts represent the same binary value.\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n\n*   `arr[0], arr[1], ..., arr[i]` is the first part,\n*   `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n*   `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n*   All three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.\n\nNote that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros **are allowed**, so `[0,1,1]` and `[1,1]` represent the same value.\n\n"}
{"question": "You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.\n\nWe will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n"}
{"question": "You are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == '?'`.\n\nIn one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`.\n\n*   For example, if `stamp = \"abc \"` and `target = \"abcba \"`, then `s` is `\"????? \"` initially. In one turn you can:\n    \n    *   place `stamp` at index `0` of `s` to obtain `\"abc?? \"`,\n    *   place `stamp` at index `1` of `s` to obtain `\"?abc? \"`, or\n    *   place `stamp` at index `2` of `s` to obtain `\"??abc \"`.\n    \n    Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`).\n\nWe want to convert `s` to `target` using **at most** `10 * target.length` turns.\n\nReturn _an array of the index of the left-most letter being stamped at each turn_. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array.\n\n"}
{"question": "Given a string s, return _the number of **distinct non-empty subsequences** of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not.\n\n"}
{"question": "Given an array of strings `words`, return _the smallest string that contains each string in_ `words` _as a substring_. If there are multiple valid strings of the smallest length, return **any of them**.\n\nYou may assume that no string in `words` is a substring of another string in `words`.\n\n"}
{"question": "You are given an integer array of unique positive integers `nums`. Consider the following graph:\n\n*   There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`,\n*   There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`.\n\nReturn _the size of the largest connected component in the graph_.\n\n"}
{"question": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\n\nYou are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`.\n\nReturn _the largest possible height of your billboard installation_. If you cannot support the billboard, return `0`.\n\n"}
{"question": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has **every string (row) in lexicographic** order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return _the minimum possible value of_ `answer.length`.\n\n"}
{"question": "Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.\n\nWhen writing such an expression, we adhere to the following conventions:\n\n*   The division operator (`/`) returns rational numbers.\n*   There are no parentheses placed anywhere.\n*   We use the usual order of operations: multiplication and division happen before addition and subtraction.\n*   It is not allowed to use the unary negation operator (`-`). For example, \"`x - x` \" is a valid expression as it only uses subtraction, but \"`-x + x` \" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.\n\n"}
{"question": "You are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\n\nReturn _the minimum number of cameras needed to monitor all nodes of the tree_.\n\n"}
{"question": "Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\n\nA **rational number** can be represented using up to three parts: , , and a . The number will be represented in one of the following three ways:\n\n*   *   For example, `12`, `0`, and `123`.\n*   `**<.>**`\n    *   For example, `0.5`, `1.`, `2.12`, and `123.0001`.\n*   `**<.>****<(>****<)>**`\n    *   For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n\n*   `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.\n\n"}
{"question": "You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called **odd-numbered jumps**, and the (2nd, 4th, 6th, ...) jumps in the series are called **even-numbered jumps**. Note that the **jumps** are numbered, not the indices.\n\nYou may jump forward from index `i` to index `j` (with `i < j`) in the following way:\n\n*   During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n*   During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n*   It may be the case that for some index `i`, there are no legal jumps.\n\nA starting index is **good** if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).\n\nReturn _the number of **good** starting indices_.\n\n"}
{"question": "You are given an `m x n` integer array `grid` where `grid[i][j]` could be:\n\n*   `1` representing the starting square. There is exactly one starting square.\n*   `2` representing the ending square. There is exactly one ending square.\n*   `0` representing empty squares we can walk over.\n*   `-1` representing obstacles that we cannot walk over.\n\nReturn _the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once_.\n\n"}
{"question": "Given an integer array nums, return _the number of **AND triples**_.\n\nAn **AND triple** is a triple of indices `(i, j, k)` such that:\n\n*   `0 <= i < nums.length`\n*   `0 <= j < nums.length`\n*   `0 <= k < nums.length`\n*   `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.\n\n"}
{"question": "Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree.\n\nFor each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.\n\nThe **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\nReturn _the **vertical order traversal** of the binary tree_.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the number of **good subarrays** of_ `nums`.\n\nA **good array** is an array where the number of different integers in that array is exactly `k`.\n\n*   For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "You are given a binary array `nums` and an integer `k`.\n\nA **k-bit flip** is choosing a **subarray** of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`.\n\nReturn _the minimum number of **k-bit flips** required so that there is no_ `0` _in the array_. If it is not possible, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**.\n\nGiven an integer array nums, return _the number of permutations of_ `nums` _that are **squareful**_.\n\nTwo permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`.\n\n"}
{"question": "There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones.\n\nA move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles.\n\nReturn _the minimum cost to merge all piles of stones into one pile_. If it is impossible, return `-1`.\n\n"}
{"question": "There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp that is initially **turned off**.\n\nYou are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if the same lamp is listed more than once, it is turned on.\n\nWhen a lamp is turned on, it **illuminates its cell** and **all other cells** in the same **row, column, or diagonal**.\n\nYou are also given another 2D array `queries`, where `queries[j] = [rowj, colj]`. For the `jth` query, determine whether `grid[rowj][colj]` is illuminated or not. After answering the `jth` query, **turn off** the lamp at `grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowj][colj]`.\n\nReturn _an array of integers_ `ans`_,_ _where_ `ans[j]` _should be_ `1` _if the cell in the_ `jth` _query was illuminated, or_ `0` _if the lamp was not._\n\n"}
{"question": "Given an integer `n`, return _the number of positive integers in the range_ `[1, n]` _that have **at least one** repeated digit_.\n\n"}
{"question": "We run a preorder depth-first search (DFS) on the `root` of a binary tree.\n\nAt each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node. If the depth of a node is `D`, the depth of its immediate child is `D + 1`. The depth of the `root` node is `0`.\n\nIf a node has only one child, that child is guaranteed to be **the left child**.\n\nGiven the output `traversal` of this traversal, recover the tree and return _its_ `root`.\n\n"}
{"question": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings `words`.\n\nFor example, if `words = [ \"abc \", \"xyz \"]` and the stream added the four characters (one by one) `'a'`, `'x'`, `'y'`, and `'z'`, your algorithm should detect that the suffix `\"xyz \"` of the characters `\"axyz \"` matches `\"xyz \"` from `words`.\n\nImplement the `StreamChecker` class:\n\n*   `StreamChecker(String[] words)` Initializes the object with the strings array `words`.\n*   `boolean query(char letter)` Accepts a new character from the stream and returns `true` if any non-empty suffix from the stream forms a word that is in `words`.\n\n"}
{"question": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.\n\nWe start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.\n\nEach move, we can walk one square north, east, south, or west if the square is **not** in the array of `blocked` squares. We are also not allowed to walk outside of the grid.\n\nReturn `true` _if and only if it is possible to reach the_ `target` _square from the_ `source` _square through a sequence of valid moves_.\n\n"}
{"question": "Given a string `s`, consider all _duplicated substrings_: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.\n\nReturn **any** duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `\" \"`.\n\n"}
{"question": "Given an integer array `nums`, return _the number of non-empty **subarrays** with the leftmost element of the subarray not larger than other elements in the subarray_.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "Given a single-digit integer `d` and two integers `low` and `high`, return _the number of times that_ `d` _occurs as a digit in all integers in the inclusive range_ `[low, high]`.\n\n"}
{"question": "Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target.\n\nA submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.\n\nTwo submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.\n\n"}
{"question": "A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.\n\nWe can rotate digits of a number by `180` degrees to form new digits.\n\n*   When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.\n*   When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.\n\nNote that after rotating a number, we can ignore leading zeros.\n\n*   For example, after rotating `8000`, we have `0008` which is considered as just `8`.\n\nGiven an integer `n`, return _the number of **confusing numbers** in the inclusive range_ `[1, n]`.\n\n"}
{"question": "Given two strings `str1` and `str2`, return _the shortest string that has both_ `str1` _and_ `str2` _as **subsequences**_. If there are multiple valid strings, return **any** of them.\n\nA string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`.\n\n"}
{"question": "_(This problem is an **interactive problem**.)_\n\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven a mountain array `mountainArr`, return the **minimum** `index` such that `mountainArr.get(index) == target`. If such an `index` does not exist, return `-1`.\n\n**You cannot access the mountain array directly.** You may only access the array using a `MountainArray` interface:\n\n*   `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).\n*   `MountainArray.length()` returns the length of the array.\n\nSubmissions making more than `100` calls to `MountainArray.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n"}
{"question": "Under the grammar given below, strings can represent a set of lowercase words. Let `R(expr)` denote the set of words the expression represents.\n\nThe grammar can best be understood through simple examples:\n\n*   Single letters represent a singleton set containing that word.\n    *   `R( \"a \") = { \"a \"}`\n    *   `R( \"w \") = { \"w \"}`\n*   When we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n    *   `R( \"{a,b,c} \") = { \"a \", \"b \", \"c \"}`\n    *   `R( \"{{a,b},{b,c}} \") = { \"a \", \"b \", \"c \"}` (notice the final set only contains each word at most once)\n*   When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n    *   `R( \"{a,b}{c,d} \") = { \"ac \", \"ad \", \"bc \", \"bd \"}`\n    *   `R( \"a{b,c}{d,e}f{g,h} \") = { \"abdfg \", \"abdfh \", \"abefg \", \"abefh \", \"acdfg \", \"acdfh \", \"acefg \", \"acefh \"}`\n\nFormally, the three rules for our grammar:\n\n*   For every lowercase letter `x`, we have `R(x) = {x}`.\n*   For expressions `e1, e2, ... , ek` with `k >= 2`, we have `R({e1, e2, ...}) = R(e1) ∪ R(e2) ∪ ...`\n*   For expressions `e1` and `e2`, we have `R(e1 + e2) = {a + b for (a, b) in R(e1) * R(e2)}`, where `+` denotes concatenation, and `*` denotes the cartesian product.\n\nGiven an expression representing a set of words under the given grammar, return _the sorted list of words that the expression represents_.\n\n"}
{"question": "A **boolean expression** is an expression that evaluates to either `true` or `false`. It can be in one of the following shapes:\n\n*   `'t'` that evaluates to `true`.\n*   `'f'` that evaluates to `false`.\n*   `'!(subExpr)'` that evaluates to **the logical NOT** of the inner expression `subExpr`.\n*   `'&(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical AND** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n*   `'|(subExpr1, subExpr2, ..., subExprn)'` that evaluates to **the logical OR** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`.\n\nGiven a string `expression` that represents a **boolean expression**, return _the evaluation of that expression_.\n\nIt is **guaranteed** that the given expression is valid and follows the given rules.\n\n"}
{"question": "Given an integer array `nums` sorted in non-decreasing order and an integer `k`, return `true` _if this array can be divided into one or more disjoint increasing subsequences of length at least_ `k`_, or_ `false` _otherwise_.\n\n"}
{"question": "In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.\n\nConsider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\n\n*   For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.\n\nReturn _any sufficient team of the smallest possible size, represented by the index of each person_. You may return the answer in **any order**.\n\nIt is **guaranteed** an answer exists.\n\n"}
{"question": "You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:\n\n*   `subtexti` is a **non-empty** string.\n*   The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).\n*   `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).\n\nReturn the largest possible value of `k`.\n\n"}
{"question": "Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing **zero or more** _conversions_.\n\nIn one conversion you can convert **all** occurrences of one character in `str1` to **any** other lowercase English character.\n\nReturn `true` if and only if you can transform `str1` into `str2`.\n\n"}
{"question": "Design a data structure that efficiently finds the **majority element** of a given subarray.\n\nThe **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray.\n\nImplementing the `MajorityChecker` class:\n\n*   `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`.\n*   `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n"}
{"question": "Given a string `s`, return _the last substring of_ `s` _in lexicographical order_.\n\n"}
{"question": "There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.\n\nFor each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to **0-indexing**), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes` where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional, and there could be multiple valid connections between the same two houses with different costs.\n\nReturn _the minimum total cost to supply water to all houses_.\n\n"}
{"question": "You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity.\n\nImplement the `DinnerPlates` class:\n\n*   `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`.\n*   `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`.\n*   `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty.\n*   `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty.\n\n"}
{"question": "With respect to a given `puzzle` string, a `word` is _valid_ if both the following conditions are satisfied:\n\n*   `word` contains the first letter of `puzzle`.\n*   For each letter in `word`, that letter is in `puzzle`.\n    *   For example, if the puzzle is `\"abcdefg \"`, then valid words are `\"faced \"`, `\"cabbage \"`, and `\"baggage \"`, while\n    *   invalid words are `\"beefed \"` (does not include `'a'`) and `\"based \"` (includes `'s'` which is not in the puzzle).\n\nReturn _an array_ `answer`_, where_ `answer[i]` _is the number of words in the given word list_ `words` _that is valid with respect to the puzzle_ `puzzles[i]`.\n\n"}
{"question": "Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any **square** sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones.\n\nReturn the maximum possible number of ones that the matrix `M` can have.\n\n"}
{"question": "Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing.\n\nIn one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`.\n\nIf there is no way to make `arr1` strictly increasing, return `-1`.\n\n"}
{"question": "There are `n` servers numbered from `0` to `n - 1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. Any server can reach other servers directly or indirectly through the network.\n\nA _critical connection_ is a connection that, if removed, will make some servers unable to reach some other server.\n\nReturn all critical connections in the network in any order.\n\n"}
{"question": "You are given a list of blocks, where `blocks[i] = t` means that the `i`\\-th block needs `t` units of time to be built. A block can only be built by exactly one worker.\n\nA worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.\n\nThe time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`.\n\nOutput the minimum time needed to build all blocks.\n\nInitially, there is only **one** worker.\n\n"}
{"question": "There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`\\-th item belongs to and it's equal to `-1` if the `i`\\-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\n\nReturn a sorted list of the items such that:\n\n*   The items that belong to the same group are next to each other in the sorted list.\n*   There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`\\-th item in the sorted array (to the left of the `i`\\-th item).\n\nReturn any solution if there is more than one solution and return an **empty list** if there is no solution.\n\n"}
{"question": "Design a **Skiplist** without using any built-in libraries.\n\nA **skiplist** is a data structure that takes `O(log(n))` time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\n\nFor example, we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:\n\n  \nArtyom Kalinin \\[CC BY-SA 3.0\\], via [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif \"Artyom Kalinin [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\")\n\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than `O(n)`. It can be proven that the average time complexity for each operation is `O(log(n))` and space complexity is `O(n)`.\n\nSee more about Skiplist: [https://en.wikipedia.org/wiki/Skip\\_list](https://en.wikipedia.org/wiki/Skip_list)\n\nImplement the `Skiplist` class:\n\n*   `Skiplist()` Initializes the object of the skiplist.\n*   `bool search(int target)` Returns `true` if the integer `target` exists in the Skiplist or `false` otherwise.\n*   `void add(int num)` Inserts the value `num` into the SkipList.\n*   `bool erase(int num)` Removes the value `num` from the Skiplist and returns `true`. If `num` does not exist in the Skiplist, do nothing and return `false`. If there exist multiple `num` values, removing any one of them is fine.\n\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.\n\n"}
{"question": "In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.\n\nIn one move the snake can:\n\n*   Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n*   Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n*   Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.  \n    \n*   Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.  \n    \n\nReturn the minimum number of moves to reach the target.\n\nIf there is no way to reach the target, return `-1`.\n\n"}
{"question": "Given a string `s` and an integer `k`, return `true` if `s` is a `k`**\\-palindrome**.\n\nA string is `k`**\\-palindrome** if it can be transformed into a palindrome by removing at most `k` characters from it.\n\n"}
{"question": "Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n*   Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n*   Each vowel `'a'` may only be followed by an `'e'`.\n*   Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n*   Each vowel `'i'` **may not** be followed by another `'i'`.\n*   Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n*   Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n"}
{"question": "A die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\nGiven an array of integers `rollMax` and an integer `n`, return _the number of distinct sequences that can be obtained with exact_ `n` _rolls_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nTwo sequences are considered different if at least one element differs from each other.\n\n"}
{"question": "Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove **exactly one** element from this prefix so that every number that has appeared in it will have the same number of occurrences.\n\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).\n\n"}
{"question": "You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`.\n\nYou want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k + 1` pieces using `k` cuts, each piece consists of some **consecutive** chunks.\n\nBeing generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends.\n\nFind the **maximum total sweetness** of the piece you can get by cutting the chocolate bar optimally.\n\n"}
{"question": "We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.\n\nYou're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\nIf you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.\n\n"}
{"question": "Given a rectangle of size `n` x `m`, return _the minimum number of integer-sided squares that tile the rectangle_.\n\n"}
{"question": "You are given an integer array `arr`.\n\nIn one move, you can select a **palindromic** subarray `arr[i], arr[i + 1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.\n\nReturn _the minimum number of moves needed to remove all numbers from the array_.\n\n"}
{"question": "Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be **good** if you can obtain a sum of `1` from the array by any possible subset and multiplicand.\n\nReturn `True` if the array is **good** otherwise return `False`.\n\n"}
{"question": "Given a list of `words`, list of single `letters` (might be repeating) and `score` of every character.\n\nReturn the maximum score of **any** valid set of words formed by using the given letters (`words[i]` cannot be used two or more times).\n\nIt is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.\n\n"}
{"question": "You are given an **even** number of people `numPeople` that stand around a circle and each person shakes hands with someone else so that there are `numPeople / 2` handshakes total.\n\nReturn _the number of ways these handshakes could occur such that none of the handshakes cross_.\n\nSince the answer could be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\n\nThe game is represented by an `m x n` grid of characters `grid` where each element is a wall, floor, or box.\n\nYour task is to move the box `'B'` to the target position `'T'` under the following rules:\n\n*   The character `'S'` represents the player. The player can move up, down, left, right in `grid` if it is a floor (empty cell).\n*   The character `'.'` represents the floor which means a free cell to walk.\n*   The character `'#'` represents the wall which means an obstacle (impossible to walk there).\n*   There is only one box `'B'` and one target cell `'T'` in the `grid`.\n*   The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a **push**.\n*   The player cannot walk through the box.\n\nReturn _the minimum number of **pushes** to move the box to the target_. If there is no way to reach the target, return `-1`.\n\n"}
{"question": "You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "_(This problem is an **interactive problem**.)_\n\nEach ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.\n\nYou have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary.\n\nGiven two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are **at most 10 ships** in that rectangle.\n\nSubmissions making **more than 400 calls** to `hasShips` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\n"}
{"question": "You are given a string `s` containing lowercase letters and an integer `k`. You need to :\n\n*   First, change some characters of `s` to other lowercase English letters.\n*   Then divide `s` into `k` non-empty disjoint substrings such that each substring is a palindrome.\n\nReturn _the minimal number of characters that you need to change to divide the string_.\n\n"}
{"question": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing `1` to `0` and `0` to `1`). A pair of cells are called neighbors if they share one edge.\n\nReturn the _minimum number of steps_ required to convert `mat` to a zero matrix or `-1` if you cannot.\n\nA **binary matrix** is a matrix with all cells equal to `0` or `1` only.\n\nA **zero matrix** is a matrix with all cells equal to `0`.\n\n"}
{"question": "Given an `n x n` integer matrix `grid`, return _the minimum sum of a **falling path with non-zero shifts**_.\n\nA **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid` where each cell is either `0` (empty) or `1` (obstacle). You can move up, down, left, or right from and to an empty cell in **one step**.\n\nReturn _the minimum number of **steps** to walk from the upper left corner_ `(0, 0)` _to the lower right corner_ `(m - 1, n - 1)` _given that you can eliminate **at most**_ `k` _obstacles_. If it is not possible to find such walk return `-1`.\n\n"}
{"question": "You have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where:\n\n*   `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed,\n*   `candies[i]` is the number of candies in the `ith` box,\n*   `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box.\n*   `containedBoxes[i]` is a list of the boxes you found inside the `ith` box.\n\nYou are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\nReturn _the maximum number of candies you can get following the rules above_.\n\n"}
{"question": "You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`.\n\nYou need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**.\n\nIn case there is no path, return `[0, 0]`.\n\n"}
{"question": "Given an equation, represented by `words` on the left side and the `result` on the right side.\n\nYou need to check if the equation is solvable under the following rules:\n\n*   Each character is decoded as one digit (0 - 9).\n*   No two characters can map to the same digit.\n*   Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n*   Sum of numbers on the left side (`words`) will equal to the number on the right side (`result`).\n\nReturn `true` _if the equation is solvable, otherwise return_ `false`.\n\n"}
{"question": "Given a string `s`. In one step you can insert any character at any index of the string.\n\nReturn _the minimum number of steps_ to make `s` palindrome.\n\nA **Palindrome String** is one that reads the same backward as well as forward.\n\n"}
{"question": "You have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate.\n\n*   For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`.\n\nGiven the string `word`, return _the minimum total **distance** to type such string using only two fingers_.\n\nThe **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`.\n\n**Note** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\n"}
{"question": "There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`).\n\nThere are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.\n\nGiven an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.\n\nReturn _the minimum number of taps_ that should be open to water the whole garden, If the garden cannot be watered return **\\-1**.\n\n"}
{"question": "You are given an integer array `nums`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.\n\nFind maximum possible value of the final array.\n\n"}
{"question": "You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `ith` job, you have to finish all the jobs `j` where `0 <= j < i`).\n\nYou have to finish **at least** one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done on that day.\n\nYou are given an integer array `jobDifficulty` and an integer `d`. The difficulty of the `ith` job is `jobDifficulty[i]`.\n\nReturn _the minimum difficulty of a job schedule_. If you cannot find a schedule for the jobs return `-1`.\n\n"}
{"question": "Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index:\n\n*   `i + x` where: `i + x < arr.length` and `0 < x <= d`.\n*   `i - x` where: `i - x >= 0` and `0 < x <= d`.\n\nIn addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`).\n\nYou can choose any index of the array and start jumping. Return _the maximum number of indices_ you can visit.\n\nNotice that you can not jump outside of the array at any time.\n\n"}
{"question": "Given an array of integers `arr`, you are initially positioned at the first index of the array.\n\nIn one step you can jump from index `i` to index:\n\n*   `i + 1` where: `i + 1 < arr.length`.\n*   `i - 1` where: `i - 1 >= 0`.\n*   `j` where: `arr[i] == arr[j]` and `i != j`.\n\nReturn _the minimum number of steps_ to reach the **last index** of the array.\n\nNotice that you can not jump outside of the array at any time.\n\n"}
{"question": "Given a `m * n` matrix `seats` that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.\n\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the **maximum** number of students that can take the exam together without any cheating being possible..\n\nStudents must be placed in seats in good condition.\n\n"}
{"question": "You are given an array `target` of n integers. From a starting array `arr` consisting of `n` 1's, you may perform the following procedure :\n\n*   let `x` be the sum of all elements currently in your array.\n*   choose index `i`, such that `0 <= i < n` and set the value of `arr` at index `i` to `x`.\n*   You may repeat this procedure as many times as needed.\n\nReturn `true` _if it is possible to construct the_ `target` _array from_ `arr`_, otherwise, return_ `false`.\n\n"}
{"question": "Given `n` orders, each order consist in pickup and delivery services.\n\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n"}
{"question": "Given an array of digits `digits`, return _the largest multiple of **three** that can be formed by concatenating some of the given digits in **any order**_. If there is no answer return an empty string.\n\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n\n"}
{"question": "Given an `m x n` grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:\n\n*   `1` which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n*   `2` which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n*   `3` which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n*   `4` which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\n\nNotice that there could be some signs on the cells of the grid that point outside the grid.\n\nYou will initially start at the upper left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path does not have to be the shortest.\n\nYou can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell **one time only**.\n\nReturn _the minimum cost to make the grid have at least one valid path_.\n\n"}
{"question": "Given a **binary tree** `root`, return _the maximum sum of all keys of **any** sub-tree which is also a Binary Search Tree (BST)_.\n\nAssume a BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n"}
{"question": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from **vertex 1**. In one second, the frog jumps from its current vertex to another **unvisited** vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.\n\n_Return the probability that after `t` seconds the frog is on the vertex `target`._ Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "You are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\n\nReturn _the maximum performance of this team_. Since the answer can be a huge number, return it **modulo** `109 + 7`.\n\n"}
{"question": "There is a pizza with `3n` slices of varying size, you and your friends will take slices of pizza as follows:\n\n*   You will pick **any** pizza slice.\n*   Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.\n*   Your friend Bob will pick the next slice in the clockwise direction of your pick.\n*   Repeat until there are no more slices of pizzas.\n\nGiven an integer array `slices` that represent the sizes of the pizza slices in a clockwise direction, return _the maximum possible sum of slice sizes that you can pick_.\n\n"}
{"question": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return _the number of **good** strings_.\n\nA **good** string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this **modulo** `109 + 7`.\n\n"}
{"question": "A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.\n\n**Like-time coefficient** of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. `time[i] * satisfaction[i]`.\n\nReturn _the maximum sum of **like-time coefficient** that the chef can obtain after dishes preparation_.\n\nDishes can be prepared in **any** order and the chef can discard some dishes to get this maximum value.\n\n"}
{"question": "Alice and Bob continue their games with piles of stones. There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take `1`, `2`, or `3` stones from the **first** remaining stones in the row.\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is `0` initially.\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\nAssume Alice and Bob **play optimally**.\n\nReturn `\"Alice \"` _if Alice will win,_ `\"Bob \"` _if Bob will win, or_ `\"Tie \"` _if they will end the game with the same score_.\n\n"}
{"question": "You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: **Red**, **Yellow,** or **Green** while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\nGiven `n` the number of rows of the grid, return _the number of ways_ you can paint this `grid`. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n"}
{"question": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits `s` and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.\n\nGiven the string `s` and the integer `k`, return _the number of the possible arrays that can be printed as_ `s` _using the mentioned program_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:\n\nYou should build the array arr which has the following properties:\n\n*   `arr` has exactly `n` integers.\n*   `1 <= arr[i] <= m` where `(0 <= i < n)`.\n*   After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn _the number of ways_ to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return the maximum sum of a **non-empty** subsequence of that array such that for every two **consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.\n\nA _subsequence_ of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n\n"}
{"question": "There are `n` people and `40` types of hats labeled from `1` to `40`.\n\nGiven a 2D integer array `hats`, where `hats[i]` is a list of all hats preferred by the `ith` person.\n\nReturn _the number of ways that the `n` people wear different hats to each other_.\n\nSince the answer may be too large, return it modulo `109 + 7`.\n\n"}
{"question": "You are given an `m x n` matrix `mat` that has its rows sorted in non-decreasing order and an integer `k`.\n\nYou are allowed to choose **exactly one element** from each row to form an array.\n\nReturn _the_ `kth` _smallest array sum among all possible arrays_.\n\n"}
{"question": "Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts.\n\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\n\n_Return the number of ways of cutting the pizza such that each piece contains **at least** one apple._ Since the answer can be a huge number, return this modulo 10^9 + 7.\n\n"}
{"question": "Given an array of integers `cost` and an integer `target`, return _the **maximum** integer you can paint under the following rules_:\n\n*   The cost of painting a digit `(i + 1)` is given by `cost[i]` (**0-indexed**).\n*   The total cost used must be equal to `target`.\n*   The integer does not have `0` digits.\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return `\"0 \"`.\n\n"}
{"question": "Alice is throwing `n` darts on a very large wall. You are given an array `darts` where `darts[i] = [xi, yi]` is the position of the `ith` dart that Alice threw on the wall.\n\nBob knows the positions of the `n` darts on the wall. He wants to place a dartboard of radius `r` on the wall so that the maximum number of darts that Alice throws lies on the dartboard.\n\nGiven the integer `r`, return _the maximum number of darts that can lie on the dartboard_.\n\n"}
{"question": "Given two arrays `nums1` and `nums2`.\n\nReturn the maximum dot product between **non-empty** subsequences of nums1 and nums2 with the same length.\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).\n\n"}
{"question": "You are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\nYou have two robots that can collect cherries for you:\n\n*   **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n*   **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\nReturn _the maximum number of cherries collection using both robots by following the rules below_:\n\n*   From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n*   When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n*   When both robots stay in the same cell, only one takes the cherries.\n*   Both robots cannot move outside of the grid at any moment.\n*   Both robots should reach the bottom row in `grid`.\n\n"}
{"question": "Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`.\n\nAll the balls will be **shuffled uniformly at random**, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).\n\nPlease note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a)` (Please read the explanation of the first example carefully).\n\nReturn _the probability_ that the two boxes have the same number of distinct balls. Answers within `10-5` of the actual value will be accepted as correct.\n\n"}
{"question": "There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.\n\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\n\n*   For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.\n\nGiven an array `houses`, an `m x n` matrix `cost` and an integer `target` where:\n\n*   `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.\n*   `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.\n\nReturn _the minimum cost of painting all the remaining houses in such a way that there are exactly_ `target` _neighborhoods_. If it is not possible, return `-1`.\n\n"}
{"question": "Given the array `houses` where `houses[i]` is the location of the `ith` house along a street and an integer `k`, allocate `k` mailboxes in the street.\n\nReturn _the **minimum** total distance between each house and its nearest mailbox_.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n"}
{"question": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of `ith` node. The root of the tree is node `0`. Find the `kth` ancestor of a given node.\n\nThe `kth` ancestor of a tree node is the `kth` node in the path from that node to the root node.\n\nImplement the `TreeAncestor` class:\n\n*   `TreeAncestor(int n, int[] parent)` Initializes the object with the number of nodes in the tree and the parent array.\n*   `int getKthAncestor(int node, int k)` return the `kth` ancestor of the given node `node`. If there is no such ancestor, return `-1`.\n\n"}
{"question": "Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.\n\nFind _all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST)_. An MST edge whose deletion from the graph would cause the MST weight to increase is called a _critical edge_. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\n\nNote that you can return the indices of the edges in any order.\n\n"}
{"question": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. Also, you are given the integer `k`.\n\nIn one semester, you can take **at most** `k` courses as long as you have taken all the prerequisites in the **previous** semesters for the courses you are taking.\n\nReturn _the **minimum** number of semesters needed to take all courses_. The testcases will be generated such that it is possible to take every course.\n\n"}
{"question": "You are given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.\n\nReturn _the maximum value of the equation_ `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`.\n\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.\n\n"}
{"question": "You are given a string `num` representing **the digits** of a very large integer and an integer `k`. You are allowed to swap any two adjacent digits of the integer **at most** `k` times.\n\nReturn _the minimum integer you can obtain also as a string_.\n\n"}
{"question": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there are `n` stones in a pile. On each player's turn, that player makes a _move_ consisting of removing **any** non-zero **square number** of stones in the pile.\n\nAlso, if a player cannot make a move, he/she loses the game.\n\nGiven a positive integer `n`, return `true` if and only if Alice wins the game otherwise return `false`, assuming both players play optimally.\n\n"}
{"question": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that **the sum of the euclidean distances to all customers is minimum**.\n\nGiven an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return _the minimum sum of the euclidean distances_ to all customers.\n\nIn other words, you need to choose the position of the service center `[xcentre, ycentre]` such that the following formula is minimized:\n\nAnswers within `10-5` of the actual value will be accepted.\n\n"}
{"question": "Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.\n\nYou should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, do not change anything. Node `p` **must be** the last child in the children list of node `q`.\n\nReturn _the root of the tree_ after adjusting it.\n\nThere are 3 cases for nodes `p` and `q`:\n\n1.  Node `q` is in the sub-tree of node `p`.\n2.  Node `p` is in the sub-tree of node `q`.\n3.  Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.\n\nIn cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. **Please read the examples carefully before solving this problem.**\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\nFor example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\n"}
{"question": "Given a string `s` of lowercase letters, you need to find the maximum number of **non-empty** substrings of `s` that meet the following conditions:\n\n1.  The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[x..y]`, either `j < x` or `i > y` is true.\n2.  A substring that contains a certain character `c` must also contain all occurrences of `c`.\n\nFind _the maximum number of substrings that meet the above conditions_. If there are multiple solutions with the same number of substrings, _return the one with minimum total length._ It can be shown that there exists a unique solution of minimum total length.\n\nNotice that you can return the substrings in **any** order.\n\n"}
{"question": "Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\nReturn _the minimum possible value_ of `|func(arr, l, r) - target|`.\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.\n\n"}
{"question": "You are given an integer array `target`. You have an integer array `initial` of the same size as `target` with all elements initially zeros.\n\nIn one operation you can choose **any** subarray from `initial` and increment each value by one.\n\nReturn _the minimum number of operations to form a_ `target` _array from_ `initial`.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n"}
{"question": "[Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"aabccc \"` we replace `\"aa \"` by `\"a2 \"` and replace `\"ccc \"` by `\"c3 \"`. Thus the compressed string becomes `\"a2bc3 \"`.\n\nNotice that in this problem, we are not adding `'1'` after single characters.\n\nGiven a string `s` and an integer `k`. You need to delete **at most** `k` characters from `s` such that the run-length encoded version of `s` has minimum length.\n\nFind the _minimum length of the run-length encoded version of_ `s` _after deleting at most_ `k` _characters_.\n\n"}
{"question": "You are given two **sorted** arrays of distinct integers `nums1` and `nums2.`\n\nA **valid path** is defined as follows:\n\n*   Choose array `nums1` or `nums2` to traverse (from index-0).\n*   Traverse the current array from left to right.\n*   If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\nThe **score** is defined as the sum of uniques values in a valid path.\n\nReturn _the maximum score you can obtain of all possible **valid paths**_. Since the answer may be too large, return it modulo `109 + 7`.\n\n"}
{"question": "You are given a string `s`. An **awesome** substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it a palindrome.\n\nReturn _the length of the maximum length **awesome substring** of_ `s`.\n\n"}
{"question": "Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length **6** is labelled as follows:\n\nGiven an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.\n\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\n\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\n\nReturn _the minimum total cost_ of the cuts.\n\n"}
{"question": "We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly three upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e., the cities and the roads are forming an undirected connected graph).\n\nYou will be given a string array `targetPath`. You should find a path in the graph of the **same length** and with the **minimum edit distance** to `targetPath`.\n\nYou need to return _the order of the nodes in the path with the minimum edit distance_. The path should be of the same length of `targetPath` and should be valid (i.e., there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them.\n\nThe **edit distance** is defined as follows:\n\n"}
{"question": "There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:\n\n*   Eat one orange.\n*   If the number of remaining oranges `n` is divisible by `2` then you can eat `n / 2` oranges.\n*   If the number of remaining oranges `n` is divisible by `3` then you can eat `2 * (n / 3)` oranges.\n\nYou can only choose one of the actions per day.\n\nGiven the integer `n`, return _the minimum number of days to eat_ `n` _oranges_.\n\n"}
{"question": "There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\nIn each round of the game, Alice divides the row into **two non-empty rows** (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\n\nThe game ends when there is only **one stone remaining**. Alice's is initially **zero**.\n\nReturn _the maximum score that Alice can obtain_.\n\n"}
{"question": "You are given an `m x n` binary grid `grid` where `1` represents land and `0` represents water. An **island** is a maximal **4-directionally** (horizontal or vertical) connected group of `1`'s.\n\nThe grid is said to be **connected** if we have **exactly one island**, otherwise is said **disconnected**.\n\nIn one day, we are allowed to change **any** single land cell `(1)` into a water cell `(0)`.\n\nReturn _the minimum number of days to disconnect the grid_.\n\n"}
{"question": "Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.\n\n*   For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.\n\nReturn _the number of ways to reorder_ `nums` _such that the BST formed is identical to the original BST formed from_ `nums`.\n\nSince the answer may be very large, **return it modulo** `109 + 7`.\n\n"}
{"question": "You are given an array of **distinct** positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.\n\nAt each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.\n\nNotice that `fuel` **cannot** become negative at any point in time, and that you are **allowed** to visit any city more than once (including `start` and `finish`).\n\nReturn _the count of all possible routes from_ `start` _to_ `finish`. Since the answer may be too large, return it modulo `109 + 7`.\n\n"}
{"question": "Alice and Bob have an undirected graph of `n` nodes and three types of edges:\n\n*   Type 1: Can be traversed by Alice only.\n*   Type 2: Can be traversed by Bob only.\n*   Type 3: Can be traversed by both Alice and Bob.\n\nGiven an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\n\nReturn _the maximum number of edges you can remove, or return_ `-1` _if Alice and Bob cannot fully traverse the graph._\n\n"}
{"question": "Given two strings `s` and `t`, transform string `s` into string `t` using the following operation any number of times:\n\n*   Choose a **non-empty** substring in `s` and sort it in place so the characters are in **ascending order**.\n    *   For example, applying the operation on the underlined substring in `\"14234 \"` results in `\"12344 \"`.\n\nReturn `true` if _it is possible to transform `s` into `t`_. Otherwise, return `false`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "There is a strange printer with the following two special requirements:\n\n*   On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n*   Once the printer has used a color for the above operation, **the same color cannot be used again**.\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.\n\nReturn `true` _if it is possible to print the matrix_ `targetGrid`_,_ _otherwise, return_ `false`.\n\n"}
{"question": "You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.\n\nThe `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if **each point in both groups is connected to one or more points in the opposite group**. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\n\nReturn _the minimum cost it takes to connect the two groups_.\n\n"}
{"question": "A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nFor each internal node with operator `o`, the [**infix expression**](https://en.wikipedia.org/wiki/Infix_notation) it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents.\n\nYou are given a string `s`, an **infix expression** containing operands, the operators described above, and parentheses `'('` and `')'`.\n\nReturn _any valid **binary expression tree**, whose **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** reproduces_ `s` _after omitting the parenthesis from it._\n\n**Please note that order of operations applies in** `s`**.** That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.\n\nOperands must also appear in the **same order** in both `s` and the in-order traversal of the tree.\n\n"}
{"question": "We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\n\nYou are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.\n\n**All buildings are full**, so a list of requests is achievable only if for each building, the **net change in employee transfers is zero**. This means the number of employees **leaving** is **equal** to the number of employees **moving in**. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.\n\nReturn _the maximum number of achievable requests_.\n\n"}
{"question": "You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but **cannot handle more than one request at a time**. The requests are assigned to servers according to a specific algorithm:\n\n*   The `ith` (0-indexed) request arrives.\n*   If all servers are busy, the request is dropped (not handled at all).\n*   If the `(i % k)th` server is available, assign the request to that server.\n*   Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.\n\nYou are given a **strictly increasing** array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the **busiest server(s)**. A server is considered **busiest** if it handled the most number of requests successfully among all the servers.\n\nReturn _a list containing the IDs (0-indexed) of the **busiest server(s)**_. You may return the IDs in any order.\n\n"}
{"question": "You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote **integral coordinates** on the X-Y plane.\n\nInitially, you are facing directly east from your position. You **cannot move** from your position, but you can **rotate**. In other words, `posx` and `posy` cannot be changed. Your field of view in **degrees** is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the **inclusive** range of angles `[d - angle/2, d + angle/2]`.\n\nYour browser does not support the video tag or this video format.\n\nYou can **see** some set of points if, for each point, the **angle** formed by the point, your position, and the immediate east direction from your position is **in your field of view**.\n\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\n\nReturn _the maximum number of points you can see_.\n\n"}
{"question": "Given an integer `n`, you must transform it into `0` using the following operations any number of times:\n\n*   Change the rightmost (`0th`) bit in the binary representation of `n`.\n*   Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.\n\nReturn _the minimum number of operations to transform_ `n` _into_ `0`_._\n\n"}
{"question": "There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a **tree**.\n\nA **subtree** is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the **maximum distance** between any two cities in the subtree is equal to `d`.\n\nReturn _an array of size_ `n-1` _where the_ `dth` _element **(1-indexed)** is the number of subtrees in which the **maximum distance** between any two cities is equal to_ `d`.\n\n**Notice** that the **distance** between the two cities is the number of edges in the path between them.\n\n"}
{"question": "Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.\n\nImplement the `Fancy` class:\n\n*   `Fancy()` Initializes the object with an empty sequence.\n*   `void append(val)` Appends an integer `val` to the end of the sequence.\n*   `void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.\n*   `void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.\n*   `int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence **modulo** `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.\n\n"}
{"question": "We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor **strictly greater** than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:\n\n*   `x % z == 0`,\n*   `y % z == 0`, and\n*   `z > threshold`.\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them).\n\nReturn _an array_ `answer`_, where_ `answer.length == queries.length` _and_ `answer[i]` _is_ `true` _if for the_ `ith` _query, there is a path between_ `ai` _and_ `bi`_, or_ `answer[i]` _is_ `false` _if there is no path._\n\n"}
{"question": "Given an `m x n` `matrix`, return _a new matrix_ `answer` _where_ `answer[row][col]` _is the_ _**rank** of_ `matrix[row][col]`.\n\nThe **rank** is an **integer** that represents how large an element is compared to other elements. It is calculated using the following rules:\n\n*   The rank is an integer starting from `1`.\n*   If two elements `p` and `q` are in the **same row or column**, then:\n    *   If `p < q` then `rank(p) < rank(q)`\n    *   If `p == q` then `rank(p) == rank(q)`\n    *   If `p > q` then `rank(p) > rank(q)`\n*   The **rank** should be as **small** as possible.\n\nThe test cases are generated so that `answer` is unique under the given rules.\n\n"}
{"question": "You are given a list of strings of the **same length** `words` and a string `target`.\n\nYour task is to form `target` using the given `words` under the following rules:\n\n*   `target` should be formed from left to right.\n*   To form the `ith` character (**0-indexed**) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.\n*   Once you use the `kth` character of the `jth` string of `words`, you **can no longer** use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.\n*   Repeat the process until you form the string `target`.\n\n**Notice** that you can use **multiple characters** from the **same string** in `words` provided the conditions above are met.\n\nReturn _the number of ways to form `target` from `words`_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel **right** and **down**. You are going to help Bob by providing **instructions** for him to reach `destination`.\n\nThe **instructions** are represented as a string, where each character is either:\n\n*   `'H'`, meaning move horizontally (go **right**), or\n*   `'V'`, meaning move vertically (go **down**).\n\nMultiple **instructions** will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV \"` and `\"HVHVH \"` are valid **instructions**.\n\nHowever, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` **lexicographically smallest instructions** that will lead him to `destination`. `k` is **1-indexed**.\n\nGiven an integer array `destination` and an integer `k`, return _the_ `kth` _**lexicographically smallest instructions** that will take Bob to_ `destination`.\n\n"}
{"question": "Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from **left to right** in `instructions`, insert it into `nums`. The **cost** of each insertion is the **minimum** of the following:\n\n*   The number of elements currently in `nums` that are **strictly less than** `instructions[i]`.\n*   The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`.\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\nReturn _the **total cost** to insert all elements from_ `instructions` _into_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`\n\n"}
{"question": "You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:\n\n*   The `ith` customer gets **exactly** `quantity[i]` integers,\n*   The integers the `ith` customer gets are **all equal**, and\n*   Every customer is satisfied.\n\nReturn `true` _if it is possible to distribute_ `nums` _according to the above conditions_.\n\n"}
{"question": "You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.\n\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you **do not** have to have all the people living in the grid.\n\nThe **happiness** of each person is calculated as follows:\n\n*   Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert).\n*   Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert).\n\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\n\nThe **grid happiness** is the **sum** of each person's happiness. Return _the **maximum possible grid happiness**._\n\n"}
{"question": "You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n\n*   `actuali` is the actual amount of energy you **spend to finish** the `ith` task.\n*   `minimumi` is the minimum amount of energy you **require to begin** the `ith` task.\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.\n\nYou can finish the tasks in **any order** you like.\n\nReturn _the **minimum** initial amount of energy you will need_ _to finish all the tasks_.\n\n"}
{"question": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `nums`​​​, return _the **minimum** number of elements to remove to make_ `nums_​​​_` _a **mountain array**._\n\n"}
{"question": "You are given an array `nums` of `n` positive integers.\n\nYou can perform two types of operations on any element of the array any number of times:\n\n*   If the element is **even**, **divide** it by `2`.\n    *   For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`\n*   If the element is **odd**, **multiply** it by `2`.\n    *   For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`\n\nThe **deviation** of the array is the **maximum difference** between any two elements in the array.\n\nReturn _the **minimum deviation** the array can have after performing some number of operations._\n\n"}
{"question": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **limit** on the **number of boxes** and the **total weight** that it can carry.\n\nYou are given an array `boxes`, where `boxes[i] = [ports​​i​, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n*   `ports​​i` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n*   `portsCount` is the number of ports.\n*   `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered **in the order they are given**. The ship will follow these steps:\n\n*   The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n*   For each loaded box **in order**, the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered.\n*   The ship then makes a return **trip** to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn _the **minimum** number of **trips** the ship needs to make to deliver all boxes to their respective ports._\n\n"}
{"question": "There are `n` **unique** candies (labeled `1` through `n`) and `k` bags. You are asked to distribute **all** the candies into the bags such that every bag has **at least** one candy.\n\nThere can be multiple ways to distribute the candies. Two ways are considered **different** if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.\n\nFor example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways.\n\nGiven two integers, `n` and `k`, return _the **number** of different ways to distribute the candies_. As the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes.\n\nGiven an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance **strictly less than** `limitj` .\n\nReturn _a **boolean array**_ `answer`_, where_ `answer.length == queries.length` _and the_ `jth` _value of_ `answer` _is_ `true` _if there is a path for_ `queries[j]` _is_ `true`_, and_ `false` _otherwise_.\n\n"}
{"question": "You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two **adjacent** indices and swap their values.\n\nReturn _the **minimum** number of moves required so that_ `nums` _has_ `k` _**consecutive**_ `1`_'s_.\n\n"}
{"question": "You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.\n\nReturn _an integer array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query._\n\n"}
{"question": "You are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates.\n\nIn one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.\n\nReturn _the **minimum** number of operations needed to make_ `target` _a **subsequence** of_ `arr`_._\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` consisting of `n` non-negative integers.\n\nYou are also given an array `queries`, where `queries[i] = [xi, yi]`. The answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`.\n\nReturn _an array_ `answer` _where_ `answer.length == queries.length` _and_ `answer[i]` _is the answer to the_ `ith` _query **modulo**_ `109 + 7`.\n\n"}
{"question": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\n\n*   There are no duplicates.\n*   `xi < yi`\n\nLet `ways` be the number of rooted trees that satisfy the following conditions:\n\n*   The tree consists of nodes whose values appeared in `pairs`.\n*   A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n*   **Note:** the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\n\nReturn:\n\n*   `0` if `ways == 0`\n*   `1` if `ways == 1`\n*   `2` if `ways > 1`\n\nA **rooted tree** is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\n\nAn **ancestor** of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\n\n"}
{"question": "You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.\n\nThere are `k` workers that you can assign jobs to. Each job should be assigned to **exactly** one worker. The **working time** of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the **maximum working time** of any worker is **minimized**.\n\n_Return the **minimum** possible **maximum working time** of any assignment._\n\n"}
{"question": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be **multiple** edges between two nodes, and the graph may not be connected.\n\nImplement the `DistanceLimitedPathsExist` class:\n\n*   `DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph.\n*   `boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance **strictly less than** `limit`, and otherwise `false`.\n\n"}
{"question": "A game is played by a cat and a mouse named Cat and Mouse.\n\nThe environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.\n\n*   Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).\n*   Floors are represented by the character `'.'` and can be walked on.\n*   Walls are represented by the character `'#'` and cannot be walked on.\n*   Food is represented by the character `'F'` and can be walked on.\n*   There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\nMouse and Cat play according to the following rules:\n\n*   Mouse **moves first**, then they take turns to move.\n*   During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.\n*   `catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n*   Staying in the same position is allowed.\n*   Mouse can jump over Cat.\n\nThe game can end in 4 ways:\n\n*   If Cat occupies the same position as Mouse, Cat wins.\n*   If Cat reaches the food first, Cat wins.\n*   If Mouse reaches the food first, Mouse wins.\n*   If Mouse cannot get to the food within 1000 turns, Cat wins.\n\nGiven a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` _if Mouse can win the game if both Cat and Mouse play optimally, otherwise return_ `false`.\n\n"}
{"question": "You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways **modulo** `109 + 7`.\n\nReturn _an integer array_ `answer` _where_ `answer.length == queries.length`_, and_ `answer[i]` _is the answer to the_ `ith` _query._\n\n"}
{"question": "You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\n\n*   You can place the boxes anywhere on the floor.\n*   If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` **must** either be adjacent to another box or to a wall.\n\nGiven an integer `n`, return _the **minimum** possible number of boxes touching the floor._\n\n"}
{"question": "Given a string `s`, return `true` _if it is possible to split the string_ `s` _into three **non-empty** palindromic substrings. Otherwise, return_ `false`.​​​​​\n\nA string is said to be palindrome if it the same string when reversed.\n\n"}
{"question": "You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.\n\nYou can only attend one event at a time. If you choose to attend an event, you must attend the **entire** event. Note that the end day is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends on the same day.\n\nReturn _the **maximum sum** of values that you can receive by attending events._\n\n"}
{"question": "You are given an integer array `nums` and an integer `goal`.\n\nYou want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to **minimize the absolute difference** `abs(sum - goal)`.\n\nReturn _the **minimum** possible value of_ `abs(sum - goal)`.\n\nNote that a subsequence of an array is an array formed by removing some elements **(possibly all or none)** of the original array.\n\n"}
{"question": "You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.\n\nA **connected trio** is a set of **three** nodes where there is an edge between **every** pair of them.\n\nThe **degree of a connected trio** is the number of edges where one endpoint is in the trio, and the other is not.\n\nReturn _the **minimum** degree of a connected trio in the graph, or_ `-1` _if the graph has no connected trios._\n\n"}
{"question": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`.\n\nTo represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\nTwo values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself.\n\nReturn _an array_ `ans` _of size_ `n`, _where_ `ans[i]` _is the closest ancestor to node_ `i` _such that_ `nums[i]` _and_ `nums[ans[i]]` are **coprime**, or `-1` _if there is no such ancestor_.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`.\n\nYou begin with a score of `0`. You want to perform **exactly** `m` operations. On the `ith` operation (**0-indexed**) you will:\n\n*   Choose one integer `x` from **either the start or the end** of the array `nums`.\n*   Add `multipliers[i] * x` to your score.\n    *   Note that `multipliers[0]` corresponds to the first operation, `multipliers[1]` to the second operation, and so on.\n*   Remove `x` from `nums`.\n\nReturn _the **maximum** score after performing_ `m` _operations._\n\n"}
{"question": "You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:\n\n*   Choose some **non-empty** subsequence `subsequence1` from `word1`.\n*   Choose some **non-empty** subsequence `subsequence2` from `word2`.\n*   Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\nReturn _the **length** of the longest **palindrome** that can be constructed in the described manner._ If no palindromes can be constructed, return `0`.\n\nA **subsequence** of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.\n\nA **palindrome** is a string that reads the same forward as well as backward.\n\n"}
{"question": "There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:\n\n*   `positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.\n*   `speedi` is the initial speed of the `ith` car in meters per second.\n\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the **slowest** car in the fleet.\n\nReturn an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.\n\n"}
{"question": "You are given an undirected graph defined by an integer `n`, the number of nodes, and a 2D integer array `edges`, the edges in the graph, where `edges[i] = [ui, vi]` indicates that there is an **undirected** edge between `ui` and `vi`. You are also given an integer array `queries`.\n\nLet `incident(a, b)` be defined as the **number of edges** that are connected to **either** node `a` or `b`.\n\nThe answer to the `jth` query is the **number of pairs** of nodes `(a, b)` that satisfy **both** of the following conditions:\n\n*   `a < b`\n*   `incident(a, b) > queries[j]`\n\nReturn _an array_ `answers` _such that_ `answers.length == queries.length` _and_ `answers[j]` _is the answer of the_ `jth` _query_.\n\nNote that there can be **multiple edges** between the same two nodes.\n\n"}
{"question": "You are given an array `nums`​​​ and an integer `k`​​​​​. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.\n\nReturn _the minimum number of elements to change in the array_ such that the `XOR` of all segments of size `k`​​​​​​ is equal to zero.\n\n"}
{"question": "There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower.\n\nA garden is **valid** if it meets these conditions:\n\n*   The garden has at least two flowers.\n*   The first and the last flower of the garden have the same beauty value.\n\nAs the appointed gardener, you have the ability to **remove** any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden **valid**. The beauty of the garden is the sum of the beauty of all the remaining flowers.\n\nReturn the maximum possible beauty of some **valid** garden after you have removed any (possibly none) flowers.\n\n"}
{"question": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k <= j`.\n\nReturn _the maximum possible **score** of a **good** subarray._\n\n"}
{"question": "You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.\n\nIn the `ith` operation **(1-indexed)**, you will:\n\n*   Choose two elements, `x` and `y`.\n*   Receive a score of `i * gcd(x, y)`.\n*   Remove `x` and `y` from `nums`.\n\nReturn _the maximum score you can receive after performing_ `n` _operations._\n\nThe function `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\n"}
{"question": "Given a **(0-indexed)** integer array `nums` and two integers `low` and `high`, return _the number of **nice pairs**_.\n\nA **nice pair** is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.\n\n"}
{"question": "You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:\n\n*   The number of prime factors of `n` (not necessarily distinct) is **at most** `primeFactors`.\n*   The number of nice divisors of `n` is maximized. Note that a divisor of `n` is **nice** if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.\n\nReturn _the number of nice divisors of_ `n`. Since that number can be too large, return it **modulo** `109 + 7`.\n\nNote that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.\n\n"}
{"question": "There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve **all** of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.\n\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\n\nYou can freely rearrange the ordering of the groups. Return _the **maximum** possible number of happy groups after rearranging the groups._\n\n"}
{"question": "You are given an array `nums` that consists of positive integers.\n\nThe **GCD** of a sequence of numbers is defined as the greatest integer that divides **all** the numbers in the sequence evenly.\n\n*   For example, the GCD of the sequence `[4,6,16]` is `2`.\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n*   For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\nReturn _the **number** of **different** GCDs among all **non-empty** subsequences of_ `nums`.\n\n"}
{"question": "You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the **MKAverage** for the stream.\n\nThe **MKAverage** can be calculated using these steps:\n\n1.  If the number of the elements in the stream is less than `m` you should consider the **MKAverage** to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.\n2.  Remove the smallest `k` elements and the largest `k` elements from the container.\n3.  Calculate the average value for the rest of the elements **rounded down to the nearest integer**.\n\nImplement the `MKAverage` class:\n\n*   `MKAverage(int m, int k)` Initializes the **MKAverage** object with an empty stream and the two integers `m` and `k`.\n*   `void addElement(int num)` Inserts a new element `num` into the stream.\n*   `int calculateMKAverage()` Calculates and returns the **MKAverage** for the current stream **rounded down to the nearest integer**.\n\n"}
{"question": "You are given a string `s` (**0-indexed**)​​​​​​. You are asked to perform the following operation on `s`​​​​​​ until you get a sorted string:\n\n1.  Find **the largest index** `i` such that `1 <= i < s.length` and `s[i] < s[i - 1]`.\n2.  Find **the largest index** `j` such that `i <= j < s.length` and `s[k] < s[i - 1]` for all the possible values of `k` in the range `[i, j]` inclusive.\n3.  Swap the two characters at indices `i - 1`​​​​ and `j`​​​​​.\n4.  Reverse the suffix starting at index `i`​​​​​​.\n\nReturn _the number of operations needed to make the string sorted._ Since the answer can be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "The **XOR sum** of a list is the bitwise `XOR` of all its elements. If the list only contains one element, then its **XOR sum** will be equal to this element.\n\n*   For example, the **XOR sum** of `[1,2,3,4]` is equal to `1 XOR 2 XOR 3 XOR 4 = 4`, and the **XOR sum** of `[3]` is equal to `3`.\n\nYou are given two **0-indexed** arrays `arr1` and `arr2` that consist only of non-negative integers.\n\nConsider the list containing the result of `arr1[i] AND arr2[j]` (bitwise `AND`) for every `(i, j)` pair where `0 <= i < arr1.length` and `0 <= j < arr2.length`.\n\nReturn _the **XOR sum** of the aforementioned list_.\n\n"}
{"question": "You want to build `n` new buildings in a city. The new buildings will be built in a line and are labeled from `1` to `n`.\n\nHowever, there are city restrictions on the heights of the new buildings:\n\n*   The height of each building must be a non-negative integer.\n*   The height of the first building **must** be `0`.\n*   The height difference between any two adjacent buildings **cannot exceed** `1`.\n\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array `restrictions` where `restrictions[i] = [idi, maxHeighti]` indicates that building `idi` must have a height **less than or equal to** `maxHeighti`.\n\nIt is guaranteed that each building will appear **at most once** in `restrictions`, and building `1` will **not** be in `restrictions`.\n\nReturn _the **maximum possible height** of the **tallest** building_.\n\n"}
{"question": "You are given a numeric string `num`, representing a very large **palindrome**.\n\nReturn _the **smallest palindrome larger than**_ `num` _that can be created by rearranging its digits. If no such palindrome exists, return an empty string_ `\" \"`.\n\nA **palindrome** is a number that reads the same backward as forward.\n\n"}
{"question": "There is a hotel with `n` rooms. The rooms are represented by a 2D integer array `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room with room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is guaranteed to be **unique**.\n\nYou are also given `k` queries in a 2D array `queries` where `queries[j] = [preferredj, minSizej]`. The answer to the `jth` query is the room number `id` of a room such that:\n\n*   The room has a size of **at least** `minSizej`, and\n*   `abs(id - preferredj)` is **minimized**, where `abs(x)` is the absolute value of `x`.\n\nIf there is a **tie** in the absolute difference, then use the room with the **smallest** such `id`. If there is **no such room**, the answer is `-1`.\n\nReturn _an array_ `answer` _of length_ `k` _where_ `answer[j]` _contains the answer to the_ `jth` _query_.\n\n"}
{"question": "You are given a 2D integer array `intervals`, where `intervals[i] = [lefti, righti]` describes the `ith` interval starting at `lefti` and ending at `righti` **(inclusive)**. The **size** of an interval is defined as the number of integers it contains, or more formally `righti - lefti + 1`.\n\nYou are also given an integer array `queries`. The answer to the `jth` query is the **size of the smallest interval** `i` such that `lefti <= queries[j] <= righti`. If no such interval exists, the answer is `-1`.\n\nReturn _an array containing the answers to the queries_.\n\n"}
{"question": "There is a **directed graph** of `n` colored nodes and `m` edges. The nodes are numbered from `0` to `n - 1`.\n\nYou are given a string `colors` where `colors[i]` is a lowercase English letter representing the **color** of the `ith` node in this graph (**0-indexed**). You are also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that there is a **directed edge** from node `aj` to node `bj`.\n\nA valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`. The **color value** of the path is the number of nodes that are colored the **most frequently** occurring color along that path.\n\nReturn _the **largest color value** of any valid path in the given graph, or_ `-1` _if the graph contains a cycle_.\n\n"}
{"question": "Given an integer array `nums`, return the sum of `floor(nums[i] / nums[j])` for all pairs of indices `0 <= i, j < nums.length` in the array. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nThe `floor()` function returns the integer part of the division.\n\n"}
{"question": "There are `n` uniquely-sized sticks whose lengths are integers from `1` to `n`. You want to arrange the sticks such that **exactly** `k` sticks are **visible** from the left. A stick is **visible** from the left if there are no **longer** sticks to the **left** of it.\n\n*   For example, if the sticks are arranged `[1,3,2,5,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left.\n\nGiven `n` and `k`, return _the **number** of such arrangements_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Alice and Bob take turns playing a game, with **Alice starting first**.\n\nThere are `n` stones arranged in a row. On each player's turn, while the number of stones is **more than one**, they will do the following:\n\n1.  Choose an integer `x > 1`, and **remove** the leftmost `x` stones from the row.\n2.  Add the **sum** of the **removed** stones' values to the player's score.\n3.  Place a **new stone**, whose value is equal to that sum, on the left side of the row.\n\nThe game stops when **only** **one** stone is left in the row.\n\nThe **score difference** between Alice and Bob is `(Alice's score - Bob's score)`. Alice's goal is to **maximize** the score difference, and Bob's goal is the **minimize** the score difference.\n\nGiven an integer array `stones` of length `n` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **score difference** between Alice and Bob if they both play **optimally**._\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2` of length `n`.\n\nThe **XOR sum** of the two integer arrays is `(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])` (**0-indexed**).\n\n*   For example, the **XOR sum** of `[1,2,3]` and `[3,2,1]` is equal to `(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4`.\n\nRearrange the elements of `nums2` such that the resulting **XOR sum** is **minimized**.\n\nReturn _the **XOR sum** after the rearrangement_.\n\n"}
{"question": "You are given an integer `hoursBefore`, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through `n` roads. The road lengths are given as an integer array `dist` of length `n`, where `dist[i]` describes the length of the `ith` road in **kilometers**. In addition, you are given an integer `speed`, which is the speed (in **km/h**) you will travel at.\n\nAfter you travel road `i`, you must rest and wait for the **next integer hour** before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\n\n*   For example, if traveling a road takes `1.4` hours, you must wait until the `2` hour mark before traveling the next road. If traveling a road takes exactly `2` hours, you do not need to wait.\n\nHowever, you are allowed to **skip** some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\n\n*   For example, suppose traveling the first road takes `1.4` hours and traveling the second road takes `0.6` hours. Skipping the rest after the first road will mean you finish traveling the second road right at the `2` hour mark, letting you start traveling the third road immediately.\n\nReturn _the **minimum number of skips required** to arrive at the meeting on time, or_ `-1` _if it is **impossible**_.\n\n"}
{"question": "You have `n` packages that you are trying to place in boxes, **one package in each box**. There are `m` suppliers that each produce boxes of **different sizes** (with infinite supply). A package can be placed in a box if the size of the package is **less than or equal to** the size of the box.\n\nThe package sizes are given as an integer array `packages`, where `packages[i]` is the **size** of the `ith` package. The suppliers are given as a 2D integer array `boxes`, where `boxes[j]` is an array of **box sizes** that the `jth` supplier produces.\n\nYou want to choose a **single supplier** and use boxes from them such that the **total wasted space** is **minimized**. For each package in a box, we define the space **wasted** to be `size of the box - size of the package`. The **total wasted space** is the sum of the space wasted in **all** the boxes.\n\n*   For example, if you have to fit packages with sizes `[2,3,5]` and the supplier offers boxes of sizes `[4,8]`, you can fit the packages of size-`2` and size-`3` into two boxes of size-`4` and the package with size-`5` into a box of size-`8`. This would result in a waste of `(4-2) + (4-3) + (8-5) = 6`.\n\nReturn _the **minimum total wasted space** by choosing the box supplier **optimally**, or_ `-1` _if it is **impossible** to fit all the packages inside boxes._ Since the answer may be **large**, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a **valid** boolean expression as a string `expression` consisting of the characters `'1'`,`'0'`,`'&'` (bitwise **AND** operator),`'|'` (bitwise **OR** operator),`'('`, and `')'`.\n\n*   For example, `\"()1|1 \"` and `\"(1)&() \"` are **not valid** while `\"1 \"`, `\"(((1))|(0)) \"`, and `\"1|(0&(1)) \"` are **valid** expressions.\n\nReturn _the **minimum cost** to change the final value of the expression_.\n\n*   For example, if `expression = \"1|1|(0&0)&1 \"`, its **value** is `1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1`. We want to apply operations so that the **new** expression evaluates to `0`.\n\nThe **cost** of changing the final value of an expression is the **number of operations** performed on the expression. The types of **operations** are described as follows:\n\n*   Turn a `'1'` into a `'0'`.\n*   Turn a `'0'` into a `'1'`.\n*   Turn a `'&'` into a `'|'`.\n*   Turn a `'|'` into a `'&'`.\n\n**Note:** `'&'` does **not** take precedence over `'|'` in the **order of calculation**. Evaluate parentheses **first**, then in **left-to-right** order.\n\n"}
{"question": "There is a tournament where `n` players are participating. The players are standing in a single row and are numbered from `1` to `n` based on their **initial** standing position (player `1` is the first player in the row, player `2` is the second player in the row, etc.).\n\nThe tournament consists of multiple rounds (starting from round number `1`). In each round, the `ith` player from the front of the row competes against the `ith` player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\n\n*   For example, if the row consists of players `1, 2, 4, 6, 7`\n    *   Player `1` competes against player `7`.\n    *   Player `2` competes against player `6`.\n    *   Player `4` automatically advances to the next round.\n\nAfter each round is over, the winners are lined back up in the row based on the **original ordering** assigned to them initially (ascending order).\n\nThe players numbered `firstPlayer` and `secondPlayer` are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may **choose** the outcome of this round.\n\nGiven the integers `n`, `firstPlayer`, and `secondPlayer`, return _an integer array containing two values, the **earliest** possible round number and the **latest** possible round number in which these two players will compete against each other, respectively_.\n\n"}
{"question": "You have a movie renting company consisting of `n` shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\n\nEach movie is given as a 2D integer array `entries` where `entries[i] = [shopi, moviei, pricei]` indicates that there is a copy of movie `moviei` at shop `shopi` with a rental price of `pricei`. Each shop carries **at most one** copy of a movie `moviei`.\n\nThe system should support the following functions:\n\n*   **Search**: Finds the **cheapest 5 shops** that have an **unrented copy** of a given movie. The shops should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopi` should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.\n*   **Rent**: Rents an **unrented copy** of a given movie from a given shop.\n*   **Drop**: Drops off a **previously rented copy** of a given movie at a given shop.\n*   **Report**: Returns the **cheapest 5 rented movies** (possibly of the same movie ID) as a 2D list `res` where `res[j] = [shopj, moviej]` describes that the `jth` cheapest rented movie `moviej` was rented from the shop `shopj`. The movies in `res` should be sorted by **price** in ascending order, and in case of a tie, the one with the **smaller** `shopj` should appear first, and if there is still tie, the one with the **smaller** `moviej` should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.\n\nImplement the `MovieRentingSystem` class:\n\n*   `MovieRentingSystem(int n, int[][] entries)` Initializes the `MovieRentingSystem` object with `n` shops and the movies in `entries`.\n*   `List search(int movie)` Returns a list of shops that have an **unrented copy** of the given `movie` as described above.\n*   `void rent(int shop, int movie)` Rents the given `movie` from the given `shop`.\n*   `void drop(int shop, int movie)` Drops off a previously rented `movie` at the given `shop`.\n*   `List> report()` Returns a list of cheapest **rented** movies as described above.\n\n**Note:** The test cases will be generated such that `rent` will only be called if the shop has an **unrented** copy of the movie, and `drop` will only be called if the shop had **previously rented** out the movie.\n\n"}
{"question": "You are an ant tasked with adding `n` new rooms numbered `0` to `n-1` to your colony. You are given the expansion plan as a **0-indexed** integer array of length `n`, `prevRoom`, where `prevRoom[i]` indicates that you must build room `prevRoom[i]` before building room `i`, and these two rooms must be connected **directly**. Room `0` is already built, so `prevRoom[0] = -1`. The expansion plan is given such that once all the rooms are built, every room will be reachable from room `0`.\n\nYou can only build **one room** at a time, and you can travel freely between rooms you have **already built** only if they are **connected**. You can choose to build **any room** as long as its **previous room** is already built.\n\nReturn _the **number of different orders** you can build all the rooms in_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "There is a country of `n` cities numbered from `0` to `n - 1`. In this country, there is a road connecting **every pair** of cities.\n\nThere are `m` friends numbered from `0` to `m - 1` who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city **more than once**, but the same city will not be listed consecutively.\n\nGiven an integer `n` and a 2D integer array `paths` where `paths[i]` is an integer array representing the path of the `ith` friend, return _the length of the **longest common subpath** that is shared by **every** friend's path, or_ `0` _if there is no common subpath at all_.\n\nA **subpath** of a path is a contiguous sequence of cities within that path.\n\n"}
{"question": "You are given a 2D integer array `trees` where `trees[i] = [xi, yi]` represents the location of the `ith` tree in the garden.\n\nYou are asked to fence the entire garden using the minimum length of rope possible. The garden is well-fenced only if **all the trees are enclosed** and the rope used **forms a perfect circle**. A tree is considered enclosed if it is inside or on the border of the circle.\n\nMore formally, you must form a circle using the rope with a center `(x, y)` and radius `r` where all trees lie inside or on the circle and `r` is **minimum**.\n\nReturn _the center and radius of the circle as a length 3 array_ `[x, y, r]`_._ Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "There is a country of `n` cities numbered from `0` to `n - 1` where **all the cities are connected** by bi-directional roads. The roads are represented as a 2D integer array `edges` where `edges[i] = [xi, yi, timei]` denotes a road between cities `xi` and `yi` that takes `timei` minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\n\nEach time you pass through a city, you must pay a passing fee. This is represented as a **0-indexed** integer array `passingFees` of length `n` where `passingFees[j]` is the amount of dollars you must pay when you pass through city `j`.\n\nIn the beginning, you are at city `0` and want to reach city `n - 1` in `maxTime` **minutes or less**. The **cost** of your journey is the **summation of passing fees** for each city that you passed through at some moment of your journey (**including** the source and destination cities).\n\nGiven `maxTime`, `edges`, and `passingFees`, return _the **minimum cost** to complete your journey, or_ `-1` _if you cannot complete it within_ `maxTime` _minutes_.\n\n"}
{"question": "You are given two integers `m` and `n`. Consider an `m x n` grid where each cell is initially white. You can paint each cell **red**, **green**, or **blue**. All cells **must** be painted.\n\nReturn _the number of ways to color the grid with **no two adjacent cells having the same color**_. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given `n` **BST (binary search tree) root nodes** for `n` separate BSTs stored in an array `trees` (**0-indexed**). Each BST in `trees` has **at most 3 nodes**, and no two roots have the same value. In one operation, you can:\n\n*   Select two **distinct** indices `i` and `j` such that the value stored at one of the **leaves** of `trees[i]` is equal to the **root value** of `trees[j]`.\n*   Replace the leaf node in `trees[i]` with `trees[j]`.\n*   Remove `trees[j]` from `trees`.\n\nReturn _the **root** of the resulting BST if it is possible to form a valid BST after performing_ `n - 1` _operations, or_ `null` _if it is impossible to create a valid BST_.\n\nA BST (binary search tree) is a binary tree where each node satisfies the following property:\n\n*   Every node in the node's left subtree has a value **strictly less** than the node's value.\n*   Every node in the node's right subtree has a value **strictly greater** than the node's value.\n\nA leaf is a node that has no children.\n\n"}
{"question": "There is a rooted tree consisting of `n` nodes numbered `0` to `n - 1`. Each node's number denotes its **unique genetic value** (i.e. the genetic value of node `x` is `x`). The **genetic difference** between two genetic values is defined as the **bitwise-****XOR** of their values. You are given the integer array `parents`, where `parents[i]` is the parent for node `i`. If node `x` is the **root** of the tree, then `parents[x] == -1`.\n\nYou are also given the array `queries` where `queries[i] = [nodei, vali]`. For each query `i`, find the **maximum genetic difference** between `vali` and `pi`, where `pi` is the genetic value of any node that is on the path between `nodei` and the root (including `nodei` and the root). More formally, you want to maximize `vali XOR pi`.\n\nReturn _an array_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "There are `n` people standing in a queue, and they numbered from `0` to `n - 1` in **left to right** order. You are given an array `heights` of **distinct** integers where `heights[i]` represents the height of the `ith` person.\n\nA person can **see** another person to their right in the queue if everybody in between is **shorter** than both of them. More formally, the `ith` person can see the `jth` person if `i < j` and `min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1])`.\n\nReturn _an array_ `answer` _of length_ `n` _where_ `answer[i]` _is the **number of people** the_ `ith` _person can **see** to their right in the queue_.\n\n"}
{"question": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array `paths`, where `paths[i]` is an array representing an absolute path to the `ith` folder in the file system.\n\n*   For example, `[ \"one \", \"two \", \"three \"]` represents the path `\"/one/two/three \"`.\n\nTwo folders (not necessarily on the same level) are **identical** if they contain the **same non-empty** set of identical subfolders and underlying subfolder structure. The folders **do not** need to be at the root level to be identical. If two or more folders are **identical**, then **mark** the folders as well as all their subfolders.\n\n*   For example, folders `\"/a \"` and `\"/b \"` in the file structure below are identical. They (as well as their subfolders) should **all** be marked:\n    *   `/a`\n    *   `/a/x`\n    *   `/a/x/y`\n    *   `/a/z`\n    *   `/b`\n    *   `/b/x`\n    *   `/b/x/y`\n    *   `/b/z`\n*   However, if the file structure also included the path `\"/b/w \"`, then the folders `\"/a \"` and `\"/b \"` would not be identical. Note that `\"/a/x \"` and `\"/b/x \"` would still be considered identical even with the added folder.\n\nOnce all the identical folders and their subfolders have been marked, the file system will **delete** all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\n\nReturn _the 2D array_ `ans` _containing the paths of the **remaining** folders after deleting all the marked folders. The paths may be returned in **any** order_.\n\n"}
{"question": "A sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s.\n\n*   For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special.\n*   In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special.\n\nGiven an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return _the **number of different subsequences** that are special_. Since the answer may be very large, **return it modulo** `109 + 7`.\n\nA **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.\n\n"}
{"question": "There are `n` **unique** virus variants in an infinite 2D grid. You are given a 2D array `points`, where `points[i] = [xi, yi]` represents a virus originating at `(xi, yi)` on day `0`. Note that it is possible for **multiple** virus variants to originate at the **same** point.\n\nEvery day, each cell infected with a virus variant will spread the virus to **all** neighboring points in the **four** cardinal directions (i.e. up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other.\n\nGiven an integer `k`, return _the **minimum integer** number of days for **any** point to contain **at least**_ `k` _of the unique virus variants_.\n\n"}
{"question": "You are given a **0-indexed** string `s` and are tasked with finding two **non-intersecting palindromic** substrings of **odd** length such that the product of their lengths is maximized.\n\nMore formally, you want to choose four integers `i`, `j`, `k`, `l` such that `0 <= i <= j < k <= l < s.length` and both the substrings `s[i...j]` and `s[k...l]` are palindromes and have odd lengths. `s[i...j]` denotes a substring from index `i` to index `j` **inclusive**.\n\nReturn _the **maximum** possible product of the lengths of the two non-intersecting palindromic substrings._\n\nA **palindrome** is a string that is the same forward and backward. A **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "You want to build some obstacle courses. You are given a **0-indexed** integer array `obstacles` of length `n`, where `obstacles[i]` describes the height of the `ith` obstacle.\n\nFor every index `i` between `0` and `n - 1` (**inclusive**), find the length of the **longest obstacle course** in `obstacles` such that:\n\n*   You choose any number of obstacles between `0` and `i` **inclusive**.\n*   You must include the `ith` obstacle in the course.\n*   You must put the chosen obstacles in the **same order** as they appear in `obstacles`.\n*   Every obstacle (except the first) is **taller** than or the **same height** as the obstacle immediately before it.\n\nReturn _an array_ `ans` _of length_ `n`, _where_ `ans[i]` _is the length of the **longest obstacle course** for index_ `i` _as described above_.\n\n"}
{"question": "There is a **1-based** binary matrix where `0` represents land and `1` represents water. You are given integers `row` and `col` representing the number of rows and columns in the matrix, respectively.\n\nInitially on day `0`, the **entire** matrix is **land**. However, each day a new cell becomes flooded with **water**. You are given a **1-based** 2D array `cells`, where `cells[i] = [ri, ci]` represents that on the `ith` day, the cell on the `rith` row and `cith` column (**1-based** coordinates) will be covered with **water** (i.e., changed to `1`).\n\nYou want to find the **last** day that it is possible to walk from the **top** to the **bottom** by only walking on land cells. You can start from **any** cell in the top row and end at **any** cell in the bottom row. You can only travel in the **four** cardinal directions (left, right, up, and down).\n\nReturn _the **last** day where it is possible to walk from the **top** to the **bottom** by only walking on land cells_.\n\n"}
{"question": "You wrote down many **positive** integers in a string called `num`. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was **non-decreasing** and that **no** integer had leading zeros.\n\nReturn _the **number of possible lists of integers** that you could have written down to get the string_ `num`. Since the answer may be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given an integer `n` representing the length of an unknown array that you are trying to recover. You are also given an array `sums` containing the values of all `2n` **subset sums** of the unknown array (in no particular order).\n\nReturn _the array_ `ans` _of length_ `n` _representing the unknown array. If **multiple** answers exist, return **any** of them_.\n\nAn array `sub` is a **subset** of an array `arr` if `sub` can be obtained from `arr` by deleting some (possibly zero or all) elements of `arr`. The sum of the elements in `sub` is one possible **subset sum** of `arr`. The sum of an empty array is considered to be `0`.\n\n**Note:** Test cases are generated such that there will **always** be at least one correct answer.\n\n"}
{"question": "You are given a binary string `binary`. A **subsequence** of `binary` is considered **good** if it is **not empty** and has **no leading zeros** (with the exception of `\"0 \"`).\n\nFind the number of **unique good subsequences** of `binary`.\n\n*   For example, if `binary = \"001 \"`, then all the **good** subsequences are `[ \"0 \", \"0 \", \"1 \"]`, so the **unique** good subsequences are `\"0 \"` and `\"1 \"`. Note that subsequences `\"00 \"`, `\"01 \"`, and `\"001 \"` are not good because they have leading zeros.\n\nReturn _the number of **unique good subsequences** of_ `binary`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers.\n\n*   For example, if `nums = [1, 2, 3, 4]`:\n    *   `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n    *   `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\nReturn _the number of different **good** subsets in_ `nums` _**modulo**_ `109 + 7`.\n\nA **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n"}
{"question": "You are given an integer array `nums`, and you can perform the following operation **any** number of times on `nums`:\n\n*   Swap the positions of two elements `nums[i]` and `nums[j]` if `gcd(nums[i], nums[j]) > 1` where `gcd(nums[i], nums[j])` is the **greatest common divisor** of `nums[i]` and `nums[j]`.\n\nReturn `true` _if it is possible to sort_ `nums` _in **non-decreasing** order using the above swap method, or_ `false` _otherwise._\n\n"}
{"question": "There is a **family tree** rooted at `0` consisting of `n` nodes numbered `0` to `n - 1`. You are given a **0-indexed** integer array `parents`, where `parents[i]` is the parent for node `i`. Since node `0` is the **root**, `parents[0] == -1`.\n\nThere are `105` genetic values, each represented by an integer in the **inclusive** range `[1, 105]`. You are given a **0-indexed** integer array `nums`, where `nums[i]` is a **distinct** genetic value for node `i`.\n\nReturn _an array_ `ans` _of length_ `n` _where_ `ans[i]` _is_ _the **smallest** genetic value that is **missing** from the subtree rooted at node_ `i`.\n\nThe **subtree** rooted at a node `x` contains node `x` and all of its **descendant** nodes.\n\n"}
{"question": "A **Fibonacci** tree is a binary tree created using the order function `order(n)`:\n\n*   `order(0)` is the empty tree.\n*   `order(1)` is a binary tree with only **one node**.\n*   `order(n)` is a binary tree that consists of a root node with the left subtree as `order(n - 2)` and the right subtree as `order(n - 1)`.\n\nAlice and Bob are playing a game with a **Fibonacci** tree with Alice staring first. On each turn, a player selects a node and removes that node **and** its subtree. The player that is forced to delete `root` loses.\n\nGiven the integer `n`, return `true` if Alice wins the game or `false` if Bob wins, assuming both players play optimally.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n"}
{"question": "You are given an integer array `nums`. In one operation, you can replace **any** element in `nums` with **any** integer.\n\n`nums` is considered **continuous** if both of the following conditions are fulfilled:\n\n*   All elements in `nums` are **unique**.\n*   The difference between the **maximum** element and the **minimum** element in `nums` equals `nums.length - 1`.\n\nFor example, `nums = [4, 2, 5, 3]` is **continuous**, but `nums = [1, 2, 3, 5, 6]` is **not continuous**.\n\nReturn _the **minimum** number of operations to make_ `nums` **_continuous_**.\n\n"}
{"question": "You are given a string `s` of length `n`, and an integer `k`. You are tasked to find the **longest subsequence repeated** `k` times in string `s`.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\nA subsequence `seq` is **repeated** `k` times in the string `s` if `seq * k` is a subsequence of `s`, where `seq * k` represents a string constructed by concatenating `seq` `k` times.\n\n*   For example, `\"bba \"` is repeated `2` times in the string `\"bababcba \"`, because the string `\"bbabba \"`, constructed by concatenating `\"bba \"` `2` times, is a subsequence of the string `\"**b**a**bab**c**ba** \"`.\n\nReturn _the **longest subsequence repeated**_ `k` _times in string_ `s`_. If multiple such subsequences are found, return the **lexicographically largest** one. If there is no such subsequence, return an **empty** string_.\n\n"}
{"question": "You are given a string `s` that contains digits `0-9`, addition symbols `'+'`, and multiplication symbols `'*'` **only**, representing a **valid** math expression of **single digit numbers** (e.g., `3+5*2`). This expression was given to `n` elementary school students. The students were instructed to get the answer of the expression by following this **order of operations**:\n\n1.  Compute **multiplication**, reading from **left to right**; Then,\n2.  Compute **addition**, reading from **left to right**.\n\nYou are given an integer array `answers` of length `n`, which are the submitted answers of the students in no particular order. You are asked to grade the `answers`, by following these **rules**:\n\n*   If an answer **equals** the correct answer of the expression, this student will be rewarded `5` points;\n*   Otherwise, if the answer **could be interpreted** as if the student applied the operators **in the wrong order** but had **correct arithmetic**, this student will be rewarded `2` points;\n*   Otherwise, this student will be rewarded `0` points.\n\nReturn _the sum of the points of the students_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`. The number of ways to **partition** `nums` is the number of `pivot` indices that satisfy both conditions:\n\n*   `1 <= pivot < n`\n*   `nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]`\n\nYou are also given an integer `k`. You can choose to change the value of **one** element of `nums` to `k`, or to leave the array **unchanged**.\n\nReturn _the **maximum** possible number of ways to **partition**_ `nums` _to satisfy both conditions after changing **at most** one element_.\n\n"}
{"question": "You are given a string `s`, an integer `k`, a letter `letter`, and an integer `repetition`.\n\nReturn _the **lexicographically smallest** subsequence of_ `s` _of length_ `k` _that has the letter_ `letter` _appear **at least**_ `repetition` _times_. The test cases are generated so that the `letter` appears in `s` **at least** `repetition` times.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\nA string `a` is **lexicographically smaller** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`.\n\n"}
{"question": "You are given an integer array `nums` of `2 * n` integers. You need to partition `nums` into **two** arrays of length `n` to **minimize the absolute difference** of the **sums** of the arrays. To partition `nums`, put each element of `nums` into **one** of the two arrays.\n\nReturn _the **minimum** possible absolute difference_.\n\n"}
{"question": "Given two **sorted 0-indexed** integer arrays `nums1` and `nums2` as well as an integer `k`, return _the_ `kth` _(**1-based**) smallest product of_ `nums1[i] * nums2[j]` _where_ `0 <= i < nums1.length` _and_ `0 <= j < nums2.length`.\n\n"}
{"question": "A city is represented as a **bi-directional connected** graph with `n` vertices where each vertex is labeled from `1` to `n` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself. The time taken to traverse any edge is `time` minutes.\n\nEach vertex has a traffic signal which changes its color from **green** to **red** and vice versa every `change` minutes. All signals change **at the same time**. You can enter a vertex at **any time**, but can leave a vertex **only when the signal is green**. You **cannot wait** at a vertex if the signal is **green**.\n\nThe **second minimum value** is defined as the smallest value **strictly larger** than the minimum value.\n\n*   For example the second minimum value of `[2, 3, 4]` is `3`, and the second minimum value of `[2, 2, 4]` is `4`.\n\nGiven `n`, `edges`, `time`, and `change`, return _the **second minimum time** it will take to go from vertex_ `1` _to vertex_ `n`.\n\n**Notes:**\n\n*   You can go through any vertex **any** number of times, **including** `1` and `n`.\n*   You can assume that when the journey **starts**, all signals have just turned **green**.\n\n"}
{"question": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given a 2D integer array `relations` where `relations[j] = [prevCoursej, nextCoursej]` denotes that course `prevCoursej` has to be completed **before** course `nextCoursej` (prerequisite relationship). Furthermore, you are given a **0-indexed** integer array `time` where `time[i]` denotes how many **months** it takes to complete the `(i+1)th` course.\n\nYou must find the **minimum** number of months needed to complete all the courses following these rules:\n\n*   You may start taking a course at **any time** if the prerequisites are met.\n*   **Any number of courses** can be taken at the **same time**.\n\nReturn _the **minimum** number of months needed to complete all the courses_.\n\n**Note:** The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).\n\n"}
{"question": "There is an `8 x 8` chessboard containing `n` pieces (rooks, queens, or bishops). You are given a string array `pieces` of length `n`, where `pieces[i]` describes the type (rook, queen, or bishop) of the `ith` piece. In addition, you are given a 2D integer array `positions` also of length `n`, where `positions[i] = [ri, ci]` indicates that the `ith` piece is currently at the **1-based** coordinate `(ri, ci)` on the chessboard.\n\nWhen making a **move** for a piece, you choose a **destination** square that the piece will travel toward and stop on.\n\n*   A rook can only travel **horizontally or vertically** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, or `(r, c-1)`.\n*   A queen can only travel **horizontally, vertically, or diagonally** from `(r, c)` to the direction of `(r+1, c)`, `(r-1, c)`, `(r, c+1)`, `(r, c-1)`, `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n*   A bishop can only travel **diagonally** from `(r, c)` to the direction of `(r+1, c+1)`, `(r+1, c-1)`, `(r-1, c+1)`, `(r-1, c-1)`.\n\nYou must make a **move** for every piece on the board simultaneously. A **move combination** consists of all the **moves** performed on all the given pieces. Every second, each piece will instantaneously travel **one square** towards their destination if they are not already at it. All pieces start traveling at the `0th` second. A move combination is **invalid** if, at a given time, **two or more** pieces occupy the same square.\n\nReturn _the number of **valid** move combinations_​​​​​.\n\n**Notes:**\n\n*   **No two pieces** will start in the **same** square.\n*   You may choose the square a piece is already on as its **destination**.\n*   If two pieces are **directly adjacent** to each other, it is valid for them to **move past each other** and swap positions in one second.\n\n"}
{"question": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\n\n*   Arbitrarily **split** it into a **sequence** of some number of **non-empty** substrings.\n*   Arbitrarily choose some elements (possibly none) of the sequence, and **replace** each with **its length** (as a numeric string).\n*   **Concatenate** the sequence as the encoded string.\n\nFor example, **one way** to encode an original string `\"abcdefghijklmnop \"` might be:\n\n*   Split it as a sequence: `[ \"ab \", \"cdefghijklmn \", \"o \", \"p \"]`.\n*   Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes `[ \"ab \", \"12 \", \"1 \", \"p \"]`.\n*   Concatenate the elements of the sequence to get the encoded string: `\"ab121p \"`.\n\nGiven two encoded strings `s1` and `s2`, consisting of lowercase English letters and digits `1-9` (inclusive), return `true` _if there exists an original string that could be encoded as **both**_ `s1` _and_ `s2`_. Otherwise, return_ `false`.\n\n**Note**: The test cases are generated such that the number of consecutive digits in `s1` and `s2` does not exceed `3`.\n\n"}
{"question": "There is an **undirected** graph with `n` nodes numbered from `0` to `n - 1` (**inclusive**). You are given a **0-indexed** integer array `values` where `values[i]` is the **value** of the `ith` node. You are also given a **0-indexed** 2D integer array `edges`, where each `edges[j] = [uj, vj, timej]` indicates that there is an undirected edge between the nodes `uj` and `vj`, and it takes `timej` seconds to travel between the two nodes. Finally, you are given an integer `maxTime`.\n\nA **valid** **path** in the graph is any path that starts at node `0`, ends at node `0`, and takes **at most** `maxTime` seconds to complete. You may visit the same node multiple times. The **quality** of a valid path is the **sum** of the values of the **unique nodes** visited in the path (each node's value is added **at most once** to the sum).\n\nReturn _the **maximum** quality of a valid path_.\n\n**Note:** There are **at most four** edges connected to each node.\n\n"}
{"question": "You have `n` tasks and `m` workers. Each task has a strength requirement stored in a **0-indexed** integer array `tasks`, with the `ith` task requiring `tasks[i]` strength to complete. The strength of each worker is stored in a **0-indexed** integer array `workers`, with the `jth` worker having `workers[j]` strength. Each worker can only be assigned to a **single** task and must have a strength **greater than or equal** to the task's strength requirement (i.e., `workers[j] >= tasks[i]`).\n\nAdditionally, you have `pills` magical pills that will **increase a worker's strength** by `strength`. You can decide which workers receive the magical pills, however, you may only give each worker **at most one** magical pill.\n\nGiven the **0-indexed** integer arrays `tasks` and `workers` and the integers `pills` and `strength`, return _the **maximum** number of tasks that can be completed._\n\n"}
{"question": "You are given an integer `n` indicating the number of people in a network. Each person is labeled from `0` to `n - 1`.\n\nYou are also given a **0-indexed** 2D integer array `restrictions`, where `restrictions[i] = [xi, yi]` means that person `xi` and person `yi` **cannot** become **friends**, either **directly** or **indirectly** through other people.\n\nInitially, no one is friends with each other. You are given a list of friend requests as a **0-indexed** 2D integer array `requests`, where `requests[j] = [uj, vj]` is a friend request between person `uj` and person `vj`.\n\nA friend request is **successful** if `uj` and `vj` can be **friends**. Each friend request is processed in the given order (i.e., `requests[j]` occurs before `requests[j + 1]`), and upon a successful request, `uj` and `vj` **become direct friends** for all future friend requests.\n\nReturn _a **boolean array**_ `result`, _where each_ `result[j]` _is_ `true` _if the_ `jth` _friend request is **successful** or_ `false` _if it is not_.\n\n**Note:** If `uj` and `vj` are already direct friends, the request is still **successful**.\n\n"}
{"question": "A **k-mirror number** is a **positive** integer **without leading zeros** that reads the same both forward and backward in base-10 **as well as** in base-k.\n\n*   For example, `9` is a 2-mirror number. The representation of `9` in base-10 and base-2 are `9` and `1001` respectively, which read the same both forward and backward.\n*   On the contrary, `4` is not a 2-mirror number. The representation of `4` in base-2 is `100`, which does not read the same both forward and backward.\n\nGiven the base `k` and the number `n`, return _the **sum** of the_ `n` _**smallest** k-mirror numbers_.\n\n"}
{"question": "A farmer has a **rectangular grid** of land with `m` rows and `n` columns that can be divided into unit cells. Each cell is either **fertile** (represented by a `1`) or **barren** (represented by a `0`). All cells outside the grid are considered barren.\n\nA **pyramidal plot** of land can be defined as a set of cells with the following criteria:\n\n1.  The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2.  The **apex** of a pyramid is the **topmost** cell of the pyramid. The **height** of a pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r <= i <= r + h - 1` **and** `c - (i - r) <= j <= c + (i - r)`.\n\nAn **inverse pyramidal plot** of land can be defined as a set of cells with similar criteria:\n\n1.  The number of cells in the set has to be **greater than** `1` and all cells must be **fertile**.\n2.  The **apex** of an inverse pyramid is the **bottommost** cell of the inverse pyramid. The **height** of an inverse pyramid is the number of rows it covers. Let `(r, c)` be the apex of the pyramid, and its height be `h`. Then, the plot comprises of cells `(i, j)` where `r - h + 1 <= i <= r` **and** `c - (r - i) <= j <= c + (r - i)`.\n\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\n\nGiven a **0-indexed** `m x n` binary matrix `grid` representing the farmland, return _the **total number** of pyramidal and inverse pyramidal plots that can be found in_ `grid`.\n\n"}
{"question": "You are given an integer `n` indicating there are `n` people numbered from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `meetings` where `meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi` have a meeting at `timei`. A person may attend **multiple meetings** at the same time. Finally, you are given an integer `firstPerson`.\n\nPerson `0` has a **secret** and initially shares the secret with a person `firstPerson` at time `0`. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person `xi` has the secret at `timei`, then they will share the secret with person `yi`, and vice versa.\n\nThe secrets are shared **instantaneously**. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\n\nReturn _a list of all the people that have the secret after all the meetings have taken place._ You may return the answer in **any order**.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `pairs` where `pairs[i] = [starti, endi]`. An arrangement of `pairs` is **valid** if for every index `i` where `1 <= i < pairs.length`, we have `endi-1 == starti`.\n\nReturn _**any** valid arrangement of_ `pairs`.\n\n**Note:** The inputs will be generated such that there exists a valid arrangement of `pairs`.\n\n"}
{"question": "A scenic location is represented by its `name` and attractiveness `score`, where `name` is a **unique** string among all locations and `score` is an integer. Locations can be ranked from the best to the worst. The **higher** the score, the better the location. If the scores of two locations are equal, then the location with the **lexicographically smaller** name is better.\n\nYou are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:\n\n*   **Adding** scenic locations, **one at a time**.\n*   **Querying** the `ith` **best** location of **all locations already added**, where `i` is the number of times the system has been queried (including the current query).\n    *   For example, when the system is queried for the `4th` time, it returns the `4th` best location of all locations already added.\n\nNote that the test data are generated so that **at any time**, the number of queries **does not exceed** the number of locations added to the system.\n\nImplement the `SORTracker` class:\n\n*   `SORTracker()` Initializes the tracker system.\n*   `void add(string name, int score)` Adds a scenic location with `name` and `score` to the system.\n*   `string get()` Queries and returns the `ith` best location, where `i` is the number of times this method has been invoked (including this invocation).\n\n"}
{"question": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array `fruits` where `fruits[i] = [positioni, amounti]` depicts `amounti` fruits at the position `positioni`. `fruits` is already **sorted** by `positioni` in **ascending order**, and each `positioni` is **unique**.\n\nYou are also given an integer `startPos` and an integer `k`. Initially, you are at the position `startPos`. From any position, you can either walk to the **left or right**. It takes **one step** to move **one unit** on the x-axis, and you can walk **at most** `k` steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\n\nReturn _the **maximum total number** of fruits you can harvest_.\n\n"}
{"question": "You are given a **0-indexed** array `arr` consisting of `n` positive integers, and a positive integer `k`.\n\nThe array `arr` is called **K-increasing** if `arr[i-k] <= arr[i]` holds for every index `i`, where `k <= i <= n-1`.\n\n*   For example, `arr = [4, 1, 5, 2, 6, 2]` is K-increasing for `k = 2` because:\n    *   `arr[0] <= arr[2] (4 <= 5)`\n    *   `arr[1] <= arr[3] (1 <= 2)`\n    *   `arr[2] <= arr[4] (5 <= 6)`\n    *   `arr[3] <= arr[5] (2 <= 2)`\n*   However, the same `arr` is not K-increasing for `k = 1` (because `arr[0] > arr[1]`) or `k = 3` (because `arr[0] > arr[3]`).\n\nIn one **operation**, you can choose an index `i` and **change** `arr[i]` into **any** positive integer.\n\nReturn _the **minimum number of operations** required to make the array K-increasing for the given_ `k`.\n\n"}
{"question": "You are given two positive integers `left` and `right` with `left <= right`. Calculate the **product** of all integers in the **inclusive** range `[left, right]`.\n\nSince the product may be very large, you will **abbreviate** it following these steps:\n\n1.  Count all **trailing** zeros in the product and **remove** them. Let us denote this count as `C`.\n    *   For example, there are `3` trailing zeros in `1000`, and there are `0` trailing zeros in `546`.\n2.  Denote the remaining number of digits in the product as `d`. If `d > 10`, then express the product as\n    \n        ...\n    \n3.  Finally, represent the product as a **string** `\"`\n    \n        ...eC \"\n    \n\nReturn _a string denoting the **abbreviated product** of all integers in the **inclusive** range_ `[left, right]`.\n\n"}
{"question": "You are given a **0-indexed** binary matrix `grid`. In one operation, you can flip any `1` in `grid` to be `0`.\n\nA binary matrix is **well-isolated** if there is no `1` in the matrix that is **4-directionally connected** (i.e., horizontal and vertical) to another `1`.\n\nReturn _the minimum number of operations to make_ `grid` _**well-isolated**_.\n\n"}
{"question": "A company is organizing a meeting and has a list of `n` employees, waiting to be invited. They have arranged for a large **circular** table, capable of seating **any number** of employees.\n\nThe employees are numbered from `0` to `n - 1`. Each employee has a **favorite** person and they will attend the meeting **only if** they can sit next to their favorite person at the table. The favorite person of an employee is **not** themself.\n\nGiven a **0-indexed** integer array `favorite`, where `favorite[i]` denotes the favorite person of the `ith` employee, return _the **maximum number of employees** that can be invited to the meeting_.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied).\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**:\n\n1.  Cover all the **empty** cells.\n2.  Do not cover any of the **occupied** cells.\n3.  We can put as **many** stamps as we want.\n4.  Stamps can **overlap** with each other.\n5.  Stamps are not allowed to be **rotated**.\n6.  Stamps must stay completely **inside** the grid.\n\nReturn `true` _if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return_ `false`.\n\n"}
{"question": "You have `n` flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two **0-indexed** integer arrays `plantTime` and `growTime`, of length `n` each:\n\n*   `plantTime[i]` is the number of **full days** it takes you to **plant** the `ith` seed. Every day, you can work on planting exactly one seed. You **do not** have to work on planting the same seed on consecutive days, but the planting of a seed is not complete **until** you have worked `plantTime[i]` days on planting it in total.\n*   `growTime[i]` is the number of **full days** it takes the `ith` seed to grow after being completely planted. **After** the last day of its growth, the flower **blooms** and stays bloomed forever.\n\nFrom the beginning of day `0`, you can plant the seeds in **any** order.\n\nReturn _the **earliest** possible day where **all** seeds are blooming_.\n\n"}
{"question": "You have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries.\n\nInitially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\n\nNote that the batteries cannot be recharged.\n\nReturn _the **maximum** number of minutes you can run all the_ `n` _computers simultaneously._\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of length `n`.\n\nA range `[l, r]` (**inclusive**) where `0 <= l <= r < n` is **balanced** if:\n\n*   For every `i` in the range `[l, r]`, you pick either `nums1[i]` or `nums2[i]`.\n*   The sum of the numbers you pick from `nums1` equals to the sum of the numbers you pick from `nums2` (the sum is considered to be `0` if you pick no numbers from an array).\n\nTwo **balanced** ranges from `[l1, r1]` and `[l2, r2]` are considered to be **different** if at least one of the following is true:\n\n*   `l1 != l2`\n*   `r1 != r2`\n*   `nums1[i]` is picked in the first range, and `nums2[i]` is picked in the second range or **vice versa** for at least one `i`.\n\nReturn _the number of **different** ranges that are balanced._ Since the answer may be very large, return it **modulo** `109 + 7`_._\n\n"}
{"question": "Along a long library corridor, there is a line of seats and decorative plants. You are given a **0-indexed** string `corridor` of length `n` consisting of letters `'S'` and `'P'` where each `'S'` represents a seat and each `'P'` represents a plant.\n\nOne room divider has **already** been installed to the left of index `0`, and **another** to the right of index `n - 1`. Additional room dividers can be installed. For each position between indices `i - 1` and `i` (`1 <= i <= n - 1`), at most one divider can be installed.\n\nDivide the corridor into non-overlapping sections, where each section has **exactly two seats** with any number of plants. There may be multiple ways to perform the division. Two ways are **different** if there is a position with a room divider installed in the first way but not in the second way.\n\nReturn _the number of ways to divide the corridor_. Since the answer may be very large, return it **modulo** `109 + 7`. If there is no way, return `0`.\n\n"}
{"question": "There are two types of persons:\n\n*   The **good person**: The person who always tells the truth.\n*   The **bad person**: The person who might tell the truth and might lie.\n\nYou are given a **0-indexed** 2D integer array `statements` of size `n x n` that represents the statements made by `n` people about each other. More specifically, `statements[i][j]` could be one of the following:\n\n*   `0` which represents a statement made by person `i` that person `j` is a **bad** person.\n*   `1` which represents a statement made by person `i` that person `j` is a **good** person.\n*   `2` represents that **no statement** is made by person `i` about person `j`.\n\nAdditionally, no person ever makes a statement about themselves. Formally, we have that `statements[i][i] = 2` for all `0 <= i < n`.\n\nReturn _the **maximum** number of people who can be **good** based on the statements made by the_ `n` _people_.\n\n"}
{"question": "The hash of a **0-indexed** string `s` of length `k`, given integers `p` and `m`, is computed using the following function:\n\n*   `hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m`.\n\nWhere `val(s[i])` represents the index of `s[i]` in the alphabet from `val('a') = 1` to `val('z') = 26`.\n\nYou are given a string `s` and the integers `power`, `modulo`, `k`, and `hashValue.` Return `sub`, _the **first** **substring** of_ `s` _of length_ `k` _such that_ `hash(sub, power, modulo) == hashValue`.\n\nThe test cases will be generated such that an answer always **exists**.\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n"}
{"question": "You are given a **0-indexed** array of strings `words`. Each string consists of **lowercase English letters** only. No letter occurs more than once in any string of `words`.\n\nTwo strings `s1` and `s2` are said to be **connected** if the set of letters of `s2` can be obtained from the set of letters of `s1` by any **one** of the following operations:\n\n*   Adding exactly one letter to the set of the letters of `s1`.\n*   Deleting exactly one letter from the set of the letters of `s1`.\n*   Replacing exactly one letter from the set of the letters of `s1` with any letter, **including** itself.\n\nThe array `words` can be divided into one or more non-intersecting **groups**. A string belongs to a group if any **one** of the following is true:\n\n*   It is connected to **at least one** other string of the group.\n*   It is the **only** string present in the group.\n\nNote that the strings in `words` should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\n\nReturn _an array_ `ans` _of size_ `2` _where:_\n\n*   `ans[0]` _is the **maximum number** of groups_ `words` _can be divided into, and_\n*   `ans[1]` _is the **size of the largest** group_.\n\n"}
{"question": "There is a long and thin painting that can be represented by a number line. You are given a **0-indexed** 2D integer array `paint` of length `n`, where `paint[i] = [starti, endi]`. This means that on the `ith` day you need to paint the area **between** `starti` and `endi`.\n\nPainting the same area multiple times will create an uneven painting so you only want to paint each area of the painting at most **once**.\n\nReturn _an integer array_ `worklog` _of length_ `n`_, where_ `worklog[i]` _is the amount of **new** area that you painted on the_ `ith` _day._\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` consisting of `3 * n` elements.\n\nYou are allowed to remove any **subsequence** of elements of size **exactly** `n` from `nums`. The remaining `2 * n` elements will be divided into two **equal** parts:\n\n*   The first `n` elements belonging to the first part and their sum is `sumfirst`.\n*   The next `n` elements belonging to the second part and their sum is `sumsecond`.\n\nThe **difference in sums** of the two parts is denoted as `sumfirst - sumsecond`.\n\n*   For example, if `sumfirst = 3` and `sumsecond = 2`, their difference is `1`.\n*   Similarly, if `sumfirst = 2` and `sumsecond = 3`, their difference is `-1`.\n\nReturn _the **minimum difference** possible between the sums of the two parts after the removal of_ `n` _elements_.\n\n"}
{"question": "You are given a **0-indexed** binary string `s` which represents a sequence of train cars. `s[i] = '0'` denotes that the `ith` car does **not** contain illegal goods and `s[i] = '1'` denotes that the `ith` car does contain illegal goods.\n\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations **any** number of times:\n\n1.  Remove a train car from the **left** end (i.e., remove `s[0]`) which takes 1 unit of time.\n2.  Remove a train car from the **right** end (i.e., remove `s[s.length - 1]`) which takes 1 unit of time.\n3.  Remove a train car from **anywhere** in the sequence which takes 2 units of time.\n\nReturn _the **minimum** time to remove all the cars containing illegal goods_.\n\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\n\n"}
{"question": "You are given an integer array `nums` of length `n` and an integer `numSlots` such that `2 * numSlots >= n`. There are `numSlots` slots numbered from `1` to `numSlots`.\n\nYou have to place all `n` integers into the slots such that each slot contains at **most** two numbers. The **AND sum** of a given placement is the sum of the **bitwise** `AND` of every number with its respective slot number.\n\n*   For example, the **AND sum** of placing the numbers `[1, 3]` into slot `1` and `[4, 6]` into slot `2` is equal to `(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4`.\n\nReturn _the maximum possible **AND sum** of_ `nums` _given_ `numSlots` _slots._\n\n"}
{"question": "You are given two **0-indexed** arrays `nums1` and `nums2` of length `n`, both of which are **permutations** of `[0, 1, ..., n - 1]`.\n\nA **good triplet** is a set of `3` **distinct** values which are present in **increasing order** by position both in `nums1` and `nums2`. In other words, if we consider `pos1v` as the index of the value `v` in `nums1` and `pos2v` as the index of the value `v` in `nums2`, then a good triplet will be a set `(x, y, z)` where `0 <= x, y, z <= n - 1`, such that `pos1x < pos1y < pos1z` and `pos2x < pos2y < pos2z`.\n\nReturn _the **total number** of good triplets_.\n\n"}
{"question": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _such that:_\n\n*   `0 <= i < j <= n - 1` _and_\n*   `nums[i] * nums[j]` _is divisible by_ `k`.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `tires` where `tires[i] = [fi, ri]` indicates that the `ith` tire can finish its `xth` successive lap in `fi * ri(x-1)` seconds.\n\n*   For example, if `fi = 3` and `ri = 2`, then the tire would finish its `1st` lap in `3` seconds, its `2nd` lap in `3 * 2 = 6` seconds, its `3rd` lap in `3 * 22 = 12` seconds, etc.\n\nYou are also given an integer `changeTime` and an integer `numLaps`.\n\nThe race consists of `numLaps` laps and you may start the race with **any** tire. You have an **unlimited** supply of each tire and after every lap, you may **change** to any given tire (including the current tire type) if you wait `changeTime` seconds.\n\nReturn _the **minimum** time to finish the race._\n\n"}
{"question": "You are given a string `s` consisting only of lowercase English letters.\n\nIn one **move**, you can select any two **adjacent** characters of `s` and swap them.\n\nReturn _the **minimum number of moves** needed to make_ `s` _a palindrome_.\n\n**Note** that the input will be generated such that `s` can always be converted to a palindrome.\n\n"}
{"question": "You are given an array of integers `nums`. Perform the following steps:\n\n1.  Find **any** two **adjacent** numbers in `nums` that are **non-coprime**.\n2.  If no such numbers are found, **stop** the process.\n3.  Otherwise, delete the two numbers and **replace** them with their **LCM (Least Common Multiple)**.\n4.  **Repeat** this process as long as you keep finding two adjacent non-coprime numbers.\n\nReturn _the **final** modified array._ It can be shown that replacing adjacent non-coprime numbers in **any** arbitrary order will lead to the same result.\n\nThe test cases are generated such that the values in the final array are **less than or equal** to `108`.\n\nTwo values `x` and `y` are **non-coprime** if `GCD(x, y) > 1` where `GCD(x, y)` is the **Greatest Common Divisor** of `x` and `y`.\n\n"}
{"question": "You are given an integer `n` denoting the number of nodes of a **weighted directed** graph. The nodes are numbered from `0` to `n - 1`.\n\nYou are also given a 2D integer array `edges` where `edges[i] = [fromi, toi, weighti]` denotes that there exists a **directed** edge from `fromi` to `toi` with weight `weighti`.\n\nLastly, you are given three **distinct** integers `src1`, `src2`, and `dest` denoting three distinct nodes of the graph.\n\nReturn _the **minimum weight** of a subgraph of the graph such that it is **possible** to reach_ `dest` _from both_ `src1` _and_ `src2` _via a set of edges of this subgraph_. In case such a subgraph does not exist, return `-1`.\n\nA **subgraph** is a graph whose vertices and edges are subsets of the original graph. The **weight** of a subgraph is the sum of weights of its constituent edges.\n\n"}
{"question": "You are given a positive integer `n` representing the number of nodes in a **connected undirected graph** containing **exactly one** cycle. The nodes are numbered from `0` to `n - 1` (**inclusive**).\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [node1i, node2i]` denotes that there is a **bidirectional** edge connecting `node1i` and `node2i` in the graph.\n\nThe distance between two nodes `a` and `b` is defined to be the **minimum** number of edges that are needed to go from `a` to `b`.\n\nReturn _an integer array `answer`_ _of size_ `n`_, where_ `answer[i]` _is the **minimum** distance between the_ `ith` _node and **any** node in the cycle._\n\n"}
{"question": "You are given a **0-indexed binary** string `floor`, which represents the colors of tiles on a floor:\n\n*   `floor[i] = '0'` denotes that the `ith` tile of the floor is colored **black**.\n*   On the other hand, `floor[i] = '1'` denotes that the `ith` tile of the floor is colored **white**.\n\nYou are also given `numCarpets` and `carpetLen`. You have `numCarpets` **black** carpets, each of length `carpetLen` tiles. Cover the tiles with the given carpets such that the number of **white** tiles still visible is **minimum**. Carpets may overlap one another.\n\nReturn _the **minimum** number of white tiles still visible._\n\n"}
{"question": "You are given a **0-indexed** string `s`. You are also given a **0-indexed** string `queryCharacters` of length `k` and a **0-indexed** array of integer **indices** `queryIndices` of length `k`, both of which are used to describe `k` queries.\n\nThe `ith` query updates the character in `s` at index `queryIndices[i]` to the character `queryCharacters[i]`.\n\nReturn _an array_ `lengths` _of length_ `k` _where_ `lengths[i]` _is the **length** of the **longest substring** of_ `s` _consisting of **only one repeating** character **after** the_ `ith` _query_ _is performed._\n\n"}
{"question": "There are `n` **piles** of coins on a table. Each pile consists of a **positive number** of coins of assorted denominations.\n\nIn one move, you can choose any coin on **top** of any pile, remove it, and add it to your wallet.\n\nGiven a list `piles`, where `piles[i]` is a list of integers denoting the composition of the `ith` pile from **top to bottom**, and a positive integer `k`, return _the **maximum total value** of coins you can have in your wallet if you choose **exactly**_ `k` _coins optimally_.\n\n"}
{"question": "You are **building** a string `s` of length `n` **one** character at a time, **prepending** each new character to the **front** of the string. The strings are labeled from `1` to `n`, where the string with length `i` is labeled `si`.\n\n*   For example, for `s = \"abaca \"`, `s1 == \"a \"`, `s2 == \"ca \"`, `s3 == \"aca \"`, etc.\n\nThe **score** of `si` is the length of the **longest common prefix** between `si` and `sn` (Note that `s == sn`).\n\nGiven the final string `s`, return _the **sum** of the **score** of every_ `si`.\n\n"}
{"question": "You are given a character array `keys` containing **unique** characters and a string array `values` containing strings of length 2. You are also given another string array `dictionary` that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a **0-indexed** string.\n\nA string is **encrypted** with the following process:\n\n1.  For each character `c` in the string, we find the index `i` satisfying `keys[i] == c` in `keys`.\n2.  Replace `c` with `values[i]` in the string.\n\nNote that in case a character of the string is **not present** in `keys`, the encryption process cannot be carried out, and an empty string `\" \"` is returned.\n\nA string is **decrypted** with the following process:\n\n1.  For each substring `s` of length 2 occurring at an even index in the string, we find an `i` such that `values[i] == s`. If there are multiple valid `i`, we choose **any** one of them. This means a string could have multiple possible strings it can decrypt to.\n2.  Replace `s` with `keys[i]` in the string.\n\nImplement the `Encrypter` class:\n\n*   `Encrypter(char[] keys, String[] values, String[] dictionary)` Initializes the `Encrypter` class with `keys, values`, and `dictionary`.\n*   `String encrypt(String word1)` Encrypts `word1` with the encryption process described above and returns the encrypted string.\n*   `int decrypt(String word2)` Returns the number of possible strings `word2` could decrypt to that also appear in `dictionary`.\n\n"}
{"question": "Alice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\n\nYou are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`.\n\nA garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following:\n\n*   The number of **complete** gardens multiplied by `full`.\n*   The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`.\n\nReturn _the **maximum** total beauty that Alice can obtain after planting at most_ `newFlowers` _flowers._\n\n"}
{"question": "There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`.\n\nYou are given a **0-indexed** integer array `scores` of length `n` where `scores[i]` denotes the score of node `i`. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\nA node sequence is **valid** if it meets the following conditions:\n\n*   There is an edge connecting every pair of **adjacent** nodes in the sequence.\n*   No node appears more than once in the sequence.\n\nThe score of a node sequence is defined as the **sum** of the scores of the nodes in the sequence.\n\nReturn _the **maximum score** of a valid node sequence with a length of_ `4`_._ If no such sequence exists, return `-1`.\n\n"}
{"question": "You are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`.\n\nReturn _the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them._\n\n"}
{"question": "A series of highways connect `n` cities numbered from `0` to `n - 1`. You are given a 2D integer array `highways` where `highways[i] = [city1i, city2i, tolli]` indicates that there is a highway that connects `city1i` and `city2i`, allowing a car to go from `city1i` to `city2i` and **vice versa** for a cost of `tolli`.\n\nYou are also given an integer `k`. You are going on a trip that crosses **exactly** `k` highways. You may start at any city, but you may only visit each city **at most** once during your trip.\n\nReturn _the **maximum** cost of your trip. If there is no trip that meets the requirements, return_ `-1`_._\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `flowers`, where `flowers[i] = [starti, endi]` means the `ith` flower will be in **full bloom** from `starti` to `endi` (**inclusive**). You are also given a **0-indexed** integer array `people` of size `n`, where `poeple[i]` is the time that the `ith` person will arrive to see the flowers.\n\nReturn _an integer array_ `answer` _of size_ `n`_, where_ `answer[i]` _is the **number** of flowers that are in full bloom when the_ `ith` _person arrives._\n\n"}
{"question": "You have a video sharing platform where users can upload and delete videos. Each `video` is a **string** of digits, where the `ith` digit of the string represents the content of the video at minute `i`. For example, the first digit represents the content at minute `0` in the video, the second digit represents the content at minute `1` in the video, and so on. Viewers of videos can also like and dislike videos. Internally, the platform keeps track of the **number of views, likes, and dislikes** on each video.\n\nWhen a video is uploaded, it is associated with the smallest available integer `videoId` starting from `0`. Once a video is deleted, the `videoId` associated with that video can be reused for another video.\n\nImplement the `VideoSharingPlatform` class:\n\n*   `VideoSharingPlatform()` Initializes the object.\n*   `int upload(String video)` The user uploads a `video`. Return the `videoId` associated with the video.\n*   `void remove(int videoId)` If there is a video associated with `videoId`, remove the video.\n*   `String watch(int videoId, int startMinute, int endMinute)` If there is a video associated with `videoId`, increase the number of views on the video by `1` and return the substring of the video string starting at `startMinute` and ending at `min(endMinute, video.length - 1``)` (**inclusive**). Otherwise, return `\"-1 \"`.\n*   `void like(int videoId)` Increases the number of likes on the video associated with `videoId` by `1` if there is a video associated with `videoId`.\n*   `void dislike(int videoId)` Increases the number of dislikes on the video associated with `videoId` by `1` if there is a video associated with `videoId`.\n*   `int[] getLikesAndDislikes(int videoId)` Return a **0-indexed** integer array `values` of length `2` where `values[0]` is the number of likes and `values[1]` is the number of dislikes on the video associated with `videoId`. If there is no video associated with `videoId`, return `[-1]`.\n*   `int getViews(int videoId)` Return the number of views on the video associated with `videoId`, if there is no video associated with `videoId`, return `-1`.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` which represents a field. Each cell has one of three values:\n\n*   `0` represents grass,\n*   `1` represents fire,\n*   `2` represents a wall that you and fire cannot pass through.\n\nYou are situated in the top-left cell, `(0, 0)`, and you want to travel to the safehouse at the bottom-right cell, `(m - 1, n - 1)`. Every minute, you may move to an **adjacent** grass cell. **After** your move, every fire cell will spread to all **adjacent** cells that are not walls.\n\nReturn _the **maximum** number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse_. If this is impossible, return `-1`. If you can **always** reach the safehouse regardless of the minutes stayed, return `109`.\n\nNote that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.\n\nA cell is **adjacent** to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\n"}
{"question": "The **appeal** of a string is the number of **distinct** characters found in the string.\n\n*   For example, the appeal of `\"abbca \"` is `3` because it has `3` distinct characters: `'a'`, `'b'`, and `'c'`.\n\nGiven a string `s`, return _the **total appeal of all of its **substrings**.**_\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. In one operation, you can:\n\n*   Choose an index `i` in the range `0 <= i < nums.length`\n*   Set `nums[i]` to `nums[i] + 1` **or** `nums[i] - 1`\n\nReturn _the **minimum** number of operations to make_ `nums` _**non-decreasing** or **non-increasing**._\n\n"}
{"question": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is **valid** if **any** of the following conditions is **true**:\n\n*   It is `()`.\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n*   It can be written as `(A)`, where `A` is a valid parentheses string.\n\nYou are given an `m x n` matrix of parentheses `grid`. A **valid parentheses string path** in the grid is a path satisfying **all** of the following conditions:\n\n*   The path starts from the upper left cell `(0, 0)`.\n*   The path ends at the bottom-right cell `(m - 1, n - 1)`.\n*   The path only ever moves **down** or **right**.\n*   The resulting parentheses string formed by the path is **valid**.\n\nReturn `true` _if there exists a **valid parentheses string path** in the grid._ Otherwise, return `false`.\n\n"}
{"question": "The **variance** of a string is defined as the largest difference between the number of occurrences of **any** `2` characters present in the string. Note the two characters may or may not be the same.\n\nGiven a string `s` consisting of lowercase English letters only, return _the **largest variance** possible among all **substrings** of_ `s`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "Given an **empty** set of intervals, implement a data structure that can:\n\n*   **Add** an interval to the set of intervals.\n*   **Count** the number of integers that are present in **at least one** interval.\n\nImplement the `CountIntervals` class:\n\n*   `CountIntervals()` Initializes the object with an empty set of intervals.\n*   `void add(int left, int right)` Adds the interval `[left, right]` to the set of intervals.\n*   `int count()` Returns the number of integers that are present in **at least one** interval.\n\n**Note** that an interval `[left, right]` denotes all the integers `x` where `left <= x <= right`.\n\n"}
{"question": "You are given a positive integer `n` representing the number of nodes in a tree, numbered from `0` to `n - 1` (**inclusive**). You are also given a 2D integer array `edges` of length `n - 1`, where `edges[i] = [node1i, node2i]` denotes that there is a **bidirectional** edge connecting `node1i` and `node2i` in the tree.\n\nYou are given a **0-indexed** integer array `query` of length `m` where `query[i] = [starti, endi, nodei]` means that for the `ith` query, you are tasked with finding the node on the path from `starti` to `endi` that is **closest** to `nodei`.\n\nReturn _an integer array_ `answer` _of length_ `m`_, where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "As the ruler of a kingdom, you have an army of wizards at your command.\n\nYou are given a **0-indexed** integer array `strength`, where `strength[i]` denotes the strength of the `ith` wizard. For a **contiguous** group of wizards (i.e. the wizards' strengths form a **subarray** of `strength`), the **total strength** is defined as the **product** of the following two values:\n\n*   The strength of the **weakest** wizard in the group.\n*   The **total** of all the individual strengths of the wizards in the group.\n\nReturn _the **sum** of the total strengths of **all** contiguous groups of wizards_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `grid` of size `m x n`. Each cell has one of two values:\n\n*   `0` represents an **empty** cell,\n*   `1` represents an **obstacle** that may be removed.\n\nYou can move up, down, left, or right from and to an empty cell.\n\nReturn _the **minimum** number of **obstacles** to **remove** so you can move from the upper left corner_ `(0, 0)` _to the lower right corner_ `(m - 1, n - 1)`.\n\n"}
{"question": "Design a text editor with a cursor that can do the following:\n\n*   **Add** text to where the cursor is.\n*   **Delete** text from where the cursor is (simulating the backspace key).\n*   **Move** the cursor either left or right.\n\nWhen deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that `0 <= cursor.position <= currentText.length` always holds.\n\nImplement the `TextEditor` class:\n\n*   `TextEditor()` Initializes the object with empty text.\n*   `void addText(string text)` Appends `text` to where the cursor is. The cursor ends to the right of `text`.\n*   `int deleteText(int k)` Deletes `k` characters to the left of the cursor. Returns the number of characters actually deleted.\n*   `string cursorLeft(int k)` Moves the cursor to the left `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor.\n*   `string cursorRight(int k)` Moves the cursor to the right `k` times. Returns the last `min(10, len)` characters to the left of the cursor, where `len` is the number of characters to the left of the cursor.\n\n"}
{"question": "You are given two strings `s` and `sub`. You are also given a 2D character array `mappings` where `mappings[i] = [oldi, newi]` indicates that you may perform the following operation **any** number of times:\n\n*   **Replace** a character `oldi` of `sub` with `newi`.\n\nEach character in `sub` **cannot** be replaced more than once.\n\nReturn `true` _if it is possible to make_ `sub` _a substring of_ `s` _by replacing zero or more characters according to_ `mappings`. Otherwise, return `false`.\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n"}
{"question": "The **score** of an array is defined as the **product** of its sum and its length.\n\n*   For example, the score of `[1, 2, 3, 4, 5]` is `(1 + 2 + 3 + 4 + 5) * 5 = 75`.\n\nGiven a positive integer array `nums` and an integer `k`, return _the **number of non-empty subarrays** of_ `nums` _whose score is **strictly less** than_ `k`.\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n"}
{"question": "You are given an array of strings `ideas` that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\n\n1.  Choose 2 **distinct** names from `ideas`, call them `ideaA` and `ideaB`.\n2.  Swap the first letters of `ideaA` and `ideaB` with each other.\n3.  If **both** of the new names are not found in the original `ideas`, then the name `ideaA ideaB` (the **concatenation** of `ideaA` and `ideaB`, separated by a space) is a valid company name.\n4.  Otherwise, it is not a valid name.\n\nReturn _the number of **distinct** valid names for the company_.\n\n"}
{"question": "You are given a 2D array of strings `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` means that `Ai / Bi = values[i]`.\n\nDetermine if there exists a contradiction in the equations. Return `true` _if there is a contradiction, or_ `false` _otherwise_.\n\n**Note**:\n\n*   When checking if two numbers are equal, check that their **absolute difference** is less than `10-5`.\n*   The testcases are generated such that there are no cases targeting precision, i.e. using `double` is enough to solve the problem.\n\n"}
{"question": "You are given two integers `m` and `n` that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array `prices`, where `prices[i] = [hi, wi, pricei]` indicates you can sell a rectangular piece of wood of height `hi` and width `wi` for `pricei` dollars.\n\nTo cut a piece of wood, you must make a vertical or horizontal cut across the **entire** height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to `prices`. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you **cannot** rotate a piece to swap its height and width.\n\nReturn _the **maximum** money you can earn after cutting an_ `m x n` _piece of wood_.\n\nNote that you can cut the piece of wood as many times as you want.\n\n"}
{"question": "You are given the `root` of a **binary tree** with the following properties:\n\n*   **Leaf nodes** have either the value `0` or `1`, representing `false` and `true` respectively.\n*   **Non-leaf nodes** have either the value `2`, `3`, `4`, or `5`, representing the boolean operations `OR`, `AND`, `XOR`, and `NOT`, respectively.\n\nYou are also given a boolean `result`, which is the desired result of the **evaluation** of the `root` node.\n\nThe evaluation of a node is as follows:\n\n*   If the node is a leaf node, the evaluation is the **value** of the node, i.e. `true` or `false`.\n*   Otherwise, **evaluate** the node's children and **apply** the boolean operation of its value with the children's evaluations.\n\nIn one operation, you can **flip** a leaf node, which causes a `false` node to become `true`, and a `true` node to become `false`.\n\nReturn _the minimum number of operations that need to be performed such that the evaluation of_ `root` _yields_ `result`. It can be shown that there is always a way to achieve `result`.\n\nA **leaf node** is a node that has zero children.\n\nNote: `NOT` nodes have either a left child or a right child, but other non-leaf nodes have both a left child and a right child.\n\n"}
{"question": "You are given an integer `n`. You roll a fair 6-sided dice `n` times. Determine the total number of **distinct** sequences of rolls possible such that the following conditions are satisfied:\n\n1.  The **greatest common divisor** of any **adjacent** values in the sequence is equal to `1`.\n2.  There is **at least** a gap of `2` rolls between **equal** valued rolls. More formally, if the value of the `ith` roll is **equal** to the value of the `jth` roll, then `abs(i - j) > 2`.\n\nReturn _the **total number** of distinct sequences possible_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nTwo sequences are considered distinct if at least one element is different.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`.\n\nYou can choose two integers `left` and `right` where `0 <= left <= right < n` and **swap** the subarray `nums1[left...right]` with the subarray `nums2[left...right]`.\n\n*   For example, if `nums1 = [1,2,3,4,5]` and `nums2 = [11,12,13,14,15]` and you choose `left = 1` and `right = 2`, `nums1` becomes `[1,**12,13**,4,5]` and `nums2` becomes `[11,**2,3**,14,15]`.\n\nYou may choose to apply the mentioned operation **once** or not do anything.\n\nThe **score** of the arrays is the **maximum** of `sum(nums1)` and `sum(nums2)`, where `sum(arr)` is the sum of all the elements in the array `arr`.\n\nReturn _the **maximum possible score**_.\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n"}
{"question": "There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nRemove two **distinct** edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:\n\n1.  Get the XOR of all the values of the nodes for **each** of the three components respectively.\n2.  The **difference** between the **largest** XOR value and the **smallest** XOR value is the **score** of the pair.\n\n*   For example, say the three components have the node values: `[4,5,7]`, `[1,9]`, and `[3,3,3]`. The three XOR values are `4 ^ 5 ^ 7 = **6**`, `1 ^ 9 = **8**`, and `3 ^ 3 ^ 3 = **3**`. The largest XOR value is `8` and the smallest XOR value is `3`. The score is then `8 - 3 = 5`.\n\nReturn _the **minimum** score of any possible pair of edge removals on the given tree_.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid`, where you can move from a cell to any adjacent cell in all `4` directions.\n\nReturn _the number of **strictly** **increasing** paths in the grid such that you can start from **any** cell and end at **any** cell._ Since the answer may be very large, return it **modulo** `109 + 7`.\n\nTwo paths are considered different if they do not have exactly the same sequence of visited cells.\n\n"}
{"question": "You are given an integer array `nums` and an integer `threshold`.\n\nFind any subarray of `nums` of length `k` such that **every** element in the subarray is **greater** than `threshold / k`.\n\nReturn _the **size** of **any** such subarray_. If there is no such subarray, return `-1`.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n"}
{"question": "You are given two integers `n` and `maxValue`, which are used to describe an **ideal** array.\n\nA **0-indexed** integer array `arr` of length `n` is considered **ideal** if the following conditions hold:\n\n*   Every `arr[i]` is a value from `1` to `maxValue`, for `0 <= i < n`.\n*   Every `arr[i]` is divisible by `arr[i - 1]`, for `0 < i < n`.\n\nReturn _the number of **distinct** ideal arrays of length_ `n`. Since the answer may be very large, return it modulo `109 + 7`.\n\n"}
{"question": "You are given two positive integer arrays `nums` and `numsDivide`. You can delete any number of elements from `nums`.\n\nReturn _the **minimum** number of deletions such that the **smallest** element in_ `nums` _**divides** all the elements of_ `numsDivide`. If this is not possible, return `-1`.\n\nNote that an integer `x` divides `y` if `y % x == 0`.\n\n"}
{"question": "You are given an integer array `rolls` of length `n` and an integer `k`. You roll a `k` sided dice numbered from `1` to `k`, `n` times, where the result of the `ith` roll is `rolls[i]`.\n\nReturn _the length of the **shortest** sequence of rolls that **cannot** be taken from_ `rolls`.\n\nA **sequence of rolls** of length `len` is the result of rolling a `k` sided dice `len` times.\n\n**Note** that the sequence taken does not have to be consecutive as long as it is in order.\n\n"}
{"question": "You are given a **0-indexed** positive integer array `nums` and a positive integer `k`.\n\nA pair of numbers `(num1, num2)` is called **excellent** if the following conditions are satisfied:\n\n*   **Both** the numbers `num1` and `num2` exist in the array `nums`.\n*   The sum of the number of set bits in `num1 OR num2` and `num1 AND num2` is greater than or equal to `k`, where `OR` is the bitwise **OR** operation and `AND` is the bitwise **AND** operation.\n\nReturn _the number of **distinct** excellent pairs_.\n\nTwo pairs `(a, b)` and `(c, d)` are considered distinct if either `a != c` or `b != d`. For example, `(1, 2)` and `(2, 1)` are distinct.\n\n**Note** that a pair `(num1, num2)` such that `num1 == num2` can also be excellent if you have at least **one** occurrence of `num1` in the array.\n\n"}
{"question": "You are given a **0-indexed** integer array `books` of length `n` where `books[i]` denotes the number of books on the `ith` shelf of a bookshelf.\n\nYou are going to take books from a **contiguous** section of the bookshelf spanning from `l` to `r` where `0 <= l <= r < n`. For each index `i` in the range `l <= i < r`, you must take **strictly fewer** books from shelf `i` than shelf `i + 1`.\n\nReturn _the **maximum** number of books you can take from the bookshelf._\n\n"}
{"question": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge.\n\nThe graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from node `i`, then `edges[i] == -1`.\n\nReturn _the length of the **longest** cycle in the graph_. If no cycle exists, return `-1`.\n\nA cycle is a path that starts and ends at the **same** node.\n\n"}
{"question": "A train line going through a city has two routes, the regular route and the express route. Both routes go through the **same** `n + 1` stops labeled from `0` to `n`. Initially, you start on the regular route at stop `0`.\n\nYou are given two **1-indexed** integer arrays `regular` and `express`, both of length `n`. `regular[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the regular route, and `express[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the express route.\n\nYou are also given an integer `expressCost` which represents the cost to transfer from the regular route to the express route.\n\nNote that:\n\n*   There is no cost to transfer from the express route back to the regular route.\n*   You pay `expressCost` **every** time you transfer from the regular route to the express route.\n*   There is no extra cost to stay on the express route.\n\nReturn _a **1-indexed** array_ `costs` _of length_ `n`_, where_ `costs[i]` _is the **minimum** cost to reach stop_ `i` _from stop_ `0`.\n\nNote that a stop can be counted as **reached** from either route.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. In one operation you can replace any element of the array with **any two** elements that **sum** to it.\n\n*   For example, consider `nums = [5,6,7]`. In one operation, we can replace `nums[1]` with `2` and `4` and convert `nums` to `[5,2,4,7]`.\n\nReturn _the minimum number of operations to make an array that is sorted in **non-decreasing** order_.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid` containing **distinct** positive integers.\n\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\n*   The **relative** order of every two elements that are in the same row or column should stay the **same** after the replacements.\n*   The **maximum** number in the matrix after the replacements should be as **small** as possible.\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that `grid[r1][c1] > grid[r2][c2]` where either `r1 == r2` or `c1 == c2`, then it must be true that `grid[r1][c1] > grid[r2][c2]` after the replacements.\n\nFor example, if `grid = [[2, 4, 5], [7, 3, 9]]` then a good replacement could be either `grid = [[1, 2, 3], [2, 1, 4]]` or `grid = [[1, 2, 3], [3, 1, 4]]`.\n\nReturn _the **resulting** matrix._ If there are multiple answers, return **any** of them.\n\n"}
{"question": "We call a positive integer **special** if all of its digits are **distinct**.\n\nGiven a **positive** integer `n`, return _the number of special integers that belong to the interval_ `[1, n]`.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums` and `removeQueries`, both of length `n`. For the `ith` query, the element in `nums` at the index `removeQueries[i]` is removed, splitting `nums` into different segments.\n\nA **segment** is a contiguous sequence of **positive** integers in `nums`. A **segment sum** is the sum of every element in a segment.\n\nReturn _an integer array_ `answer`_, of length_ `n`_, where_ `answer[i]` _is the **maximum** segment sum after applying the_ `ith` _removal._\n\n**Note:** The same index will **not** be removed more than once.\n\n"}
{"question": "You are given an integer array `nums` and a **positive** integer `k`. You can choose any **subsequence** of the array and sum all of its elements together.\n\nWe define the **K-Sum** of the array as the `kth` **largest** subsequence sum that can be obtained (**not** necessarily distinct).\n\nReturn _the K-Sum of the array_.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n**Note** that the empty subsequence is considered to have a sum of `0`.\n\n"}
{"question": "You are given a **positive** integer `k`. You are also given:\n\n*   a 2D integer array `rowConditions` of size `n` where `rowConditions[i] = [abovei, belowi]`, and\n*   a 2D integer array `colConditions` of size `m` where `colConditions[i] = [lefti, righti]`.\n\nThe two arrays contain integers from `1` to `k`.\n\nYou have to build a `k x k` matrix that contains each of the numbers from `1` to `k` **exactly once**. The remaining cells should have the value `0`.\n\nThe matrix should also satisfy the following conditions:\n\n*   The number `abovei` should appear in a **row** that is strictly **above** the row at which the number `belowi` appears for all `i` from `0` to `n - 1`.\n*   The number `lefti` should appear in a **column** that is strictly **left** of the column at which the number `righti` appears for all `i` from `0` to `m - 1`.\n\nReturn _**any** matrix that satisfies the conditions_. If no answer exists, return an empty matrix.\n\n"}
{"question": "You have `n` robots. You are given two **0-indexed** integer arrays, `chargeTimes` and `runningCosts`, both of length `n`. The `ith` robot costs `chargeTimes[i]` units to charge and costs `runningCosts[i]` units to run. You are also given an integer `budget`.\n\nThe **total cost** of running `k` chosen robots is equal to `max(chargeTimes) + k * sum(runningCosts)`, where `max(chargeTimes)` is the largest charge cost among the `k` robots and `sum(runningCosts)` is the sum of running costs among the `k` robots.\n\nReturn _the **maximum** number of **consecutive** robots you can run such that the total cost **does not** exceed_ `budget`.\n\n"}
{"question": "You are given an integer `n`. There are `n` rooms numbered from `0` to `n - 1`.\n\nYou are given a 2D integer array `meetings` where `meetings[i] = [starti, endi]` means that a meeting will be held during the **half-closed** time interval `[starti, endi)`. All the values of `starti` are **unique**.\n\nMeetings are allocated to rooms in the following manner:\n\n1.  Each meeting will take place in the unused room with the **lowest** number.\n2.  If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the **same** duration as the original meeting.\n3.  When a room becomes unused, meetings that have an earlier original **start** time should be given the room.\n\nReturn _the **number** of the room that held the most meetings._ If there are multiple rooms, return _the room with the **lowest** number._\n\nA **half-closed interval** `[a, b)` is the interval between `a` and `b` **including** `a` and **not including** `b`.\n\n"}
{"question": "You are given an integer array `power` where `power[i]` is the power of the `ith` monster.\n\nYou start with `0` mana points, and each day you increase your mana points by `gain` where `gain` initially is equal to `1`.\n\nEach day, after gaining `gain` mana, you can defeat a monster if your mana points are greater than or equal to the power of that monster. When you defeat a monster:\n\n*   your mana points will be reset to `0`, and\n*   the value of `gain` increases by `1`.\n\nReturn _the **minimum** number of days needed to defeat all the monsters._\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`.\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n*   The subsequence is **strictly increasing** and\n*   The difference between adjacent elements in the subsequence is **at most** `k`.\n\nReturn _the length of the **longest** **subsequence** that meets the requirements._\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `transactions`, where `transactions[i] = [costi, cashbacki]`.\n\nThe array describes transactions, where each transaction must be completed exactly once in **some order**. At any given moment, you have a certain amount of `money`. In order to complete transaction `i`, `money >= costi` must hold true. After performing a transaction, `money` becomes `money - costi + cashbacki`.\n\nReturn _the minimum amount of_ `money` _required before any transaction so that all of the transactions can be completed **regardless of the order** of the transactions._\n\n"}
{"question": "You are given an array `words` of size `n` consisting of **non-empty** strings.\n\nWe define the **score** of a string `word` as the **number** of strings `words[i]` such that `word` is a **prefix** of `words[i]`.\n\n*   For example, if `words = [ \"a \", \"ab \", \"abc \", \"cab \"]`, then the score of `\"ab \"` is `2`, since `\"ab \"` is a prefix of both `\"ab \"` and `\"abc \"`.\n\nReturn _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the **sum** of scores of every **non-empty** prefix of_ `words[i]`.\n\n**Note** that a string is considered as a prefix of itself.\n\n"}
{"question": "There is a tree (i.e. a connected, undirected graph with no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges.\n\nYou are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\nA **good path** is a simple path that satisfies the following conditions:\n\n1.  The starting node and the ending node have the **same** value.\n2.  All nodes between the starting node and the ending node have values **less than or equal to** the starting node (i.e. the starting node's value should be the maximum value along the path).\n\nReturn _the number of distinct good paths_.\n\nNote that a path and its reverse are counted as the **same** path. For example, `0 -> 1` is considered to be the same as `1 -> 0`. A single node is also considered as a valid path.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, each of size `n`, and an integer `diff`. Find the number of **pairs** `(i, j)` such that:\n\n*   `0 <= i < j <= n - 1` **and**\n*   `nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff`.\n\nReturn _the **number of pairs** that satisfy the conditions._\n\n"}
{"question": "You are given a string `s` consisting of only lowercase English letters. In one operation, you can:\n\n*   Delete **the entire string** `s`, or\n*   Delete the **first** `i` letters of `s` if the first `i` letters of `s` are **equal** to the following `i` letters in `s`, for any `i` in the range `1 <= i <= s.length / 2`.\n\nFor example, if `s = \"ababc \"`, then in one operation, you could delete the first two letters of `s` to get `\"abc \"`, since the first two letters of `s` and the following two letters of `s` are both equal to `\"ab \"`.\n\nReturn _the **maximum** number of operations needed to delete all of_ `s`.\n\n"}
{"question": "You are given a **0-indexed** `m x n` integer matrix `grid` and an integer `k`. You are currently at position `(0, 0)` and you want to reach position `(m - 1, n - 1)` moving only **down** or **right**.\n\nReturn _the number of paths where the sum of the elements on the path is divisible by_ `k`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`.\n\nYou are given a **0-indexed** integer array `nums` of length `n` where `nums[i]` represents the value of the `ith` node. You are also given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nYou are allowed to **delete** some edges, splitting the tree into multiple connected components. Let the **value** of a component be the sum of **all** `nums[i]` for which node `i` is in the component.\n\nReturn _the **maximum** number of edges you can delete, such that every connected component in the tree has the same value._\n\n"}
{"question": "You are given an integer array `nums` and two integers `minK` and `maxK`.\n\nA **fixed-bound subarray** of `nums` is a subarray that satisfies the following conditions:\n\n*   The **minimum** value in the subarray is equal to `minK`.\n*   The **maximum** value in the subarray is equal to `maxK`.\n\nReturn _the **number** of fixed-bound subarrays_.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "You are given two **0-indexed** arrays `nums` and `cost` consisting each of `n` **positive** integers.\n\nYou can do the following operation **any** number of times:\n\n*   Increase or decrease **any** element of the array `nums` by `1`.\n\nThe cost of doing one operation on the `ith` element is `cost[i]`.\n\nReturn _the **minimum** total cost such that all the elements of the array_ `nums` _become **equal**_.\n\n"}
{"question": "You are given two positive integer arrays `nums` and `target`, of the same length.\n\nIn one operation, you can choose any two **distinct** indices `i` and `j` where `0 <= i, j < nums.length` and:\n\n*   set `nums[i] = nums[i] + 2` and\n*   set `nums[j] = nums[j] - 2`.\n\nTwo arrays are considered to be **similar** if the frequency of each element is the same.\n\nReturn _the minimum number of operations required to make_ `nums` _similar to_ `target`. The test cases are generated such that `nums` can always be similar to `target`.\n\n"}
{"question": "You are given a **0-indexed** array of non-negative integers `nums`. For each integer in `nums`, you must find its respective **second greater** integer.\n\nThe **second greater** integer of `nums[i]` is `nums[j]` such that:\n\n*   `j > i`\n*   `nums[j] > nums[i]`\n*   There exists **exactly one** index `k` such that `nums[k] > nums[i]` and `i < k < j`.\n\nIf there is no such `nums[j]`, the second greater integer is considered to be `-1`.\n\n*   For example, in the array `[1, 2, 4, 3]`, the second greater integer of `1` is `4`, `2` is `3`, and that of `3` and `4` is `-1`.\n\nReturn _an integer array_ `answer`_, where_ `answer[i]` _is the second greater integer of_ `nums[i]`_._\n\n"}
{"question": "You are given the `root` of a **binary tree** with `n` nodes. Each node is assigned a unique value from `1` to `n`. You are also given an array `queries` of size `m`.\n\nYou have to perform `m` **independent** queries on the tree where in the `ith` query you do the following:\n\n*   **Remove** the subtree rooted at the node with the value `queries[i]` from the tree. It is **guaranteed** that `queries[i]` will **not** be equal to the value of the root.\n\nReturn _an array_ `answer` _of size_ `m` _where_ `answer[i]` _is the height of the tree after performing the_ `ith` _query_.\n\n**Note**:\n\n*   The queries are independent, so the tree returns to its **initial** state after each query.\n*   The height of a tree is the **number of edges in the longest simple path** from the root to some node in the tree.\n\n"}
{"question": "You are given an integer array `nums` of size `n` containing **each** element from `0` to `n - 1` (**inclusive**). Each of the elements from `1` to `n - 1` represents an item, and the element `0` represents an empty space.\n\nIn one operation, you can move **any** item to the empty space. `nums` is considered to be sorted if the numbers of all the items are in **ascending** order and the empty space is either at the beginning or at the end of the array.\n\nFor example, if `n = 4`, `nums` is sorted if:\n\n*   `nums = [0,1,2,3]` or\n*   `nums = [1,2,3,0]`\n\n...and considered to be unsorted otherwise.\n\nReturn _the **minimum** number of operations needed to sort_ `nums`.\n\n"}
{"question": "There are some robots and factories on the X-axis. You are given an integer array `robot` where `robot[i]` is the position of the `ith` robot. You are also given a 2D integer array `factory` where `factory[j] = [positionj, limitj]` indicates that `positionj` is the position of the `jth` factory and that the `jth` factory can repair at most `limitj` robots.\n\nThe positions of each robot are **unique**. The positions of each factory are also **unique**. Note that a robot can be **in the same position** as a factory initially.\n\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\n\n**At any moment**, you can set the initial direction of moving for **some** robot. Your target is to minimize the total distance traveled by all the robots.\n\nReturn _the minimum total distance traveled by all the robots_. The test cases are generated such that all the robots can be repaired.\n\n**Note that**\n\n*   All robots move at the same speed.\n*   If two robots move in the same direction, they will never collide.\n*   If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.\n*   If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.\n*   If the robot moved from a position `x` to a position `y`, the distance it moved is `|y - x|`.\n\n"}
{"question": "You are given a string, `message`, and a positive integer, `limit`.\n\nYou must **split** `message` into one or more **parts** based on `limit`. Each resulting part should have the suffix `\" \"`, where `\"b \"` is to be **replaced** with the total number of parts and `\"a \"` is to be **replaced** with the index of the part, starting from `1` and going up to `b`. Additionally, the length of each resulting part (including its suffix) should be **equal** to `limit`, except for the last part whose length can be **at most** `limit`.\n\nThe resulting parts should be formed such that when their suffixes are removed and they are all concatenated **in order**, they should be equal to `message`. Also, the result should contain as few parts as possible.\n\nReturn _the parts_ `message` _would be split into as an array of strings_. If it is impossible to split `message` as required, return _an empty array_.\n\n"}
{"question": "You are given a string `s` and a **positive** integer `k`.\n\nSelect a set of **non-overlapping** substrings from the string `s` that satisfy the following conditions:\n\n*   The **length** of each substring is **at least** `k`.\n*   Each substring is a **palindrome**.\n\nReturn _the **maximum** number of substrings in an optimal selection_.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "You are given a string `s` that consists of the digits `'1'` to `'9'` and two integers `k` and `minLength`.\n\nA partition of `s` is called **beautiful** if:\n\n*   `s` is partitioned into `k` non-intersecting substrings.\n*   Each substring has a length of **at least** `minLength`.\n*   Each substring starts with a **prime** digit and ends with a **non-prime** digit. Prime digits are `'2'`, `'3'`, `'5'`, and `'7'`, and the rest of the digits are non-prime.\n\nReturn _the number of **beautiful** partitions of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. The root of the tree is the node labeled `0`.\n\nEach node has an associated **value**. You are given an array `values` of length `n`, where `values[i]` is the **value** of the `ith` node.\n\nSelect any two **non-overlapping** subtrees. Your **score** is the bitwise XOR of the sum of the values within those subtrees.\n\nReturn _the_ _**maximum**_ _possible **score** you can achieve_. _If it is impossible to find two nonoverlapping subtrees_, return `0`.\n\n**Note** that:\n\n*   The **subtree** of a node is the tree consisting of that node and all of its descendants.\n*   Two subtrees are **non-overlapping** if they do not share **any common** node.\n\n"}
{"question": "Given a string of digits `s`, return _the number of **palindromic subsequences** of_ `s` _having length_ `5`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n**Note:**\n\n*   A string is **palindromic** if it reads the same forward and backward.\n*   A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n"}
{"question": "You are given an array `nums` of size `n` consisting of **distinct** integers from `1` to `n` and a positive integer `k`.\n\nReturn _the number of non-empty subarrays in_ `nums` _that have a **median** equal to_ `k`.\n\n**Note**:\n\n*   The median of an array is the **middle** element after sorting the array in **ascending** order. If the array is of even length, the median is the **left** middle element.\n    *   For example, the median of `[2,3,1,4]` is `2`, and the median of `[8,4,3,5,1]` is `4`.\n*   A subarray is a contiguous part of an array.\n\n"}
{"question": "You are given a positive integer `n` representing the number of nodes in an **undirected** graph. The nodes are labeled from `1` to `n`.\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [ai, bi]` indicates that there is a **bidirectional** edge between nodes `ai` and `bi`. **Notice** that the given graph may be disconnected.\n\nDivide the nodes of the graph into `m` groups (**1-indexed**) such that:\n\n*   Each node in the graph belongs to exactly one group.\n*   For every pair of nodes in the graph that are connected by an edge `[ai, bi]`, if `ai` belongs to the group with index `x`, and `bi` belongs to the group with index `y`, then `|y - x| = 1`.\n\nReturn _the maximum number of groups (i.e., maximum_ `m`_) into which you can divide the nodes_. Return `-1` _if it is impossible to group the nodes with the given conditions_.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums1` and `nums2`, of equal length `n`.\n\nIn one operation, you can swap the values of any two indices of `nums1`. The **cost** of this operation is the **sum** of the indices.\n\nFind the **minimum** total cost of performing the given operation **any** number of times such that `nums1[i] != nums2[i]` for all `0 <= i <= n - 1` after performing all the operations.\n\nReturn _the **minimum total cost** such that_ `nums1` and `nums2` _satisfy the above condition_. In case it is not possible, return `-1`.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid` and an array `queries` of size `k`.\n\nFind an array `answer` of size `k` such that for each integer `queries[i]` you start in the **top left** cell of the matrix and repeat the following process:\n\n*   If `queries[i]` is **strictly** greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any **adjacent** cell in all `4` directions: up, down, left, and right.\n*   Otherwise, you do not get any points, and you end this process.\n\nAfter the process, `answer[i]` is the **maximum** number of points you can get. **Note** that for each query you are allowed to visit the same cell **multiple** times.\n\nReturn _the resulting array_ `answer`.\n\n"}
{"question": "There is an **undirected** graph consisting of `n` nodes numbered from `1` to `n`. You are given the integer `n` and a **2D** array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi`. The graph can be disconnected.\n\nYou can add **at most** two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.\n\nReturn `true` _if it is possible to make the degree of each node in the graph even, otherwise return_ `false`_._\n\nThe degree of a node is the number of edges connected to it.\n\n"}
{"question": "You are given an integer `n`. There is a **complete binary tree** with `2n - 1` nodes. The root of that tree is the node with the value `1`, and every node with a value `val` in the range `[1, 2n - 1 - 1]` has two children where:\n\n*   The left node has the value `2 * val`, and\n*   The right node has the value `2 * val + 1`.\n\nYou are also given a 2D integer array `queries` of length `m`, where `queries[i] = [ai, bi]`. For each query, solve the following problem:\n\n1.  Add an edge between the nodes with values `ai` and `bi`.\n2.  Find the length of the cycle in the graph.\n3.  Remove the added edge between nodes with values `ai` and `bi`.\n\n**Note** that:\n\n*   A **cycle** is a path that starts and ends at the same node, and each edge in the path is visited only once.\n*   The length of a cycle is the number of edges visited in the cycle.\n*   There could be multiple edges between two nodes in the tree after adding the edge of the query.\n\nReturn _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is the answer to the_ `ith` _query._\n\n"}
{"question": "You are given an array `nums` consisting of **positive** integers and an integer `k`.\n\n**Partition** the array into two ordered **groups** such that each element is in exactly **one** group. A partition is called great if the **sum** of elements of each group is greater than or equal to `k`.\n\nReturn _the number of **distinct** great partitions_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nTwo partitions are considered distinct if some element `nums[i]` is in different groups in the two partitions.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` and a positive integer `k`.\n\nWe call an index `i` **k-big** if the following conditions are satisfied:\n\n*   There exist at least `k` different indices `idx1` such that `idx1 < i` and `nums[idx1] < nums[i]`.\n*   There exist at least `k` different indices `idx2` such that `idx2 > i` and `nums[idx2] < nums[i]`.\n\nReturn _the number of k-big indices_.\n\n"}
{"question": "You are given an integer array `nums` and a **positive** integer `k`.\n\nThe **frequency score** of an array is the sum of the **distinct** values in the array raised to the power of their **frequencies**, taking the sum **modulo** `109 + 7`.\n\n*   For example, the frequency score of the array `[5,4,5,7,4,4]` is `(43 + 52 + 71) modulo (109 + 7) = 96`.\n\nReturn _the **maximum** frequency score of a **subarray** of size_ `k` _in_ `nums`. You should maximize the value under the modulo and not the actual value.\n\nA **subarray** is a contiguous part of an array.\n\n"}
{"question": "You are given a **0-indexed** integer array `stations` of length `n`, where `stations[i]` represents the number of power stations in the `ith` city.\n\nEach power station can provide power to every city in a fixed **range**. In other words, if the range is denoted by `r`, then a power station at city `i` can provide power to all cities `j` such that `|i - j| <= r` and `0 <= i, j <= n - 1`.\n\n*   Note that `|x|` denotes **absolute** value. For example, `|7 - 5| = 2` and `|3 - 10| = 7`.\n\nThe **power** of a city is the total number of power stations it is being provided power from.\n\nThe government has sanctioned building `k` more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.\n\nGiven the two integers `r` and `k`, return _the **maximum possible minimum power** of a city, if the additional power stations are built optimally._\n\n**Note** that you can build the `k` power stations in multiple cities.\n\n"}
{"question": "There are `k` workers who want to move `n` boxes from an old warehouse to a new one. You are given the two integers `n` and `k`, and a 2D integer array `time` of size `k x 4` where `time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi]`.\n\nThe warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all `k` workers are waiting on the left side of the bridge. To move the boxes, the `ith` worker (**0-indexed**) can :\n\n*   Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in `leftToRighti` minutes.\n*   Pick a box from the old warehouse and return to the bridge in `pickOldi` minutes. Different workers can pick up their boxes simultaneously.\n*   Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in `rightToLefti` minutes.\n*   Put the box in the new warehouse and return to the bridge in `putNewi` minutes. Different workers can put their boxes simultaneously.\n\nA worker `i` is **less efficient** than a worker `j` if either condition is met:\n\n*   `leftToRighti + rightToLefti > leftToRightj + rightToLeftj`\n*   `leftToRighti + rightToLefti == leftToRightj + rightToLeftj` and `i > j`\n\nThe following rules regulate the movement of the workers through the bridge :\n\n*   If a worker `x` reaches the bridge while another worker `y` is crossing the bridge, `x` waits at their side of the bridge.\n*   If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with **the lowest efficiency** crosses first.\n*   If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with **the lowest efficiency** crosses first.\n\nReturn _the instance of time at which the last worker **reaches the left bank** of the river after all n boxes have been put in the new warehouse_.\n\n"}
{"question": "There are `n` persons numbered from `0` to `n - 1` and a door. Each person can enter or exit through the door once, taking one second.\n\nYou are given a **non-decreasing** integer array `arrival` of size `n`, where `arrival[i]` is the arrival time of the `ith` person at the door. You are also given an array `state` of size `n`, where `state[i]` is `0` if person `i` wants to enter through the door or `1` if they want to exit through the door.\n\nIf two or more persons want to use the door at the **same** time, they follow the following rules:\n\n*   If the door was **not** used in the previous second, then the person who wants to **exit** goes first.\n*   If the door was used in the previous second for **entering**, the person who wants to enter goes first.\n*   If the door was used in the previous second for **exiting**, the person who wants to **exit** goes first.\n*   If multiple persons want to go in the same direction, the person with the **smallest** index goes first.\n\nReturn _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the second at which the_ `ith` _person crosses the door_.\n\n**Note** that:\n\n*   Only one person can cross the door at each second.\n*   A person may arrive at the door and wait without entering or exiting to follow the mentioned rules.\n\n"}
{"question": "There exists an undirected and initially unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given the integer `n` and a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nEach node has an associated price. You are given an integer array `price`, where `price[i]` is the price of the `ith` node.\n\nThe **price sum** of a given path is the sum of the prices of all nodes lying on that path.\n\nThe tree can be rooted at any node `root` of your choice. The incurred **cost** after choosing `root` is the difference between the maximum and minimum **price sum** amongst all paths starting at `root`.\n\nReturn _the **maximum** possible **cost**_ _amongst all possible root choices_.\n\n"}
{"question": "There exists an infinitely large grid. You are currently at point `(1, 1)`, and you need to reach the point `(targetX, targetY)` using a finite number of steps.\n\nIn one **step**, you can move from point `(x, y)` to any one of the following points:\n\n*   `(x, y - x)`\n*   `(x - y, y)`\n*   `(2 * x, y)`\n*   `(x, 2 * y)`\n\nGiven two integers `targetX` and `targetY` representing the X-coordinate and Y-coordinate of your final position, return `true` _if you can reach the point from_ `(1, 1)` _using some number of steps, and_ `false` _otherwise_.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`.\n\nSplit the array into some number of non-empty subarrays. The **cost** of a split is the sum of the **importance value** of each subarray in the split.\n\nLet `trimmed(subarray)` be the version of the subarray where all numbers which appear only once are removed.\n\n*   For example, `trimmed([3,1,2,4,3,4]) = [3,4,3,4].`\n\nThe **importance value** of a subarray is `k + trimmed(subarray).length`.\n\n*   For example, if a subarray is `[1,2,3,3,3,4,4]`, then trimmed(`[1,2,3,3,3,4,4]) = [3,3,3,4,4].`The importance value of this subarray will be `k + 5`.\n\nReturn _the minimum possible cost of a split of_ `nums`.\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "You have `k` bags. You are given a **0-indexed** integer array `weights` where `weights[i]` is the weight of the `ith` marble. You are also given the integer `k.`\n\nDivide the marbles into the `k` bags according to the following rules:\n\n*   No bag is empty.\n*   If the `ith` marble and `jth` marble are in a bag, then all marbles with an index between the `ith` and `jth` indices should also be in that same bag.\n*   If a bag consists of all the marbles with an index from `i` to `j` inclusively, then the cost of the bag is `weights[i] + weights[j]`.\n\nThe **score** after distributing the marbles is the sum of the costs of all the `k` bags.\n\nReturn _the **difference** between the **maximum** and **minimum** scores among marble distributions_.\n\n"}
{"question": "Given a **0-indexed** integer array `nums` of size `n` containing all numbers from `1` to `n`, return _the number of increasing quadruplets_.\n\nA quadruplet `(i, j, k, l)` is increasing if:\n\n*   `0 <= i < j < k < l < n`, and\n*   `nums[i] < nums[k] < nums[j] < nums[l]`.\n\n"}
{"question": "You have two fruit baskets containing `n` fruits each. You are given two **0-indexed** integer arrays `basket1` and `basket2` representing the cost of fruit in each basket. You want to make both baskets **equal**. To do so, you can use the following operation as many times as you want:\n\n*   Chose two indices `i` and `j`, and swap the `ith` fruit of `basket1` with the `jth` fruit of `basket2`.\n*   The cost of the swap is `min(basket1[i],basket2[j])`.\n\nTwo baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.\n\nReturn _the minimum cost to make both the baskets equal or_ `-1` _if impossible._\n\n"}
{"question": "You are given two strings `s` and `t`.\n\nYou are allowed to remove any number of characters from the string `t`.\n\nThe score of the string is `0` if no characters are removed from the string `t`, otherwise:\n\n*   Let `left` be the minimum index among all removed characters.\n*   Let `right` be the maximum index among all removed characters.\n\nThen the score of the string is `right - left + 1`.\n\nReturn _the minimum possible score to make_ `t` _a subsequence of_ `s`_._\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).\n\n"}
{"question": "You are given two **0-indexed** arrays `nums1` and `nums2` and a 2D array `queries` of queries. There are three types of queries:\n\n1.  For a query of type 1, `queries[i] = [1, l, r]`. Flip the values from `0` to `1` and from `1` to `0` in `nums1` from index `l` to index `r`. Both `l` and `r` are **0-indexed**.\n2.  For a query of type 2, `queries[i] = [2, p, 0]`. For every index `0 <= i < n`, set `nums2[i] = nums2[i] + nums1[i] * p`.\n3.  For a query of type 3, `queries[i] = [3, 0, 0]`. Find the sum of the elements in `nums2`.\n\nReturn _an array containing all the answers to the third type queries._\n\n"}
{"question": "We define the `lcp` matrix of any **0-indexed** string `word` of `n` lowercase English letters as an `n x n` grid such that:\n\n*   `lcp[i][j]` is equal to the length of the **longest common prefix** between the substrings `word[i,n-1]` and `word[j,n-1]`.\n\nGiven an `n x n` matrix `lcp`, return the alphabetically smallest string `word` that corresponds to `lcp`. If there is no such string, return an empty string.\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"aabd \"` is lexicographically smaller than `\"aaca \"` because the first position they differ is at the third letter, and `'b'` comes before `'c'`.\n\n"}
{"question": "You are given a `m x n` matrix `grid` consisting of **non-negative** integers where `grid[row][col]` represents the **minimum** time required to be able to visit the cell `(row, col)`, which means you can visit the cell `(row, col)` only when the time you visit it is greater than or equal to `grid[row][col]`.\n\nYou are standing in the **top-left** cell of the matrix in the `0th` second, and you must move to **any** adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n\nReturn _the **minimum** time required in which you can visit the bottom-right cell of the matrix_. If you cannot visit the bottom-right cell, then return `-1`.\n\n"}
{"question": "Alice has an undirected tree with `n` nodes labeled from `0` to `n - 1`. The tree is represented as a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nAlice wants Bob to find the root of the tree. She allows Bob to make several **guesses** about her tree. In one guess, he does the following:\n\n*   Chooses two **distinct** integers `u` and `v` such that there exists an edge `[u, v]` in the tree.\n*   He tells Alice that `u` is the **parent** of `v` in the tree.\n\nBob's guesses are represented by a 2D integer array `guesses` where `guesses[j] = [uj, vj]` indicates Bob guessed `uj` to be the parent of `vj`.\n\nAlice being lazy, does not reply to each of Bob's guesses, but just says that **at least** `k` of his guesses are `true`.\n\nGiven the 2D integer arrays `edges`, `guesses` and the integer `k`, return _the **number of possible nodes** that can be the root of Alice's tree_. If there is no such tree, return `0`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`.\n\nA **split** at an index `i` where `0 <= i <= n - 2` is called **valid** if the product of the first `i + 1` elements and the product of the remaining elements are coprime.\n\n*   For example, if `nums = [2, 3, 3]`, then a split at the index `i = 0` is valid because `2` and `9` are coprime, while a split at the index `i = 1` is not valid because `6` and `3` are not coprime. A split at the index `i = 2` is not valid because `i == n - 1`.\n\nReturn _the smallest index_ `i` _at which the array can be split validly or_ `-1` _if there is no such split_.\n\nTwo values `val1` and `val2` are coprime if `gcd(val1, val2) == 1` where `gcd(val1, val2)` is the greatest common divisor of `val1` and `val2`.\n\n"}
{"question": "There is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points.\n\nReturn _the number of ways you can earn **exactly**_ `target` _points in the exam_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n**Note** that questions of the same type are indistinguishable.\n\n*   For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.\n\n"}
{"question": "There is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`.\n\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n\nReturn _the minimum time during which the computer should be turned on to complete all tasks_.\n\n"}
{"question": "There exists an undirected and unrooted tree with `n` nodes indexed from `0` to `n - 1`. You are given an integer `n` and a 2D integer array edges of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an array `coins` of size `n` where `coins[i]` can be either `0` or `1`, where `1` indicates the presence of a coin in the vertex `i`.\n\nInitially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times:\n\n*   Collect all the coins that are at a distance of at most `2` from the current vertex, or\n*   Move to any adjacent vertex in the tree.\n\nFind _the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex_.\n\nNote that if you pass an edge several times, you need to count it into the answer several times.\n\n"}
{"question": "There are `n` hens and `m` grains on a line. You are given the initial positions of the hens and the grains in two integer arrays `hens` and `grains` of size `n` and `m` respectively.\n\nAny hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains.\n\nIn `1` second, a hen can move right or left by `1` unit. The hens can move simultaneously and independently of each other.\n\nReturn _the **minimum** time to eat all grains if the hens act optimally._\n\n"}
{"question": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1`. The edges in the graph are represented by a given 2D integer array `edges`, where `edges[i] = [ui, vi]` denotes an edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\n\nReturn _the length of the **shortest** cycle in the graph_. If no cycle exists, return `-1`.\n\nA cycle is a path that starts and ends at the same node, and each edge in the path is used only once.\n\n"}
{"question": "You are given an integer `n` and an integer `p` in the range `[0, n - 1]`. Representing a **0-indexed** array `arr` of length `n` where all positions are set to `0`'s, except position `p` which is set to `1`.\n\nYou are also given an integer array `banned` containing some positions from the array. For the **i****th** position in `banned`, `arr[banned[i]] = 0`, and `banned[i] != p`.\n\nYou can perform **multiple** operations on `arr`. In an operation, you can choose a **subarray** with size `k` and **reverse** the subarray. However, the `1` in `arr` should never go to any of the positions in `banned`. In other words, after each operation `arr[banned[i]]` **remains** `0`.\n\n_Return an array_ `ans` _where_ _for each_ `i` _from_ `[0, n - 1]`, `ans[i]` _is the **minimum** number of reverse operations needed to bring the_ `1` _to position_ `i` _in arr_, _or_ `-1` _if it is impossible_.\n\n*   A **subarray** is a contiguous **non-empty** sequence of elements within an array.\n*   The values of `ans[i]` are independent for all `i`'s.\n*   The **reverse** of an array is an array containing the values in **reverse order**.\n\n"}
{"question": "You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n"}
{"question": "Given a string `s`, find the length of the **longest** **substring** without repeating characters.\n\n"}
{"question": "Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`.\n\n"}
{"question": "The string `\"PAYPALISHIRING \"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: `\"PAHNAPLSIIGYIR \"`\n\nWrite the code that will take a string and make this conversion given a number of rows:\n\nstring convert(string s, int numRows);\n\n"}
{"question": "Given a signed 32-bit integer `x`, return `x` _with its digits reversed_. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.\n\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\n\n"}
{"question": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n1.  Read in and ignore any leading whitespace.\n2.  Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n3.  Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n4.  Convert these digits into an integer (i.e. `\"123 \" -> 123`, `\"0032 \" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).\n5.  If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.\n6.  Return the integer as the final result.\n\n**Note:**\n\n*   Only the space character `' '` is considered a whitespace character.\n*   **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.\n\n"}
{"question": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n**Symbol**       **Value**\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.\n*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.\n*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n\n"}
{"question": "Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.\n\n"}
{"question": "Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`.\n\nReturn _the sum of the three integers_.\n\nYou may assume that each input would have exactly one solution.\n\n"}
{"question": "Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**.\n\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n"}
{"question": "Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that:\n\n*   `0 <= a, b, c, d < n`\n*   `a`, `b`, `c`, and `d` are **distinct**.\n*   `nums[a] + nums[b] + nums[c] + nums[d] == target`\n\nYou may return the answer in **any order**.\n\n"}
{"question": "Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.\n\n"}
{"question": "Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_.\n\n"}
{"question": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\n"}
{"question": "Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.\n\nReturn _the **quotient** after dividing_ `dividend` _by_ `divisor`.\n\n**Note:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[-231, 231 - 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.\n\n"}
{"question": "A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order.\n\n*   For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`.\n\nThe **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\n*   For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`.\n*   Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`.\n*   While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement.\n\nGiven an array of integers `nums`, _find the next permutation of_ `nums`.\n\nThe replacement must be **[in place](http://en.wikipedia.org/wiki/In-place_algorithm)** and use only constant extra memory.\n\n"}
{"question": "There is an integer array `nums` sorted in ascending order (with **distinct** values).\n\nPrior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` **after** the possible rotation and an integer `target`, return _the index of_ `target` _if it is in_ `nums`_, or_ `-1` _if it is not in_ `nums`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n"}
{"question": "Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value.\n\nIf `target` is not found in the array, return `[-1, -1]`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n"}
{"question": "Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:\n\n1.  Each row must contain the digits `1-9` without repetition.\n2.  Each column must contain the digits `1-9` without repetition.\n3.  Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.\n\n**Note:**\n\n*   A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n*   Only the filled cells need to be validated according to the mentioned rules.\n\n"}
{"question": "The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula:\n\n*   `countAndSay(1) = \"1 \"`\n*   `countAndSay(n)` is the way you would \"say \" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\n\nTo determine how you \"say \" a digit string, split it into the **minimal** number of substrings such that each substring contains exactly **one** unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\n\nFor example, the saying and conversion for digit string `\"3322251 \"`:\n\nGiven a positive integer `n`, return _the_ `nth` _term of the **count-and-say** sequence_.\n\n"}
{"question": "Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of_ `candidates` _where the chosen numbers sum to_ `target`_._ You may return the combinations in **any order**.\n\nThe **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\n\nThe test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.\n\n"}
{"question": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.\n\nEach number in `candidates` may only be used **once** in the combination.\n\n**Note:** The solution set must not contain duplicate combinations.\n\n"}
{"question": "Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.\n\n**Note:** You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n"}
{"question": "You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`.\n\nEach element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where:\n\n*   `0 <= j <= nums[i]` and\n*   `i + j < n`\n\nReturn _the minimum number of jumps to reach_ `nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`.\n\n"}
{"question": "Given an array `nums` of distinct integers, return _all the possible permutations_. You can return the answer in **any order**.\n\n"}
{"question": "Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._\n\n"}
{"question": "You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise).\n\nYou have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm), which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation.\n\n"}
{"question": "Given an array of strings `strs`, group **the anagrams** together. You can return the answer in **any order**.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n"}
{"question": "Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which calculates `x` raised to the power `n` (i.e., `xn`).\n\n"}
{"question": "Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_.\n\n"}
{"question": "Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_.\n\n"}
{"question": "You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position.\n\nReturn `true` _if you can reach the last index, or_ `false` _otherwise_.\n\n"}
{"question": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_.\n\n"}
{"question": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn `intervals` _after the insertion_.\n\n"}
{"question": "Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.\n\n"}
{"question": "Given the `head` of a linked list, rotate the list to the right by `k` places.\n\n"}
{"question": "There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\nGiven the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_.\n\nThe test cases are generated so that the answer will be less than or equal to `2 * 109`.\n\n"}
{"question": "You are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\nAn obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.\n\nReturn _the number of possible unique paths that the robot can take to reach the bottom-right corner_.\n\nThe testcases are generated so that the answer will be less than or equal to `2 * 109`.\n\n"}
{"question": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\n\n**Note:** You can only move either down or right at any point in time.\n\n"}
{"question": "Given a string `path`, which is an **absolute path** (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified **canonical path**.\n\nIn a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.\n\nThe **canonical path** should have the following format:\n\n*   The path starts with a single slash `'/'`.\n*   Any two directories are separated by a single slash `'/'`.\n*   The path does not end with a trailing `'/'`.\n*   The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)\n\nReturn _the simplified **canonical path**_.\n\n"}
{"question": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s.\n\nYou must do it [in place](https://en.wikipedia.org/wiki/In-place_algorithm).\n\n"}
{"question": "You are given an `m x n` integer matrix `matrix` with the following two properties:\n\n*   Each row is sorted in non-decreasing order.\n*   The first integer of each row is greater than the last integer of the previous row.\n\nGiven an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_.\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n"}
{"question": "Given an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.\n\n"}
{"question": "Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[1, n]`.\n\nYou may return the answer in **any order**.\n\n"}
{"question": "Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n"}
{"question": "Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_.\n\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\n"}
{"question": "Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements.\n\nReturn `k` _after placing the final result in the first_ `k` _slots of_ `nums`.\n\nDo **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n"}
{"question": "There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values).\n\nBefore being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.\n\nGiven the array `nums` **after** the rotation and an integer `target`, return `true` _if_ `target` _is in_ `nums`_, or_ `false` _if it is not in_ `nums`_._\n\nYou must decrease the overall operation steps as much as possible.\n\n"}
{"question": "Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_.\n\n"}
{"question": "Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`.\n\nYou should **preserve** the original relative order of the nodes in each of the two partitions.\n\n"}
{"question": "An **n-bit gray code sequence** is a sequence of `2n` integers where:\n\n*   Every integer is in the **inclusive** range `[0, 2n - 1]`,\n*   The first integer is `0`,\n*   An integer appears **no more than once** in the sequence,\n*   The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and\n*   The binary representation of the **first** and **last** integers differs by **exactly one bit**.\n\nGiven an integer `n`, return _any valid **n-bit gray code sequence**_.\n\n"}
{"question": "Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets_ _(the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.\n\n"}
{"question": "A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n'A' ->  \"1 \"\n'B' ->  \"2 \"\n...\n'Z' ->  \"26 \"\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106 \"` can be mapped into:\n\n*   `\"AAJF \"` with the grouping `(1 1 10 6)`\n*   `\"KJF \"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06 \"` cannot be mapped into `'F'` since `\"6 \"` is different from `\"06 \"`.\n\nGiven a string `s` containing only digits, return _the **number** of ways to **decode** it_.\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n"}
{"question": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_.\n\n"}
{"question": "A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros.\n\n*   For example, `\"0.1.2.201 \"` and `\"192.168.1.1 \"` are **valid** IP addresses, but `\"0.011.255.245 \"`, `\"192.168.1.312 \"` and `\"192.168@1.1 \"` are **invalid** IP addresses.\n\nGiven a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into_ `s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order.\n\n"}
{"question": "Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`. Return the answer in **any order**.\n\n"}
{"question": "Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly_ `n` _nodes of unique values from_ `1` _to_ `n`.\n\n"}
{"question": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`.\n\nAn **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:\n\n*   `s = s1 + s2 + ... + sn`\n*   `t = t1 + t2 + ... + tm`\n*   `|n - m| <= 1`\n*   The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n**Note:** `a + b` is the concatenation of strings `a` and `b`.\n\n"}
{"question": "Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_.\n\nA **valid BST** is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n"}
{"question": "You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_.\n\n"}
{"question": "Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level).\n\n"}
{"question": "Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between).\n\n"}
{"question": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_.\n\n"}
{"question": "Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_.\n\n"}
{"question": "Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root).\n\n"}
{"question": "Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.\n\n"}
{"question": "Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals_ `targetSum`_. Each path should be returned as a list of the node **values**, not node references_.\n\nA **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.\n\n"}
{"question": "Given the `root` of a binary tree, flatten the tree into a \"linked list \":\n\n*   The \"linked list \" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n*   The \"linked list \" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.\n\n"}
{"question": "You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\nstruct Node {\n  int val;\n  Node \\*left;\n  Node \\*right;\n  Node \\*next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n"}
{"question": "Given a binary tree\n\nstruct Node {\n  int val;\n  Node \\*left;\n  Node \\*right;\n  Node \\*next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n"}
{"question": "Given a `triangle` array, return _the minimum path sum from top to bottom_.\n\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.\n\n"}
{"question": "You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**.\n\nFind and return _the **maximum** profit you can achieve_.\n\n"}
{"question": "Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._\n\nYou must write an algorithm that runs in `O(n)` time.\n\n"}
{"question": "You are given the `root` of a binary tree containing digits from `0` to `9` only.\n\nEach root-to-leaf path in the tree represents a number.\n\n*   For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\nReturn _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer.\n\nA **leaf** node is a node with no children.\n\n"}
{"question": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all regions that are 4-directionally surrounded by_ `'X'`.\n\nA region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded region.\n\n"}
{"question": "Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of_ `s`.\n\n"}
{"question": "Given a reference of a node in a **[connected](https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph)** undirected graph.\n\nReturn a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the graph.\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors.\n\nclass Node {\n    public int val;\n    public List neighbors;\n}\n\n**Test case format:**\n\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list.\n\n**An adjacency list** is a collection of unordered **lists** used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\n\nThe given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph.\n\n"}
{"question": "There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.\n\nGiven two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be **unique**\n\n"}
{"question": "Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n"}
{"question": "A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.\n\nConstruct a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**.\n\nFor example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.\n\nReturn _the head of the copied linked list_.\n\nThe linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:\n\n*   `val`: an integer representing `Node.val`\n*   `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.\n\nYour code will **only** be given the `head` of the original linked list.\n\n"}
{"question": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n"}
{"question": "Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return_ `null`.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**.\n\n**Do not modify** the linked list.\n\n"}
{"question": "You are given the head of a singly linked-list. The list can be represented as:\n\nL0 -> L1 -> ... -> Ln - 1 -> Ln\n\n_Reorder the list to be on the following form:_\n\nL0 -> Ln -> L1 -> Ln - 1 -> L2 -> Ln - 2 -> ...\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\n"}
{"question": "Design a data structure that follows the constraints of a **[Least Recently Used (LRU) cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.\n\nImplement the `LRUCache` class:\n\n*   `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.\n*   `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n*   `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.\n\nThe functions `get` and `put` must each run in `O(1)` average time complexity.\n\n"}
{"question": "Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_.\n\nThe steps of the **insertion sort** algorithm:\n\n1.  Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n2.  At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n3.  It repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n"}
{"question": "Given the `head` of a linked list, return _the list after sorting it in **ascending order**_.\n\n"}
{"question": "You are given an array of strings `tokens` that represents an arithmetic expression in a [Reverse Polish Notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\n\nEvaluate the expression. Return _an integer that represents the value of the expression_.\n\n**Note** that:\n\n*   The valid operators are `'+'`, `'-'`, `'*'`, and `'/'`.\n*   Each operand may be an integer or another expression.\n*   The division between two integers always **truncates toward zero**.\n*   There will not be any division by zero.\n*   The input represents a valid arithmetic expression in a reverse polish notation.\n*   The answer and all the intermediate calculations can be represented in a **32-bit** integer.\n\n"}
{"question": "Given an input string `s`, reverse the order of the **words**.\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.\n\nReturn _a string of the words in reverse order concatenated by a single space._\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n"}
{"question": "Given an integer array `nums`, find a subarray that has the largest product, and return _the product_.\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n"}
{"question": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n*   `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n*   `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_.\n\nYou must write an algorithm that runs in `O(log n) time.`\n\n"}
{"question": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nImplement the `MinStack` class:\n\n*   `MinStack()` initializes the stack object.\n*   `void push(int val)` pushes the element `val` onto the stack.\n*   `void pop()` removes the element on the top of the stack.\n*   `int top()` gets the top element of the stack.\n*   `int getMin()` retrieves the minimum element in the stack.\n\nYou must implement a solution with `O(1)` time complexity for each function.\n\n"}
{"question": "Given the `root` of a binary tree, turn the tree upside down and return _the new root_.\n\nYou can turn a binary tree upside down with the following steps:\n\n1.  The original left child becomes the new root.\n2.  The original root becomes the new right child.\n3.  The original right child becomes the new left child.\n\nThe mentioned steps are done level by level. It is **guaranteed** that every right node has a sibling (a left node with the same parent) and has no children.\n\n"}
{"question": "Given a string `s`, return _the length of the longest_ _substring_ _that contains at most **two distinct characters**_.\n\n"}
{"question": "Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.\n\nA string `s` is said to be one distance apart from a string `t` if you can:\n\n*   Insert **exactly one** character into `s` to get `t`.\n*   Delete **exactly one** character from `s` to get `t`.\n*   Replace **exactly one** character of `s` with **a different character** to get `t`.\n\n"}
{"question": "A peak element is an element that is strictly greater than its neighbors.\n\nGiven a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**.\n\nYou may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\n\nYou must write an algorithm that runs in `O(log n)` time.\n\n"}
{"question": "Given two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`. Each revision consists of **digits** and may contain leading **zeros**. Every revision contains **at least one character**. Revisions are **0-indexed from left to right**, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right order**. Revisions are compared using their **integer value ignoring any leading zeros**. This means that revisions `1` and `001` are considered **equal**. If a version number does not specify a revision at an index, then **treat the revision as `0`**. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.\n\n_Return the following:_\n\n*   If `version1 < version2`, return `-1`.\n*   If `version1 > version2`, return `1`.\n*   Otherwise, return `0`.\n\n"}
{"question": "Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_.\n\nIf the fractional part is repeating, enclose the repeating part in parentheses.\n\nIf multiple answers are possible, return **any of them**.\n\nIt is **guaranteed** that the length of the answer string is less than `104` for all the given inputs.\n\n"}
{"question": "Given a **1-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`.\n\nReturn _the indices of the two numbers,_ `index1` _and_ `index2`_, **added by one** as an integer array_ `[index1, index2]` _of length 2._\n\nThe tests are generated such that there is **exactly one solution**. You **may not** use the same element twice.\n\nYour solution must use only constant extra space.\n\n"}
{"question": "Given an integer `n`, return _the number of trailing zeroes in_ `n!`.\n\nNote that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`.\n\n"}
{"question": "Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):\n\n*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n*   `int next()` Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.\n\n"}
{"question": "Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n"}
{"question": "Given a character array `s`, reverse the order of the **words**.\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by a single space.\n\nYour code must solve the problem **in-place,** i.e. without allocating extra space.\n\n"}
{"question": "The **DNA sequence** is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.\n\n*   For example, `\"ACGAATTCCG \"` is a **DNA sequence**.\n\nWhen studying **DNA**, it is useful to identify repeated sequences within the DNA.\n\nGiven a string `s` that represents a **DNA sequence**, return all the **`10`\\-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**.\n\n"}
{"question": "Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n"}
{"question": "Given a text file `file.txt`, transpose its content.\n\nYou may assume that each row has the same number of columns, and each field is separated by the `' '` character.\n\n"}
{"question": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.\n\n"}
{"question": "Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_.\n\n"}
{"question": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return _the number of islands_.\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\n"}
{"question": "Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_.\n\n"}
{"question": "Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`.\n\n"}
{"question": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n"}
{"question": "A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as \"try \") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n\n*   `Trie()` Initializes the trie object.\n*   `void insert(String word)` Inserts the string `word` into the trie.\n*   `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n*   `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.\n\n"}
{"question": "Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a_ _subarray_ _whose sum is greater than or equal to_ `target`. If there is no such subarray, return `0` instead.\n\n"}
{"question": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n*   For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**.\n\n"}
{"question": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\n\nImplement the `WordDictionary` class:\n\n*   `WordDictionary()` Initializes the object.\n*   `void addWord(word)` Adds `word` to the data structure, it can be matched later.\n*   `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.\n\n"}
{"question": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_.\n\nNote that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\nYou must solve it in `O(n)` time complexity.\n\n"}
{"question": "Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:\n\n*   Only numbers `1` through `9` are used.\n*   Each number is used **at most once**.\n\nReturn _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\n"}
{"question": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, _find the largest square containing only_ `1`'s _and return its area_.\n\n"}
{"question": "Given the `root` of a **complete** binary tree, return the number of the nodes in the tree.\n\nAccording to **[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\nDesign an algorithm that runs in less than `O(n)` time complexity.\n\n"}
{"question": "Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_.\n\nThe first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`.\n\nThe second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`.\n\n"}
{"question": "Given a string `s` which represents an expression, _evaluate this expression and return its value_.\n\nThe integer division should truncate toward zero.\n\nYou may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.\n\n**Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.\n\n"}
{"question": "Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.\n\n"}
{"question": "Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_.\n\n"}
{"question": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"\n\n"}
{"question": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"\n\n"}
{"question": "There is a singly-linked list `head` and we want to delete a node `node` in it.\n\nYou are given the node to be deleted `node`. You will **not be given access** to the first node of `head`.\n\nAll the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list.\n\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n*   The value of the given node should not exist in the linked list.\n*   The number of nodes in the linked list should decrease by one.\n*   All the values before `node` should be in the same order.\n*   All the values after `node` should be in the same order.\n\n**Custom testing:**\n\n*   For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list.\n*   We will build the linked list and pass the node to your function.\n*   The output will be the entire list after calling your function.\n\n"}
{"question": "Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`.\n\nThe product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\nYou must write an algorithm that runs in `O(n)` time and without using the division operation.\n\n"}
{"question": "Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties:\n\n*   Integers in each row are sorted in ascending from left to right.\n*   Integers in each column are sorted in ascending from top to bottom.\n\n"}
{"question": "Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**.\n\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`.\n\n"}
{"question": "Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\n\nImplement the `WordDistance` class:\n\n*   `WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.\n*   `int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.\n\n"}
{"question": "Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return _the shortest distance between the occurrence of these two words in the list_.\n\n**Note** that `word1` and `word2` may be the same. It is guaranteed that they represent **two individual words** in the list.\n\n"}
{"question": "Given an integer `n`, return all the **strobogrammatic numbers** that are of length `n`. You may return the answer in **any order**.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n"}
{"question": "We can shift a string by shifting each of its letters to its successive letter.\n\n*   For example, `\"abc \"` can be shifted to be `\"bcd \"`.\n\nWe can keep shifting the string to form a sequence.\n\n*   For example, we can keep shifting `\"abc \"` to form the sequence: `\"abc \" -> \"bcd \" -> ... -> \"xyz \"`.\n\nGiven an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in **any order**.\n\n"}
{"question": "Given the `root` of a binary tree, return _the number of **uni-value**_ _subtrees_.\n\nA **uni-value subtree** means all nodes of the subtree have the same value.\n\n"}
{"question": "Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.\n\nImplement the `Vector2D` class:\n\n*   `Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.\n*   `next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.\n*   `hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.\n\n"}
{"question": "Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of conference rooms required_.\n\n"}
{"question": "Numbers can be regarded as the product of their factors.\n\n*   For example, `8 = 2 x 2 x 2 = 2 x 4`.\n\nGiven an integer `n`, return _all possible combinations of its factors_. You may return the answer in **any order**.\n\n**Note** that the factors should be in the range `[2, n - 1]`.\n\n"}
{"question": "Given an array of **unique** integers `preorder`, return `true` _if it is the correct preorder traversal sequence of a binary search tree_.\n\n"}
{"question": "There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\nThe cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.\n\n*   For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...\n\nReturn _the minimum cost to paint all houses_.\n\n"}
{"question": "Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.\n\n"}
{"question": "Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.\n\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n\n"}
{"question": "You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.\n\nReturn `true` _if the edges of the given graph make up a valid tree, and_ `false` _otherwise_.\n\n"}
{"question": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\nGiven an integer `n`, return _the_ `nth` _**ugly number**_.\n\n"}
{"question": "Given a string s, return _all the palindromic permutations (without duplicates) of it_.\n\nYou may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.\n\n"}
{"question": "Design an algorithm to encode **a list of strings** to **a string**. The encoded string is then sent over the network and is decoded back to the original list of strings.\n\nMachine 1 (sender) has the function:\n\nstring encode(vector strs) {\n  // ... your code\n  return encoded\\_string;\n}\n\nMachine 2 (receiver) has the function:\n\nvector decode(string s) {\n  //... your code\n  return strs;\n}\n\nSo Machine 1 does:\n\nstring encoded\\_string = encode(strs);\n\nand Machine 2 does:\n\nvector strs2 = decode(encoded\\_string);\n\n`strs2` in Machine 2 should be the same as `strs` in Machine 1.\n\nImplement the `encode` and `decode` methods.\n\nYou are not allowed to solve the problem using any serialize methods (such as `eval`).\n\n"}
{"question": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_.\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\n"}
{"question": "Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_.\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\nYou must write an algorithm that runs in logarithmic time.\n\n"}
{"question": "You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:\n\n*   Every post must be painted **exactly one** color.\n*   There **cannot** be three or more **consecutive** posts with the same color.\n\nGiven the two integers `n` and `k`, return _the **number of ways** you can paint the fence_.\n\n"}
{"question": "Suppose you are at a party with `n` people labeled from `0` to `n - 1` and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know the celebrity, but the celebrity does not know any of them.\n\nNow you want to find out who the celebrity is or verify that there is not one. You are only allowed to ask questions like: \"Hi, A. Do you know B? \" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\n\nYou are given a helper function `bool knows(a, b)` that tells you whether `a` knows `b`. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if they are at the party.\n\nReturn _the celebrity's label if there is a celebrity at the party_. If there is no celebrity, return `-1`.\n\n"}
{"question": "Given an integer `n`, return _the least number of perfect square numbers that sum to_ `n`.\n\nA **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.\n\n"}
{"question": "Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.\n\nYou may assume the input array always has a valid answer.\n\n"}
{"question": "Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.\n\nImplement the `ZigzagIterator` class:\n\n*   `ZigzagIterator(List v1, List v2)` initializes the object with the two vectors `v1` and `v2`.\n*   `boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.\n*   `int next()` returns the current element of the iterator and moves the iterator to the next element.\n\n"}
{"question": "Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations.\n\nImplement the `PeekingIterator` class:\n\n*   `PeekingIterator(Iterator nums)` Initializes the object with the given integer iterator `iterator`.\n*   `int next()` Returns the next element in the array and moves the pointer to the next element.\n*   `boolean hasNext()` Returns `true` if there are still elements in the array.\n*   `int peek()` Returns the next element in the array **without** moving the pointer.\n\n**Note:** Each language may have a different implementation of the constructor and `Iterator`, but they all support the `int next()` and `boolean hasNext()` functions.\n\n"}
{"question": "Given the `root` of a binary search tree and a node `p` in it, return _the in-order successor of that node in the BST_. If the given node has no in-order successor in the tree, return `null`.\n\nThe successor of a node `p` is the node with the smallest key greater than `p.val`.\n\n"}
{"question": "You are given an `m x n` grid `rooms` initialized with these three possible values.\n\n*   `-1` A wall or an obstacle.\n*   `0` A gate.\n*   `INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.\n\nFill each empty room with the distance to _its nearest gate_. If it is impossible to reach a gate, it should be filled with `INF`.\n\n"}
{"question": "Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\nThere is only **one repeated number** in `nums`, return _this repeated number_.\n\nYou must solve the problem **without** modifying the array `nums` and uses only constant extra space.\n\n"}
{"question": "The **abbreviation** of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an **abbreviation** of itself.\n\nFor example:\n\n*   `dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.\n*   `internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.\n*   `it --> it` because any word with only two characters is an **abbreviation** of itself.\n\nImplement the `ValidWordAbbr` class:\n\n*   `ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.\n*   `boolean isUnique(string word)` Returns `true` if **either** of the following conditions are met (otherwise returns `false`):\n    *   There is no word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**.\n    *   For any word in `dictionary` whose **abbreviation** is equal to `word`'s **abbreviation**, that word and `word` are **the same**.\n\n"}
{"question": "According to [Wikipedia's article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life): \"The **Game of Life**, also known simply as **Life**, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. \"\n\nThe board is made up of an `m x n` grid of cells, where each cell has an initial state: **live** (represented by a `1`) or **dead** (represented by a `0`). Each cell interacts with its [eight neighbors](https://en.wikipedia.org/wiki/Moore_neighborhood) (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n\n1.  Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2.  Any live cell with two or three live neighbors lives on to the next generation.\n3.  Any live cell with more than three live neighbors dies, as if by over-population.\n4.  Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return _the next state_.\n\n"}
{"question": "Given a `pattern` and a string `s`, return `true` _if_ `s` _**matches** the_ `pattern`_._\n\nA string `s` **matches** a `pattern` if there is some **bijective mapping** of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A **bijective mapping** means that no two characters map to the same string, and no character maps to two different strings.\n\n"}
{"question": "You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn `true` _if the starting player can **guarantee a win**_, and `false` otherwise.\n\n"}
{"question": "Given the `root` of a binary tree, return _the length of the longest **consecutive sequence path**_.\n\nA **consecutive sequence path** is a path where the values **increase by one** along the path.\n\nNote that the path can start **at any node** in the tree, and you cannot go from a node to its parent in the path.\n\n"}
{"question": "You are playing the **[Bulls and Cows](https://en.wikipedia.org/wiki/Bulls_and_Cows)** game with your friend.\n\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\n\n*   The number of \"bulls \", which are digits in the guess that are in the correct position.\n*   The number of \"cows \", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number `secret` and your friend's guess `guess`, return _the hint for your friend's guess_.\n\nThe hint should be formatted as `\"xAyB \"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.\n\n"}
{"question": "Given an integer array `nums`, return _the length of the longest **strictly increasing**_ _**subsequence**_.\n\n"}
{"question": "Given a 2D matrix `matrix`, handle multiple queries of the following type:\n\n*   Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nImplement the `NumMatrix` class:\n\n*   `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n*   `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nYou must design an algorithm where `sumRegion` works on `O(1)` time complexity.\n\n"}
{"question": "An **additive number** is a string whose digits can form an **additive sequence**.\n\nA valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\nGiven a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.\n\n**Note:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n"}
{"question": "Given an integer array `nums`, handle multiple queries of the following types:\n\n1.  **Update** the value of an element in `nums`.\n2.  Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n*   `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n*   `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`.\n*   `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n"}
{"question": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\n*   After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n"}
{"question": "A tree is an undirected graph in which any two vertices are connected by _exactly_ one path. In other words, any connected graph without simple cycles is a tree.\n\nGiven a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`) are called **minimum height trees** (MHTs).\n\nReturn _a list of all **MHTs'** root labels_. You can return the answer in **any order**.\n\nThe **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\n\n"}
{"question": "Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.\n\n"}
{"question": "A **super ugly number** is a positive integer whose prime factors are in the array `primes`.\n\nGiven an integer `n` and an array of integers `primes`, return _the_ `nth` _**super ugly number**_.\n\nThe `nth` **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer.\n\n"}
{"question": "Given the `root` of a binary tree, return _**the vertical order traversal** of its nodes' values_. (i.e., from top to bottom, column by column).\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n"}
{"question": "Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results.\n\n"}
{"question": "Given a string array `words`, return _the maximum value of_ `length(word[i]) * length(word[j])` _where the two words do not share common letters_. If no such two words exist, return `0`.\n\n"}
{"question": "There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\n\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.\n\nReturn _the number of bulbs that are on after `n` rounds_.\n\n"}
{"question": "A word's **generalized abbreviation** can be constructed by taking any number of **non-overlapping** and **non-adjacent** substrings and replacing them with their respective lengths.\n\n*   For example, `\"abcde \"` can be abbreviated into:\n    *   `\"a3e \"` ( `\"bcd \"` turned into `\"3 \"`)\n    *   `\"1bcd1 \"` ( `\"a \"` and `\"e \"` both turned into `\"1 \"`)\n    *   `\"5 \"` ( `\"abcde \"` turned into `\"5 \"`)\n    *   `\"abcde \"` (no substrings replaced)\n*   However, these abbreviations are **invalid**:\n    *   `\"23 \"` ( `\"ab \"` turned into `\"2 \"` and `\"cde \"` turned into `\"3 \"`) is invalid as the substrings chosen are adjacent.\n    *   `\"22de \"` ( `\"ab \"` turned into `\"2 \"` and `\"bc \"` turned into `\"2 \"`) is invalid as the substring chosen overlap.\n\nGiven a string `word`, return _a list of all the possible **generalized abbreviations** of_ `word`. Return the answer in **any order**.\n\n"}
{"question": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn _the fewest number of coins that you need to make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `-1`.\n\nYou may assume that you have an infinite number of each kind of coin.\n\n"}
{"question": "You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.\n\nReturn _the number of connected components in the graph_.\n\n"}
{"question": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.\n\nYou may assume the input array always has a valid answer.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the maximum length of a_ _subarray_ _that sums to_ `k`. If there is not one, return `0` instead.\n\n"}
{"question": "Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return _the reordered list_.\n\nThe **first** node is considered **odd**, and the **second** node is **even**, and so on.\n\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\n\nYou must solve the problem in `O(1)` extra space complexity and `O(n)` time complexity.\n\n"}
{"question": "One way to serialize a binary tree is to use **preorder traversal**. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.\n\nFor example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,# \"`, where `'#'` represents a null node.\n\nGiven a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.\n\nIt is **guaranteed** that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.\n\nYou may assume that the input format is always valid.\n\n*   For example, it could never contain two consecutive commas, such as `\"1,,3 \"`.\n\n**Note:** You are not allowed to reconstruct the tree.\n\n"}
{"question": "Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\n\nA **Binary Search Tree (BST)** is a tree in which all the nodes follow the below-mentioned properties:\n\n*   The left subtree values are less than the value of their parent (root) node's value.\n*   The right subtree values are greater than the value of their parent (root) node's value.\n\n**Note:** A subtree must include all of its descendants.\n\n"}
{"question": "Given an integer array `nums`, return `true` _if there exists a triple of indices_ `(i, j, k)` _such that_ `i < j < k` _and_ `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.\n\n"}
{"question": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.\n\nBesides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if **two directly-linked houses were broken into on the same night**.\n\nGiven the `root` of the binary tree, return _the maximum amount of money the thief can rob **without alerting the police**_.\n\n"}
{"question": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**.\n\nReturn _the sum of each integer in_ `nestedList` _multiplied by its **depth**_.\n\n"}
{"question": "Given a string `s` and an integer `k`, return _the length of the longest_ _substring_ _of_ `s` _that contains at most_ `k` _**distinct** characters_.\n\n"}
{"question": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n\n*   `NestedIterator(List nestedList)` Initializes the iterator with the nested list `nestedList`.\n*   `int next()` Returns the next integer in the nested list.\n*   `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.\n\nYour code will be tested with the following pseudocode:\n\ninitialize iterator with nestedList\nres = \\[\\]\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n\nIf `res` matches the expected flattened list, then your code will be judged as correct.\n\n"}
{"question": "Given an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers.\n\nReturn _the maximum product you can get_.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the_ `k` _most frequent elements_. You may return the answer in **any order**.\n\n"}
{"question": "Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:\n\n1.  A move is guaranteed to be valid and is placed on an empty block.\n2.  Once a winning condition is reached, no more moves are allowed.\n3.  A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.\n\nImplement the `TicTacToe` class:\n\n*   `TicTacToe(int n)` Initializes the object the size of the board `n`.\n*   `int move(int row, int col, int player)` Indicates that the player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move, and the two players alternate in making moves. Return\n    *   `0` if there is **no winner** after the move,\n    *   `1` if **player 1** is the winner after the move, or\n    *   `2` if **player 2** is the winner after the move.\n\n"}
{"question": "Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an \"unlock pattern \" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a **valid** unlock pattern if both of the following are true:\n\n*   All the dots in the sequence are **distinct**.\n*   If the line segment connecting two consecutive dots in the sequence passes through the **center** of any other dot, the other dot **must have previously appeared** in the sequence. No jumps through the center non-selected dots are allowed.\n    *   For example, connecting dots `2` and `9` without dots `5` or `6` appearing beforehand is valid because the line from dot `2` to dot `9` does not pass through the center of either dot `5` or `6`.\n    *   However, connecting dots `1` and `3` without dot `2` appearing beforehand is invalid because the line from dot `1` to dot `3` passes through the center of dot `2`.\n\nHere are some example valid and invalid unlock patterns:\n\n*   The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.\n*   The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.\n*   The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.\n*   The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.\n\nGiven two integers `m` and `n`, return _the **number of unique and valid unlock patterns** of the Android grid lock screen that consist of **at least**_ `m` _keys and **at most**_ `n` _keys._\n\nTwo unlock patterns are considered **unique** if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n\n"}
{"question": "Design a [Snake game](https://en.wikipedia.org/wiki/Snake_(video_game)) that is played on a device with screen size `height x width`. [Play the game online](http://patorjk.com/games/snake/) if you are not familiar with the game.\n\nThe snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.\n\nYou are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.\n\nEach piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.\n\nWhen a piece of food appears on the screen, it is **guaranteed** that it will not appear on a block occupied by the snake.\n\nThe game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies **after** moving (i.e. a snake of length 4 cannot run into itself).\n\nImplement the `SnakeGame` class:\n\n*   `SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.\n*   `int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.\n\n"}
{"question": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.\n\nImplement the `Twitter` class:\n\n*   `Twitter()` Initializes your twitter object.\n*   `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.\n*   `List getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**.\n*   `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.\n*   `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.\n\n"}
{"question": "Given `n` points on a 2D plane, find if there is such a line parallel to the y-axis that reflects the given points symmetrically.\n\nIn other words, answer whether or not if there exists a line that after reflecting all points over the given line, the original points' set is the same as the reflected ones.\n\n**Note** that there can be repeated points.\n\n"}
{"question": "Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n"}
{"question": "Given a **sorted** integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return _the array in a sorted order_.\n\n"}
{"question": "Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return _the maximum enemies you can kill using one bomb_. You can only place the bomb in an empty cell.\n\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.\n\n"}
{"question": "Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).\n\nYour system should accept a `timestamp` parameter (**in seconds** granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.\n\nImplement the `HitCounter` class:\n\n*   `HitCounter()` Initializes the object of the hit counter system.\n*   `void hit(int timestamp)` Records a hit that happened at `timestamp` (**in seconds**). Several hits may happen at the same `timestamp`.\n*   `int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).\n\n"}
{"question": "You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.\n\nThe **depth** of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its **depth**. Let `maxDepth` be the **maximum depth** of any integer.\n\nThe **weight** of an integer is `maxDepth - (the depth of the integer) + 1`.\n\nReturn _the sum of each integer in_ `nestedList` _multiplied by its **weight**_.\n\n"}
{"question": "You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.\n\nIf `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained **within one or both buckets** by the end.\n\nOperations allowed:\n\n*   Fill any of the jugs with water.\n*   Empty any of the jugs.\n*   Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n\n"}
{"question": "Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:\n\n*   Collect all the leaf nodes.\n*   Remove all the leaf nodes.\n*   Repeat until the tree is empty.\n\n"}
{"question": "Given a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n\n*   `answer[i] % answer[j] == 0`, or\n*   `answer[j] % answer[i] == 0`\n\nIf there are multiple solutions, return any of them.\n\n"}
{"question": "Given a non-negative integer represented as a linked list of digits, _plus one to the integer_.\n\nThe digits are stored such that the most significant digit is at the `head` of the list.\n\n"}
{"question": "You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.\n\nYou have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.\n\nReturn `arr` _after applying all the_ `updates`.\n\n"}
{"question": "Given two integers `a` and `b`, return _the sum of the two integers without using the operators_ `+` _and_ `-`.\n\n"}
{"question": "Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2` sorted in **ascending order** and an integer `k`.\n\nDefine a pair `(u, v)` which consists of one element from the first array and one element from the second array.\n\nReturn _the_ `k` _pairs_ `(u1, v1), (u2, v2), ..., (uk, vk)` _with the smallest sums_.\n\n"}
{"question": "We are playing the Guessing Game. The game will work as follows:\n\n1.  I pick a number between `1` and `n`.\n2.  You guess a number.\n3.  If you guess the right number, **you win the game**.\n4.  If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower**, and you will continue guessing.\n5.  Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, **you lose the game**.\n\nGiven a particular `n`, return _the minimum amount of money you need to **guarantee a win regardless of what number I pick**_.\n\n"}
{"question": "A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n*   For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n*   In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\nGiven an integer array `nums`, return _the length of the longest **wiggle subsequence** of_ `nums`.\n\n"}
{"question": "Given an array of **distinct** integers `nums` and a target integer `target`, return _the number of possible combinations that add up to_ `target`.\n\nThe test cases are generated so that the answer can fit in a **32-bit** integer.\n\n"}
{"question": "Given an `n x n` `matrix` where each of the rows and columns is sorted in ascending order, return _the_ `kth` _smallest element in the matrix_.\n\nNote that it is the `kth` smallest element **in the sorted order**, not the `kth` **distinct** element.\n\nYou must find a solution with a memory complexity better than `O(n2)`.\n\n"}
{"question": "Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.\n\nImplement the `PhoneDirectory` class:\n\n*   `PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.\n*   `int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.\n*   `bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.\n*   `void release(int number)` Recycles or releases the slot `number`.\n\n"}
{"question": "Implement the `RandomizedSet` class:\n\n*   `RandomizedSet()` Initializes the `RandomizedSet` object.\n*   `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n*   `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n*   `int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the **same probability** of being returned.\n\nYou must implement the functions of the class such that each function works in **average** `O(1)` time complexity.\n\n"}
{"question": "Given a singly linked list, return a random node's value from the linked list. Each node must have the **same probability** of being chosen.\n\nImplement the `Solution` class:\n\n*   `Solution(ListNode head)` Initializes the object with the head of the singly-linked list `head`.\n*   `int getRandom()` Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.\n\n"}
{"question": "Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be **equally likely** as a result of the shuffling.\n\nImplement the `Solution` class:\n\n*   `Solution(int[] nums)` Initializes the object with the integer array `nums`.\n*   `int[] reset()` Resets the array to its original configuration and returns it.\n*   `int[] shuffle()` Returns a random shuffling of the array.\n\n"}
{"question": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return _the deserialized_ `NestedInteger`.\n\nEach element is either an integer or a list whose elements may also be integers or other lists.\n\n"}
{"question": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.\n\nYou must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space.\n\n"}
{"question": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.\n\nIn text form, it looks like this (with ⟶ representing the tab character):\n\ndir\n⟶ subdir1\n⟶ ⟶ file1.ext\n⟶ ⟶ subsubdir1\n⟶ subdir2\n⟶ ⟶ subsubdir2\n⟶ ⟶ ⟶ file2.ext\n\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext \"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\nEvery file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext \"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.\n\nGiven a string `input` representing the file system in the explained format, return _the length of the **longest absolute path** to a **file** in the abstracted file system_. If there is no file in the system, return `0`.\n\n**Note** that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\n"}
{"question": "You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:\n\n*   Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n*   Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n*   Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer `n`, return _the last number that remains in_ `arr`.\n\n"}
{"question": "Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules:\n\n1.  For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n2.  For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\nThis is how the UTF-8 encoding would work:\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n`x` denotes a bit in the binary form of a byte that may be either `0` or `1`.\n\n**Note:** The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\n"}
{"question": "Given an encoded string, return its decoded string.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.\n\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`.\n\nThe test cases are generated so that the length of the output will never exceed `105`.\n\n"}
{"question": "Given a string `s` and an integer `k`, return _the length of the longest substring of_ `s` _such that the frequency of each character in this substring is greater than or equal to_ `k`.\n\n"}
{"question": "You are given an integer array `nums` of length `n`.\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow:\n\n*   `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\n\nReturn _the maximum value of_ `F(0), F(1), ..., F(n-1)`.\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n"}
{"question": "Given a positive integer `n`, you can apply one of the following operations:\n\n1.  If `n` is even, replace `n` with `n / 2`.\n2.  If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\nReturn _the minimum number of operations needed for_ `n` _to become_ `1`.\n\n"}
{"question": "Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.\n\nImplement the `Solution` class:\n\n*   `Solution(int[] nums)` Initializes the object with the array `nums`.\n*   `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n"}
{"question": "You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.\n\nReturn _the answers to all queries_. If a single answer cannot be determined, return `-1.0`.\n\n**Note:** The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.\n\n"}
{"question": "Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n"}
{"question": "Given string num representing a non-negative integer `num`, and an integer `k`, return _the smallest possible integer after removing_ `k` _digits from_ `num`.\n\n"}
{"question": "You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`.\n\nReconstruct and return _the queue that is represented by the input array_ `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).\n\n"}
{"question": "An integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n*   For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\nGiven an integer array `nums`, return _the number of arithmetic **subarrays** of_ `nums`.\n\nA **subarray** is a contiguous subsequence of the array.\n\n"}
{"question": "Given an integer array `nums`, return `true` _if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or_ `false` _otherwise_.\n\n"}
{"question": "There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges.\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`.\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\nReturn _a **2D list** of grid coordinates_ `result` _where_ `result[i] = [ri, ci]` _denotes that rain water can flow from cell_ `(ri, ci)` _to **both** the Pacific and Atlantic oceans_.\n\n"}
{"question": "Given a `rows x cols` screen and a `sentence` represented as a list of strings, return _the number of times the given sentence can be fitted on the screen_.\n\nThe order of words in the sentence must remain unchanged, and a word cannot be split into two lines. A single space must separate two consecutive words in a line.\n\n"}
{"question": "Given an `m x n` matrix `board` where each cell is a battleship `'X'` or empty `'.'`, return _the number of the **battleships** on_ `board`.\n\n**Battleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\n"}
{"question": "Given an integer array `nums`, return _the maximum result of_ `nums[i] XOR nums[j]`, where `0 <= i <= j < n`.\n\n"}
{"question": "Given a string `s` containing an out-of-order English representation of digits `0-9`, return _the digits in **ascending** order_.\n\n"}
{"question": "You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\nReturn _the length of the longest substring containing the same letter you can get after performing the above operations_.\n\n"}
{"question": "Convert a **Binary Search Tree** to a sorted **Circular Doubly-Linked List** in place.\n\nYou can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.\n\nWe want to do the transformation **in place**. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.\n\n"}
{"question": "Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree.\n\nReturn _the root of the Quad-Tree representing_ `grid`.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n*   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer.\n*   `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3.  Recurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree format:**\n\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n"}
{"question": "Given an n-ary tree, return the _level order_ traversal of its nodes' values.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n"}
{"question": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional **child pointer**. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a **multilevel data structure** as shown in the example below.\n\nGiven the `head` of the first level of the list, **flatten** the list so that all the nodes appear in a single-level, doubly linked list. Let `curr` be a node with a child list. The nodes in the child list should appear **after** `curr` and **before** `curr.next` in the flattened list.\n\nReturn _the_ `head` _of the flattened list. The nodes in the list must have **all** of their child pointers set to_ `null`.\n\n"}
{"question": "A gene string can be represented by an 8-character long string, with choices from `'A'`, `'C'`, `'G'`, and `'T'`.\n\nSuppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string.\n\n*   For example, `\"AACCGGTT \" --> \"AACCGGTA \"` is one mutation.\n\nThere is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string.\n\nGiven the two gene strings `startGene` and `endGene` and the gene bank `bank`, return _the minimum number of mutations needed to mutate from_ `startGene` _to_ `endGene`. If there is no such a mutation, return `-1`.\n\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\n\n"}
{"question": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping_.\n\n"}
{"question": "You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**.\n\nThe **right interval** for an interval `i` is an interval `j` such that `startj >= endi` and `startj` is **minimized**. Note that `i` may equal `j`.\n\nReturn _an array of **right interval** indices for each interval `i`_. If no **right interval** exists for interval `i`, then put `-1` at index `i`.\n\n"}
{"question": "Given the `root` of a binary tree and an integer `targetSum`, return _the number of paths where the sum of the values along the path equals_ `targetSum`.\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\n"}
{"question": "Given two strings `s` and `p`, return _an array of all the start indices of_ `p`_'s anagrams in_ `s`. You may return the answer in **any order**.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n"}
{"question": "Given a string `expression` representing arbitrarily nested ternary expressions, evaluate the expression, and return _the result of it_.\n\nYou can always assume that the given expression is valid and only contains digits, `'?'`, `':'`, `'T'`, and `'F'` where `'T'` is true and `'F'` is false. All the numbers in the expression are **one-digit** numbers (i.e., in the range `[0, 9]`).\n\nThe conditional expressions group right-to-left (as usual in most languages), and the result of the expression will always evaluate to either a digit, `'T'` or `'F'`.\n\n"}
{"question": "Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **once** or **twice**, return _an array of all the integers that appears **twice**_.\n\nYou must write an algorithm that runs in `O(n)` time and uses only constant extra space.\n\n"}
{"question": "Given an array of characters `chars`, compress it using the following algorithm:\n\nBegin with an empty string `s`. For each group of **consecutive repeating characters** in `chars`:\n\n*   If the group's length is `1`, append the character to `s`.\n*   Otherwise, append the character followed by the group's length.\n\nThe compressed string `s` **should not be returned separately**, but instead, be stored **in the input character array `chars`**. Note that group lengths that are `10` or longer will be split into multiple characters in `chars`.\n\nAfter you are done **modifying the input array,** return _the new length of the array_.\n\nYou must write an algorithm that uses only constant extra space.\n\n"}
{"question": "You are given an integer array `nums` of length `n` where `nums` is a permutation of the integers in the range `[1, n]`. You are also given a 2D integer array `sequences` where `sequences[i]` is a subsequence of `nums`.\n\nCheck if `nums` is the shortest possible and the only **supersequence**. The shortest **supersequence** is a sequence **with the shortest length** and has all `sequences[i]` as subsequences. There could be multiple valid **supersequences** for the given array `sequences`.\n\n*   For example, for `sequences = [[1,2],[1,3]]`, there are two shortest **supersequences**, `[1,2,3]` and `[1,3,2]`.\n*   While for `sequences = [[1,2],[1,3],[1,2,3]]`, the only shortest **supersequence** possible is `[1,2,3]`. `[1,2,3,4]` is a possible supersequence but not the shortest.\n\nReturn `true` _if_ `nums` _is the only shortest **supersequence** for_ `sequences`_, or_ `false` _otherwise_.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given two **non-empty** linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n"}
{"question": "You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**.\n\nReturn _the number of boomerangs_.\n\n"}
{"question": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a **binary search tree**. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\n\n**The encoded string should be as compact as possible.**\n\n"}
{"question": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return _the **root node reference** (possibly updated) of the BST_.\n\nBasically, the deletion can be divided into two stages:\n\n1.  Search for a node to remove.\n2.  If the node is found, delete the node.\n\n"}
{"question": "Given a string `s`, sort it in **decreasing order** based on the **frequency** of the characters. The **frequency** of a character is the number of times it appears in the string.\n\nReturn _the sorted string_. If there are multiple answers, return _any of them_.\n\n"}
{"question": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\nGiven the array `points`, return _the **minimum** number of arrows that must be shot to burst all balloons_.\n\n"}
{"question": "Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_.\n\nIn one move, you can increment `n - 1` elements of the array by `1`.\n\n"}
{"question": "Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that:\n\n*   `0 <= i, j, k, l < n`\n*   `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n\n"}
{"question": "Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.\n\nReturn `true` _if there is a **132 pattern** in_ `nums`_, otherwise, return_ `false`_._\n\n"}
{"question": "You are playing a game involving a **circular** array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:\n\n*   If `nums[i]` is positive, move `nums[i]` steps **forward**, and\n*   If `nums[i]` is negative, move `nums[i]` steps **backward**.\n\nSince the array is **circular**, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\n\nA **cycle** in the array consists of a sequence of indices `seq` of length `k` where:\n\n*   Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\n*   Every `nums[seq[j]]` is either **all positive** or **all negative**.\n*   `k > 1`\n\nReturn `true` _if there is a **cycle** in_ `nums`_, or_ `false` _otherwise_.\n\n"}
{"question": "Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_.\n\nIn one move, you can increment or decrement an element of the array by `1`.\n\nTest cases are designed so that the answer will fit in a **32-bit** integer.\n\n"}
{"question": "In the \"100 game \" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to **reach or exceed** 100 wins.\n\nWhat if we change the game so that players **cannot** re-use integers?\n\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\n\nGiven two integers `maxChoosableInteger` and `desiredTotal`, return `true` if the first player to move can force a win, otherwise, return `false`. Assume both players play **optimally**.\n\n"}
{"question": "We define the string `base` to be the infinite wraparound string of `\"abcdefghijklmnopqrstuvwxyz \"`, so `base` will look like this:\n\n*   `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd.... \"`.\n\nGiven a string `s`, return _the number of **unique non-empty substrings** of_ `s` _are present in_ `base`.\n\n"}
{"question": "Given a string `queryIP`, return `\"IPv4 \"` if IP is a valid IPv4 address, `\"IPv6 \"` if IP is a valid IPv6 address or `\"Neither \"` if IP is not a correct IP of any type.\n\n**A valid IPv4** address is an IP in the form `\"x1.x2.x3.x4 \"` where `0 <= xi <= 255` and `xi` **cannot contain** leading zeros. For example, `\"192.168.1.1 \"` and `\"192.168.1.0 \"` are valid IPv4 addresses while `\"192.168.01.1 \"`, `\"192.168.1.00 \"`, and `\"192.168@1.1 \"` are invalid IPv4 addresses.\n\n**A valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8 \"` where:\n\n*   `1 <= xi.length <= 4`\n*   `xi` is a **hexadecimal string** which may contain digits, lowercase English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).\n*   Leading zeros are allowed in `xi`.\n\nFor example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334 \"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334 \"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334 \"` are invalid IPv6 addresses.\n\n"}
{"question": "You are given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`. The points form a polygon when joined sequentially.\n\nReturn `true` if this polygon is [convex](http://en.wikipedia.org/wiki/Convex_polygon) and `false` otherwise.\n\nYou may assume the polygon formed by given points is always a [simple polygon](http://en.wikipedia.org/wiki/Simple_polygon). In other words, we ensure that exactly two edges intersect at each vertex and that edges otherwise don't intersect each other.\n\n"}
{"question": "Given the **API** `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please **do not** use a language's built-in random API.\n\nEach test case will have one **internal** argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is **not an argument** passed to `rand10()`.\n\n"}
{"question": "You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**.\n\nReturn `true` if you can make this square and `false` otherwise.\n\n"}
{"question": "You are given an array of binary strings `strs` and two integers `m` and `n`.\n\nReturn _the size of the largest subset of `strs` such that there are **at most**_ `m` `0`_'s and_ `n` `1`_'s in the subset_.\n\nA set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`.\n\n"}
{"question": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\n\nGiven the positions of `houses` and `heaters` on a horizontal line, return _the minimum radius standard of heaters so that those heaters could cover all houses._\n\n**Notice** that all the `heaters` follow your radius standard, and the warm radius will the same.\n\n"}
{"question": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\nGiven an integer array `nums`, return _the sum of **Hamming distances** between all the pairs of the integers in_ `nums`.\n\n"}
{"question": "Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.\n\nImplement the `Solution` class:\n\n*   `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n*   `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.\n\n"}
{"question": "A magical string `s` consists of only `'1'` and `'2'` and obeys the following rules:\n\n*   The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself.\n\nThe first few elements of `s` is `s = \"1221121221221121122...... \"`. If we group the consecutive `1`'s and `2`'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ...... \"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ...... \"`. You can see that the occurrence sequence is `s` itself.\n\nGiven an integer `n`, return the number of `1`'s in the first `n` number in the magical string `s`.\n\n"}
{"question": "A permutation `perm` of `n` integers of all the integers in the range `[1, n]` can be represented as a string `s` of length `n - 1` where:\n\n*   `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n*   `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the lexicographically smallest permutation `perm` and return it.\n\n"}
{"question": "You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2.\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\n\nReturn `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally.\n\n"}
{"question": "Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most one_ `0`.\n\n"}
{"question": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n"}
{"question": "Given an integer array `nums`, return _all the different possible non-decreasing subsequences of the given array with at least two elements_. You may return the answer in **any order**.\n\n"}
{"question": "You are given an integer array `nums` and an integer `target`.\n\nYou want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate all the integers.\n\n*   For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1 \"`.\n\nReturn the number of different **expressions** that you can build, which evaluates to `target`.\n\n"}
{"question": "You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\n\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\n\n**Note** that an integer point is a point that has integer coordinates.\n\nImplement the `Solution` class:\n\n*   `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`.\n*   `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles.\n\n"}
{"question": "Given an `m x n` matrix `mat`, return _an array of all the elements of the array in a diagonal order_.\n\n"}
{"question": "Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return _the **next greater number** for every element in_ `nums`.\n\nThe **next greater number** of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.\n\n"}
{"question": "There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling **up, down, left or right**, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.\n\nGiven the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return _the shortest **distance** for the ball to stop at the destination_. If the ball cannot stop at `destination`, return `-1`.\n\nThe **distance** is the number of **empty spaces** traveled by the ball from the start position (excluded) to the destination (included).\n\nYou may assume that **the borders of the maze are all walls** (see examples).\n\n"}
{"question": "Given the `root` of a binary tree, return the most frequent **subtree sum**. If there is a tie, return all the values with the highest frequency in any order.\n\nThe **subtree sum** of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\n\n"}
{"question": "Given a `node` in a binary search tree, return _the in-order successor of that node in the BST_. If that node has no in-order successor, return `null`.\n\nThe successor of a `node` is the node with the smallest key greater than `node.val`.\n\nYou will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\n"}
{"question": "Given the `root` of a binary tree, return the leftmost value in the last row of the tree.\n\n"}
{"question": "Given the `root` of a binary tree, return _an array of the largest value in each row_ of the tree **(0-indexed)**.\n\n"}
{"question": "Given a string `s`, find _the longest palindromic **subsequence**'s length in_ `s`.\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\nReturn _the number of combinations that make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `0`.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is **guaranteed** to fit into a signed **32-bit** integer.\n\n"}
{"question": "There is an `m x n` binary grid `matrix` with all the values set `0` initially. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned.\n\nOptimize your algorithm to minimize the number of calls made to the **built-in** random function of your language and optimize the time and space complexity.\n\nImplement the `Solution` class:\n\n*   `Solution(int m, int n)` Initializes the object with the size of the binary matrix `m` and `n`.\n*   `int[] flip()` Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`.\n*   `void reset()` Resets all the values of the matrix to be `0`.\n\n"}
{"question": "Given an array of strings `strs`, return _the length of the **longest uncommon subsequence** between them_. If the longest uncommon subsequence does not exist, return `-1`.\n\nAn **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**.\n\nA **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\n*   For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).\n\n"}
{"question": "Given an integer array nums and an integer k, return `true` _if_ `nums` _has a **good subarray** or_ `false` _otherwise_.\n\nA **good subarray** is a subarray where:\n\n*   its length is **at least two**, and\n*   the sum of the elements of the subarray is a multiple of `k`.\n\n**Note** that:\n\n*   A **subarray** is a contiguous part of the array.\n*   An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is **always** a multiple of `k`.\n\n"}
{"question": "Given a string `s` and a string array `dictionary`, return _the longest string in the dictionary that can be formed by deleting some of the given string characters_. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\n\n"}
{"question": "Given a binary array `nums`, return _the maximum length of a contiguous subarray with an equal number of_ `0` _and_ `1`.\n\n"}
{"question": "Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (**1-indexed**) is considered a **beautiful arrangement** if for every `i` (`1 <= i <= n`), **either** of the following is true:\n\n*   `perm[i]` is divisible by `i`.\n*   `i` is divisible by `perm[i]`.\n\nGiven an integer `n`, return _the **number** of the **beautiful arrangements** that you can construct_.\n\n"}
{"question": "You are given a **0-indexed** array of positive integers `w` where `w[i]` describes the **weight** of the `ith` index.\n\nYou need to implement the function `pickIndex()`, which **randomly** picks an index in the range `[0, w.length - 1]` (**inclusive**) and returns it. The **probability** of picking an index `i` is `w[i] / sum(w)`.\n\n*   For example, if `w = [1, 3]`, the probability of picking index `0` is `1 / (1 + 3) = 0.25` (i.e., `25%`), and the probability of picking index `1` is `3 / (1 + 3) = 0.75` (i.e., `75%`).\n\n"}
{"question": "Let's play the minesweeper game ([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_(video_game)), [online game](http://minesweeperonline.com))!\n\nYou are given an `m x n` char matrix `board` representing the game board where:\n\n*   `'M'` represents an unrevealed mine,\n*   `'E'` represents an unrevealed empty square,\n*   `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n*   digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and\n*   `'X'` represents a revealed mine.\n\nYou are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`'M'` or `'E'`).\n\nReturn _the board after revealing this position according to the following rules_:\n\n1.  If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`.\n2.  If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively.\n3.  If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines.\n4.  Return the board when no more squares will be revealed.\n\n"}
{"question": "Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return _the number of **black** lonely pixels_.\n\nA black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have **any other** black pixels.\n\n"}
{"question": "Given an array of integers `nums` and an integer `k`, return _the number of **unique** k-diff pairs in the array_.\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n*   `0 <= i, j < nums.length`\n*   `i != j`\n*   `nums[i] - nums[j] == k`\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n"}
{"question": "Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels and an integer target, return _the number of **black** lonely pixels_.\n\nA black lonely pixel is a character `'B'` that located at a specific position `(r, c)` where:\n\n*   Row `r` and column `c` both contain exactly `target` black pixels.\n*   For all rows that have a black pixel at column `c`, they should be exactly the same as row `r`.\n\n"}
{"question": "> Note: This is a companion problem to the [System Design](https://leetcode.com/discuss/interview-question/system-design/) problem: [Design TinyURL](https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/).\n\nTinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a tiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\nImplement the `Solution` class:\n\n*   `Solution()` Initializes the object of the system.\n*   `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`.\n*   `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object.\n\n"}
{"question": "You need to construct a binary tree from a string consisting of parenthesis and integers.\n\nThe whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.\n\nYou always start to construct the **left** child node of the parent first if it exists.\n\n"}
{"question": "A [complex number](https://en.wikipedia.org/wiki/Complex_number) can be represented as a string on the form `\"**real**+**imaginary**i \"` where:\n\n*   `real` is the real part and is an integer in the range `[-100, 100]`.\n*   `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`.\n*   `i2 == -1`.\n\nGiven two complex numbers `num1` and `num2` as strings, return _a string of the complex number that represents their multiplications_.\n\n"}
{"question": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these constraints:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n"}
{"question": "Given a list of 24-hour clock time points in **\"HH:MM \"** format, return _the minimum **minutes** difference between any two time-points in the list_.\n\n"}
{"question": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\n\nReturn _the single element that appears only once_.\n\nYour solution must run in `O(log n)` time and `O(1)` space.\n\n"}
{"question": "Given an `m x n` binary matrix `mat`, return _the distance of the nearest_ `0` _for each cell_.\n\nThe distance between two adjacent cells is `1`.\n\n"}
{"question": "During the NBA playoffs, we always set the rather strong team to play with the rather weak team, like make the rank `1` team play with the rank `nth` team, which is a good strategy to make the contest more interesting.\n\nGiven `n` teams, return _their final contest matches in the form of a string_.\n\nThe `n` teams are labeled from `1` to `n`, which represents their initial rank (i.e., Rank `1` is the strongest team and Rank `n` is the weakest team).\n\nWe will use parentheses `'('`, and `')'` and commas `','` to represent the contest team pairing. We use the parentheses for pairing and the commas for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.\n\n"}
{"question": "The **boundary** of a binary tree is the concatenation of the **root**, the **left boundary**, the **leaves** ordered from left-to-right, and the **reverse order** of the **right boundary**.\n\nThe **left boundary** is the set of nodes defined by the following:\n\n*   The root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is **empty**.\n*   If a node in the left boundary and has a left child, then the left child is in the left boundary.\n*   If a node is in the left boundary, has **no** left child, but has a right child, then the right child is in the left boundary.\n*   The leftmost leaf is **not** in the left boundary.\n\nThe **right boundary** is similar to the **left boundary**, except it is the right side of the root's right subtree. Again, the leaf is **not** part of the **right boundary**, and the **right boundary** is empty if the root does not have a right child.\n\nThe **leaves** are nodes that do not have any children. For this problem, the root is **not** a leaf.\n\nGiven the `root` of a binary tree, return _the values of its **boundary**_.\n\n"}
{"question": "There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.\n\nA **province** is a group of directly or indirectly connected cities and no other cities outside of the group.\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.\n\nReturn _the total number of **provinces**_.\n\n"}
{"question": "Given the `root` of a binary tree, return _the length of the longest consecutive path in the tree_.\n\nA consecutive path is a path where the values of the consecutive nodes in the path differ by one. This path can be either increasing or decreasing.\n\n*   For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.\n\nOn the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.\n\n"}
{"question": "You are given an integer array `nums`. The adjacent integers in `nums` will perform the float division.\n\n*   For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4 \"`.\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n\nReturn _the corresponding expression that has the maximum value in string format_.\n\n**Note:** your expression should not contain redundant parenthesis.\n\n"}
{"question": "There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\n\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\n\nGiven the 2D array `wall` that contains the information about the wall, return _the minimum number of crossed bricks after drawing such a vertical line_.\n\n"}
{"question": "You are given an array of strings `strs`. You could concatenate these strings together into a loop, where for each string, you could choose to reverse it or not. Among all the possible loops\n\nReturn _the lexicographically largest string after cutting the loop, which will make the looped string into a regular one_.\n\nSpecifically, to find the lexicographically largest string, you need to experience two phases:\n\n1.  Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\n2.  Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint.\n\nAnd your job is to find the lexicographically largest one among all the possible regular strings.\n\n"}
{"question": "Given a positive integer `n`, find _the smallest integer which has exactly the same digits existing in the integer_ `n` _and is greater in value than_ `n`. If no such positive integer exists, return `-1`.\n\n**Note** that the returned integer should fit in **32-bit integer**, if there is a valid answer but it does not fit in **32-bit integer**, return `-1`.\n\n"}
{"question": "A Binary Matrix is a matrix in which all the elements are either **0** or **1**.\n\nGiven `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix.\n\nReturn _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`.\n\nNotice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n\n*   `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n*   `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}\n\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\n\n1.  If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n2.  If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n3.  Recurse for each of the children with the proper sub-grid.\n\nIf you want to know more about the Quad-Tree, you can refer to the [wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree format:**\n\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.\n\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**.\n\n"}
{"question": "Given an array of integers `nums` and an integer `k`, return _the total number of subarrays whose sum equals to_ `k`.\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "Given an `m x n` binary matrix `mat`, return _the length of the longest line of consecutive one in the matrix_.\n\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n\n"}
{"question": "You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`.\n\nYou should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule:\n\n*   The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`.\n*   The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on.\n*   We stop adding right before a duplicate element occurs in `s[k]`.\n\nReturn _the longest length of a set_ `s[k]`.\n\n"}
{"question": "Given two strings `s1` and `s2`, return `true` _if_ `s2` _contains a permutation of_ `s1`_, or_ `false` _otherwise_.\n\nIn other words, return `true` if one of `s1`'s permutations is the substring of `s2`.\n\n"}
{"question": "You are given two integers `height` and `width` representing a garden of size `height x width`. You are also given:\n\n*   an array `tree` where `tree = [treer, treec]` is the position of the tree in the garden,\n*   an array `squirrel` where `squirrel = [squirrelr, squirrelc]` is the position of the squirrel in the garden,\n*   and an array `nuts` where `nuts[i] = [nutir, nutic]` is the position of the `ith` nut in the garden.\n\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn _the **minimal distance** for the squirrel to collect all the nuts and put them under the tree one by one_.\n\nThe **distance** is the number of moves.\n\n"}
{"question": "There is an `m x n` grid with a ball. The ball is initially at the position `[startRow, startColumn]`. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply **at most** `maxMove` moves to the ball.\n\nGiven the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given an integer array `nums`, you need to find one **continuous subarray** that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\n\nReturn _the shortest such subarray and output its length_.\n\n"}
{"question": "You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.\n\nEach process has only **one parent process** but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has **no parent process** (the root of the tree).\n\nWhen a process is **killed**, all of its children processes will also be killed.\n\nGiven an integer `kill` representing the ID of a process you want to kill, return _a list of the IDs of the processes that will be killed. You may return the answer in **any order**._\n\n"}
{"question": "Given two strings `word1` and `word2`, return _the minimum number of **steps** required to make_ `word1` _and_ `word2` _the same_.\n\nIn one **step**, you can delete exactly one character in either string.\n\n"}
{"question": "Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format.\n\nThe final result should be an [irreducible fraction](https://en.wikipedia.org/wiki/Irreducible_fraction). If your final result is an integer, change it to the format of a fraction that has a denominator `1`. So in this case, `2` should be converted to `2/1`.\n\n"}
{"question": "Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` _if the four points construct a square_.\n\nThe coordinate of a point `pi` is represented as `[xi, yi]`. The input is **not** given in any order.\n\nA **valid square** has four equal sides with positive length and four equal angles (90-degree angles).\n\n"}
{"question": "Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return _all the duplicate files in the file system in terms of their paths_. You may return the answer in **any order**.\n\nA group of duplicate files consists of at least two files that have the same content.\n\nA single directory info string in the input list has the following format:\n\n*   `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content) \"`\n\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm \"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.\n\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n\n*   `\"directory_path/file_name.txt \"`\n\n"}
{"question": "Given an integer array `nums`, return _the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle_.\n\n"}
{"question": "You are given a string `s` and an array of strings `words`.\n\nYou should add a closed pair of bold tag **and** to wrap the substrings in `s` that exist in `words`.\n\n*   If two such substrings overlap, you should wrap them together with only one pair of closed bold-tag.\n*   If two substrings wrapped by bold tags are consecutive, you should combine them.\n\nReturn `s` _after adding the bold tags_.\n\n"}
{"question": "Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n\nHowever, there is a non-negative integer `n` that represents the cooldown period between two **same tasks** (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.\n\nReturn _the least number of units of times that the CPU will take to finish all the given tasks_.\n\n"}
{"question": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer \".\n\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\n\nImplement the `MyCircularQueue` class:\n\n*   `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.\n*   `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.\n*   `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.\n*   `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.\n*   `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.\n*   `boolean isEmpty()` Checks whether the circular queue is empty or not.\n*   `boolean isFull()` Checks whether the circular queue is full or not.\n\nYou must solve the problem without using the built-in queue data structure in your programming language.\n\n"}
{"question": "Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.\n\nNote that the `root` node is at depth `1`.\n\nThe adding rule is:\n\n*   Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.\n*   `cur`'s original left subtree should be the left subtree of the new left subtree root.\n*   `cur`'s original right subtree should be the right subtree of the new right subtree root.\n*   If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n"}
{"question": "You are given `m` `arrays`, where each array is sorted in **ascending order**.\n\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.\n\nReturn _the maximum distance_.\n\n"}
{"question": "Given a positive integer num, return _the smallest positive integer_ `x` _whose multiplication of each digit equals_ `num`. If there is no answer or the answer is not fit in **32-bit** signed integer, return `0`.\n\n"}
{"question": "Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.\n\n"}
{"question": "In combinatorial mathematics, a **derangement** is a permutation of the elements of a set, such that no element appears in its original position.\n\nYou are given an integer `n`. There is originally an array consisting of `n` integers from `1` to `n` in ascending order, return _the number of **derangements** it can generate_. Since the answer may be huge, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.\n\nImplement the `LogSystem` class:\n\n*   `LogSystem()` Initializes the `LogSystem` object.\n*   `void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.\n*   `int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = \"2017:01:01:23:59:59 \"`, `end = \"2017:01:02:23:59:59 \"`, and `granularity = \"Day \"` means that we need to find the logs within the inclusive range from **Jan. 1st 2017** to **Jan. 2nd 2017**, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.\n\n"}
{"question": "On a **single-threaded** CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.\n\nFunction calls are **stored in a [call stack](https://en.wikipedia.org/wiki/Call_stack)**: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is **the current function being executed**. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{ \"start \" | \"end \"}:{timestamp} \"`. For example, `\"0:start:3 \"` means a function call with function ID `0` **started at the beginning** of timestamp `3`, and `\"1:end:2 \"` means a function call with function ID `1` **ended at the end** of timestamp `2`. Note that a function can be called **multiple times, possibly recursively**.\n\nA function's **exclusive time** is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the **exclusive time** is `2 + 1 = 3`.\n\nReturn _the **exclusive time** of each function in an array, where the value at the_ `ith` _index represents the exclusive time for the function with ID_ `i`.\n\n"}
{"question": "In LeetCode Store, there are `n` items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\n\nYou are given an integer array `price` where `price[i]` is the price of the `ith` item, and an integer array `needs` where `needs[i]` is the number of pieces of the `ith` item you want to buy.\n\nYou are also given an array `special` where `special[i]` is of size `n + 1` where `special[i][j]` is the number of pieces of the `jth` item in the `ith` offer and `special[i][n]` (i.e., the last integer in the array) is the price of the `ith` offer.\n\nReturn _the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers_. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\n\n"}
{"question": "Solve a given equation and return the value of `'x'` in the form of a string `\"x=#value \"`. The equation contains only `'+'`, `'-'` operation, the variable `'x'` and its coefficient. You should return `\"No solution \"` if there is no solution for the equation, or `\"Infinite solutions \"` if there are infinite solutions for the equation.\n\nIf there is exactly one solution for the equation, we ensure that the value of `'x'` is an integer.\n\n"}
{"question": "Design your implementation of the circular double-ended queue (deque).\n\nImplement the `MyCircularDeque` class:\n\n*   `MyCircularDeque(int k)` Initializes the deque with a maximum size of `k`.\n*   `boolean insertFront()` Adds an item at the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean insertLast()` Adds an item at the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean deleteFront()` Deletes an item from the front of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `boolean deleteLast()` Deletes an item from the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise.\n*   `int getFront()` Returns the front item from the Deque. Returns `-1` if the deque is empty.\n*   `int getRear()` Returns the last item from Deque. Returns `-1` if the deque is empty.\n*   `boolean isEmpty()` Returns `true` if the deque is empty, or `false` otherwise.\n*   `boolean isFull()` Returns `true` if the deque is full, or `false` otherwise.\n\n"}
{"question": "You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]` and `lefti < righti`.\n\nA pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain** of pairs can be formed in this fashion.\n\nReturn _the length longest chain which can be formed_.\n\nYou do not need to use up all the given intervals. You can select pairs in any order.\n\n"}
{"question": "Given a string `s`, return _the number of **palindromic substrings** in it_.\n\nA string is a **palindrome** when it reads the same backward as forward.\n\nA **substring** is a contiguous sequence of characters within the string.\n\n"}
{"question": "In English, we have a concept called **root**, which can be followed by some other word to form another longer word - let's call this word **successor**. For example, when the **root** `\"an \"` is followed by the **successor** word `\"other \"`, we can form a new word `\"another \"`.\n\nGiven a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the **successors** in the sentence with the **root** forming it. If a **successor** can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**.\n\nReturn _the `sentence`_ after the replacement.\n\n"}
{"question": "In the world of Dota2, there are two parties: the Radiant and the Dire.\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights:\n\n*   **Ban one senator's right:** A senator can make another senator lose all his rights in this and all the following rounds.\n*   **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string `senate` representing each senator's party belonging. The character `'R'` and `'D'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`.\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant \"` or `\"Dire \"`.\n\n"}
{"question": "There is only one character `'A'` on the screen of a notepad. You can perform one of two operations on this notepad for each step:\n\n*   Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n*   Paste: You can paste the characters which are copied last time.\n\nGiven an integer `n`, return _the minimum number of operations to get the character_ `'A'` _exactly_ `n` _times on the screen_.\n\n"}
{"question": "Imagine you have a special keyboard with the following keys:\n\n*   A: Print one `'A'` on the screen.\n*   Ctrl-A: Select the whole screen.\n*   Ctrl-C: Copy selection to buffer.\n*   Ctrl-V: Print buffer on screen appending it after what has already been printed.\n\nGiven an integer n, return _the maximum number of_ `'A'` _you can print on the screen with **at most**_ `n` _presses on the keys_.\n\n"}
{"question": "Given the `root` of a binary tree, return all **duplicate subtrees**.\n\nFor each kind of duplicate subtrees, you only need to return the root node of any **one** of them.\n\nTwo trees are **duplicate** if they have the **same structure** with the **same node values**.\n\n"}
{"question": "You are given an integer array `nums` with no duplicates. A **maximum binary tree** can be built recursively from `nums` using the following algorithm:\n\n1.  Create a root node whose value is the maximum value in `nums`.\n2.  Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value.\n3.  Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value.\n\nReturn _the **maximum binary tree** built from_ `nums`.\n\n"}
{"question": "Given the `root` of a binary tree, construct a **0-indexed** `m x n` string matrix `res` that represents a **formatted layout** of the tree. The formatted layout matrix should be constructed using the following rules:\n\n*   The **height** of the tree is `height` and the number of rows `m` should be equal to `height + 1`.\n*   The number of columns `n` should be equal to `2height+1 - 1`.\n*   Place the **root node** in the **middle** of the **top row** (more formally, at location `res[0][(n-1)/2]`).\n*   For each node that has been placed in the matrix at position `res[r][c]`, place its **left child** at `res[r+1][c-2height-r-1]` and its **right child** at `res[r+1][c+2height-r-1]`.\n*   Continue this process until all the nodes in the tree have been placed.\n*   Any empty cells should contain the empty string `\" \"`.\n\nReturn _the constructed matrix_ `res`.\n\n"}
{"question": "Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.\n\nAn integer `a` is closer to `x` than an integer `b` if:\n\n*   `|a - x| < |b - x|`, or\n*   `|a - x| == |b - x|` and `a < b`\n\n"}
{"question": "You are given an integer array `nums` that is **sorted in non-decreasing order**.\n\nDetermine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true:\n\n*   Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer).\n*   All subsequences have a length of `3` **or more**.\n\nReturn `true` _if you can split_ `nums` _according to the above conditions, or_ `false` _otherwise_.\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not).\n\n"}
{"question": "Given the `root` of a binary tree, return _the **maximum width** of the given tree_.\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\nThe **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is **guaranteed** that the answer will in the range of a **32-bit** signed integer.\n\n"}
{"question": "Given the `root` of a binary tree, return `true` _if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree_.\n\n"}
{"question": "Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**.\n\nWe define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`).\n\n"}
{"question": "If the depth of a tree is smaller than `5`, then this tree can be represented by an array of three-digit integers. For each integer in this array:\n\n*   The hundreds digit represents the depth `d` of this node where `1 <= d <= 4`.\n*   The tens digit represents the position `p` of this node in the level it belongs to where `1 <= p <= 8`. The position is the same as that in a full binary tree.\n*   The units digit represents the value `v` of this node where `0 <= v <= 9`.\n\nGiven an array of **ascending** three-digit integers `nums` representing a binary tree with a depth smaller than `5`, return _the sum of all paths from the root towards the leaves_.\n\nIt is **guaranteed** that the given array represents a valid connected binary tree.\n\n"}
{"question": "Given two integers `n` and `k`, construct a list `answer` that contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement:\n\n*   Suppose this list is `answer = [a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers.\n\nReturn _the list_ `answer`. If there multiple valid answers, return **any of them**.\n\n"}
{"question": "Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**.\n\nReturn _the root of the trimmed binary search tree_. Note that the root may change depending on the given bounds.\n\n"}
{"question": "You are given an integer `num`. You can swap two digits at most once to get the maximum valued number.\n\nReturn _the maximum valued number you can get_.\n\n"}
{"question": "There is a room with `n` bulbs labeled from `1` to `n` that all are turned on initially, and **four buttons** on the wall. Each of the four buttons has a different functionality where:\n\n*   **Button 1:** Flips the status of all the bulbs.\n*   **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`).\n*   **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`).\n*   **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`).\n\nYou must make **exactly** `presses` button presses in total. For each press, you may pick **any** of the four buttons to press.\n\nGiven the two integers `n` and `presses`, return _the number of **different possible statuses** after performing all_ `presses` _button presses_.\n\n"}
{"question": "Given an integer array `nums`, return _the number of longest increasing subsequences._\n\n**Notice** that the sequence has to be **strictly** increasing.\n\n"}
{"question": "Design a data structure that is initialized with a list of **different** words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\n\nImplement the `MagicDictionary` class:\n\n*   `MagicDictionary()` Initializes the object.\n*   `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.\n*   `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`.\n\n"}
{"question": "Design a map that allows you to do the following:\n\n*   Maps a string key to a given value.\n*   Returns the sum of the values that have a key with a prefix equal to a given string.\n\nImplement the `MapSum` class:\n\n*   `MapSum()` Initializes the `MapSum` object.\n*   `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.\n*   `int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.\n\n"}
{"question": "Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` _if_ `s` _is **valid**_.\n\nThe following rules define a **valid** string:\n\n*   Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.\n*   Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.\n*   Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.\n*   `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\" \"`.\n\n"}
{"question": "Given a `time` represented in the format `\"HH:MM \"`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\n\nYou may assume the given input string is always valid. For example, `\"01:34 \"`, `\"12:09 \"` are all valid. `\"1:34 \"`, `\"12:9 \"` are all invalid.\n\n"}
{"question": "In this problem, a tree is an **undirected graph** that is connected and has no cycles.\n\nYou are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two **different** vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\nReturn _an edge that can be removed so that the resulting graph is a tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the input.\n\n"}
{"question": "Given two strings `a` and `b`, return _the minimum number of times you should repeat string_ `a` _so that string_ `b` _is a substring of it_. If it is impossible for `b`​​​​​​ to be a substring of `a` after repeating it, return `-1`.\n\n**Notice:** string `\"abc \"` repeated 0 times is `\" \"`, repeated 1 time is `\"abc \"` and repeated 2 times is `\"abcabc \"`.\n\n"}
{"question": "Given the `root` of a binary tree, return _the length of the longest path, where each node in the path has the same value_. This path may or may not pass through the root.\n\n**The length of the path** between two nodes is represented by the number of edges between them.\n\n"}
{"question": "On an `n x n` chessboard, a knight starts at the cell `(row, column)` and attempts to make exactly `k` moves. The rows and columns are **0-indexed**, so the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`.\n\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\n\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\n\nThe knight continues moving until it has made exactly `k` moves or has moved off the chessboard.\n\nReturn _the probability that the knight remains on the board after it has stopped moving_.\n\n"}
{"question": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\n\nYou are given an array of employees `employees` where:\n\n*   `employees[i].id` is the ID of the `ith` employee.\n*   `employees[i].importance` is the importance value of the `ith` employee.\n*   `employees[i].subordinates` is a list of the IDs of the direct subordinates of the `ith` employee.\n\nGiven an integer `id` that represents an employee's ID, return _the **total** importance value of this employee and all their direct and indirect subordinates_.\n\n"}
{"question": "Given an array of strings `words` and an integer `k`, return _the_ `k` _most frequent strings_.\n\nReturn the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nAn island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\n\nReturn _the number of **distinct** islands_.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\n\nThe **area** of an island is the number of cells with a value `1` in the island.\n\nReturn _the maximum **area** of an island in_ `grid`. If there is no island, return `0`.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n"}
{"question": "You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return _the root node of the BST after the insertion_. It is **guaranteed** that the new value does not exist in the original BST.\n\n**Notice** that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return **any of them**.\n\n"}
{"question": "This is an **_interactive problem_**.\n\nYou have a sorted array of **unique** elements and an **unknown size**. You do not have an access to the array but you can use the `ArrayReader` interface to access it. You can call `ArrayReader.get(i)` that:\n\n*   returns the value at the `ith` index (**0-indexed**) of the secret array (i.e., `secret[i]`), or\n*   returns `231 - 1` if the `i` is out of the boundary of the array.\n\nYou are also given an integer `target`.\n\nReturn the index `k` of the hidden array where `secret[k] == target` or return `-1` otherwise.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n"}
{"question": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.  \nA node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.  \nIf you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are **0-indexed**.\n\nImplement the `MyLinkedList` class:\n\n*   `MyLinkedList()` Initializes the `MyLinkedList` object.\n*   `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.\n*   `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n*   `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.\n*   `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**.\n*   `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.\n\n"}
{"question": "Given a Circular Linked List node, which is sorted in non-descending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list and may not necessarily be the smallest value in the circular list.\n\nIf there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.\n\nIf the list is empty (i.e., the given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the originally given node.\n\n"}
{"question": "Given two strings `s1` and `s2`, return _the lowest **ASCII** sum of deleted characters to make two strings equal_.\n\n"}
{"question": "Given an array of integers `nums` and an integer `k`, return _the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than_ `k`.\n\n"}
{"question": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n"}
{"question": "Given two integer arrays `nums1` and `nums2`, return _the maximum length of a subarray that appears in **both** arrays_.\n\n"}
{"question": "Given an array of strings `words` representing an English Dictionary, return _the longest word in_ `words` _that can be built one character at a time by other words in_ `words`.\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\n\n"}
{"question": "Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are **emails** representing emails of the account.\n\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\n\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails **in sorted order**. The accounts themselves can be returned in **any order**.\n\n"}
{"question": "Given a C++ program, remove comments from it. The program source is an array of strings `source` where `source[i]` is the `ith` line of the source code. This represents the result of splitting the original source code string by the newline character `'\\n'`.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\n*   The string `\"// \"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\n*   The string `\"/* \"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/ \"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/ \"` does not yet end the block comment, as the ending would be overlapping the beginning.\n\nThe first effective comment takes precedence over others.\n\n*   For example, if the string `\"// \"` occurs in a block comment, it is ignored.\n*   Similarly, if the string `\"/* \"` occurs in a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.\n\n*   For example, `source = \"string s = \"/* Not a comment. */ \"; \"` will not be a test case.\n\nAlso, nothing else such as defines or macros will interfere with the comments.\n\nIt is guaranteed that every open block comment will eventually be closed, so `\"/* \"` outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\n\nAfter removing the comments from the source code, return _the source code in the same format_.\n\n"}
{"question": "This question is about implementing a basic elimination algorithm for Candy Crush.\n\nGiven an `m x n` integer array `board` representing the grid of candy where `board[i][j]` represents the type of candy. A value of `board[i][j] == 0` represents that the cell is empty.\n\nThe given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:\n\n*   If three or more candies of the same type are adjacent vertically or horizontally, crush them all at the same time - these positions become empty.\n*   After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. No new candies will drop outside the top boundary.\n*   After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.\n*   If there does not exist more candies that can be crushed (i.e., the board is stable), then return the current board.\n\nYou need to perform the above rules until the board becomes stable, then return _the stable board_.\n\n"}
{"question": "Given the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts.\n\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\n\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\n\nReturn _an array of the_ `k` _parts_.\n\n"}
{"question": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **double booking**.\n\nA **double booking** happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nImplement the `MyCalendar` class:\n\n*   `MyCalendar()` Initializes the calendar object.\n*   `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **double booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n"}
{"question": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **triple booking**.\n\nA **triple booking** happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\n\nThe event can be represented as a pair of integers `start` and `end` that represents a booking on the half-open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.\n\nImplement the `MyCalendarTwo` class:\n\n*   `MyCalendarTwo()` Initializes the calendar object.\n*   `boolean book(int start, int end)` Returns `true` if the event can be added to the calendar successfully without causing a **triple booking**. Otherwise, return `false` and do not add the event to the calendar.\n\n"}
{"question": "We are given an array `asteroids` of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\n\n"}
{"question": "We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`.\n\nGiven two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.\n\nReturn `true` _if `sentence1` and `sentence2` are similar, or_ `false` _if they are not similar_.\n\nTwo sentences are similar if:\n\n*   They have **the same length** (i.e., the same number of words)\n*   `sentence1[i]` and `sentence2[i]` are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, then `a` and `c` are **similar**.\n\n"}
{"question": "An integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.\n\nGiven an integer `n`, return _the largest number that is less than or equal to_ `n` _with **monotone increasing digits**_.\n\n"}
{"question": "Given an array of integers `temperatures` represents the daily temperatures, return _an array_ `answer` _such that_ `answer[i]` _is the number of days you have to wait after the_ `ith` _day to get a warmer temperature_. If there is no future day for which this is possible, keep `answer[i] == 0` instead.\n\n"}
{"question": "You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times:\n\n*   Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`.\n\nReturn _the **maximum number of points** you can earn by applying the above operation some number of times_.\n\n"}
{"question": "Given the `root` of a binary tree where every node has **a unique value** and a target integer `k`, return _the value of the **nearest leaf node** to the target_ `k` _in the tree_.\n\n**Nearest to a leaf** means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.\n\n"}
{"question": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node `k`. Return _the **minimum** time it takes for all the_ `n` _nodes to receive the signal_. If it is impossible for all the `n` nodes to receive the signal, return `-1`.\n\n"}
{"question": "Given an `m x n` integer matrix `grid` where each entry is only `0` or `1`, return _the number of **corner rectangles**_.\n\nA **corner rectangle** is four distinct `1`'s on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value `1`. Also, all four `1`'s used must be distinct.\n\n"}
{"question": "An **IP address** is a formatted 32-bit unsigned integer where each group of 8 bits is printed as a decimal number and the dot character `'.'` splits the groups.\n\n*   For example, the binary number `00001111 10001000 11111111 01101011` (spaces added for clarity) formatted as an IP address would be `\"15.136.255.107 \"`.\n\nA **CIDR block** is a format used to denote a specific set of IP addresses. It is a string consisting of a base IP address, followed by a slash, followed by a prefix length `k`. The addresses it covers are all the IPs whose **first `k` bits** are the same as the base IP address.\n\n*   For example, `\"123.45.67.89/20 \"` is a CIDR block with a prefix length of `20`. Any IP address whose binary representation matches `01111011 00101101 0100xxxx xxxxxxxx`, where `x` can be either `0` or `1`, is in the set covered by the CIDR block.\n\nYou are given a start IP address `ip` and the number of IP addresses we need to cover `n`. Your goal is to use **as few CIDR blocks as possible** to cover all the IP addresses in the **inclusive** range `[ip, ip + n - 1]` **exactly**. No other IP addresses outside of the range should be covered.\n\nReturn _the **shortest** list of **CIDR blocks** that covers the range of IP addresses. If there are multiple answers, return **any** of them_.\n\n"}
{"question": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n"}
{"question": "You are standing at position `0` on an infinite number line. There is a destination at position `target`.\n\nYou can make some number of moves `numMoves` so that:\n\n*   On each move, you can either go left or right.\n*   During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction.\n\nGiven the integer `target`, return _the **minimum** number of moves required (i.e., the minimum_ `numMoves`_) to reach the destination_.\n\n"}
{"question": "You are given an elevation map represents as an integer array `heights` where `heights[i]` representing the height of the terrain at index `i`. The width at each index is `1`. You are also given two integers `volume` and `k`. `volume` units of water will fall at index `k`.\n\nWater first drops at the index `k` and rests on top of the highest terrain or water at that index. Then, it flows according to the following rules:\n\n*   If the droplet would eventually fall by moving left, then move left.\n*   Otherwise, if the droplet would eventually fall by moving right, then move right.\n*   Otherwise, rise to its current position.\n\nHere, **\"eventually fall \"** means that the droplet will eventually be at a lower level if it moves in that direction. Also, level means the height of the terrain plus any water in that column.\n\nWe can assume there is infinitely high terrain on the two sides out of bounds of the array. Also, there could not be partial water being spread out evenly on more than one grid block, and each unit of water has to be in exactly one block.\n\n"}
{"question": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top.\n\nTo make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given as a list of three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\n\n*   For example, `\"ABC \"` represents a triangular pattern with a `'C'` block stacked on top of an `'A'` (left) and `'B'` (right) block. Note that this is different from `\"BAC \"` where `'B'` is on the left bottom and `'A'` is on the right bottom.\n\nYou start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid.\n\nGiven `bottom` and `allowed`, return `true` _if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in_ `allowed`_, or_ `false` _otherwise_.\n\n"}
{"question": "Given an array of keywords `words` and a string `s`, make all appearances of all keywords `words[i]` in `s` bold. Any letters between **and** tags become bold.\n\nReturn `s` _after adding the bold tags_. The returned string should use the least number of tags possible, and the tags should form a valid combination.\n\n"}
{"question": "You are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\n\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`.\n\nReturn _a list of integers representing the size of these parts_.\n\n"}
{"question": "You are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`.\n\nReturn _the order of the largest **axis-aligned** plus sign of_ 1_'s contained in_ `grid`. If there is none, return `0`.\n\nAn **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s.\n\n"}
{"question": "Given a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\nReturn _any possible rearrangement of_ `s` _or return_ `\" \"` _if not possible_.\n\n"}
{"question": "You are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`.\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\nReturn _the largest number of chunks we can make to sort the array_.\n\n"}
{"question": "You are given an integer array `nums` of length `n` which represents a permutation of all the integers in the range `[0, n - 1]`.\n\nThe number of **global inversions** is the number of the different pairs `(i, j)` where:\n\n*   `0 <= i < j < n`\n*   `nums[i] > nums[j]`\n\nThe number of **local inversions** is the number of indices `i` where:\n\n*   `0 <= i < n - 1`\n*   `nums[i] > nums[i + 1]`\n\nReturn `true` _if the number of **global inversions** is equal to the number of **local inversions**_.\n\n"}
{"question": "Given the `root` of a binary search tree (BST) and an integer `target`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value. It Is not necessarily the case that the tree contains a node with the value `target`.\n\nAdditionally, most of the structure of the original tree should remain. Formally, for any child `c` with parent `p` in the original tree, if they are both in the same subtree after the split, then node `c` should still have the parent `p`.\n\nReturn _an array of the two roots of the two subtrees_.\n\n"}
{"question": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like `\"RXXLRXRXL \"`, a move consists of either replacing one occurrence of `\"XL \"` with `\"LX \"`, or replacing one occurrence of `\"RX \"` with `\"XR \"`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.\n\n"}
{"question": "We build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.\n\n*   For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`.\n\nGiven two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows.\n\n"}
{"question": "There is a forest with an unknown number of rabbits. We asked n rabbits **\"How many rabbits have the same color as you? \"** and collected the answers in an integer array `answers` where `answers[i]` is the answer of the `ith` rabbit.\n\nGiven the array `answers`, return _the minimum number of rabbits that could be in the forest_.\n\n"}
{"question": "Given a string `s`, you can transform every letter individually to be lowercase or uppercase to create another string.\n\nReturn _a list of all possible strings we could create_. Return the output in **any order**.\n\n"}
{"question": "There is an **undirected** graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:\n\n*   There are no self-edges (`graph[u]` does not contain `u`).\n*   There are no parallel edges (`graph[u]` does not contain duplicate values).\n*   If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).\n*   The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.\n\nA graph is **bipartite** if the nodes can be partitioned into two independent sets `A` and `B` such that **every** edge in the graph connects a node in set `A` and a node in set `B`.\n\nReturn `true` _if and only if it is **bipartite**_.\n\n"}
{"question": "You are given a sorted integer array `arr` containing `1` and **prime** numbers, where all the integers of `arr` are unique. You are also given an integer `k`.\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.\n\nReturn _the_ `kth` _smallest fraction considered_. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.\n\n"}
{"question": "There are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`.\n\nYou are also given three integers `src`, `dst`, and `k`, return _**the cheapest price** from_ `src` _to_ `dst` _with at most_ `k` _stops._ If there is no such route, return `-1`.\n\n"}
{"question": "An integer `x` is a **good** if after rotating each digit individually by 180 degrees, we get a valid number that is different from `x`. Each digit must be rotated - we cannot choose to leave it alone.\n\nA number is valid if each digit remains a digit after rotation. For example:\n\n*   `0`, `1`, and `8` rotate to themselves,\n*   `2` and `5` rotate to each other (in this case they are rotated in a different direction, in other words, `2` or `5` gets mirrored),\n*   `6` and `9` rotate to each other, and\n*   the rest of the numbers do not rotate to any other number and become invalid.\n\nGiven an integer `n`, return _the number of **good** integers in the range_ `[1, n]`.\n\n"}
{"question": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]` that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are **integral coordinates**.\n\nEach turn, you and all the ghosts may independently choose to either **move 1 unit** in any of the four cardinal directions: north, east, south, or west, or **stay still**. All actions happen **simultaneously**.\n\nYou escape if and only if you can reach the target **before** any ghost reaches you. If you reach any square (including the target) at the **same time** as a ghost, it **does not** count as an escape.\n\nReturn `true` _if it is possible to escape regardless of how the ghosts move, otherwise return_ `false`_._\n\n"}
{"question": "You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes.\n\nGiven an integer n, return _the number of ways to tile an_ `2 x n` _board_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\n\n"}
{"question": "You are given two strings order and s. All the characters of `order` are **unique** and were sorted in some custom order previously.\n\nPermute the characters of `s` so that they match the order that `order` was sorted. More specifically, if a character `x` occurs before a character `y` in `order`, then `x` should occur before `y` in the permuted string.\n\nReturn _any permutation of_ `s` _that satisfies this property_.\n\n"}
{"question": "Given a string `s` and an array of strings `words`, return _the number of_ `words[i]` _that is a subsequence of_ `s`.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\n"}
{"question": "Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\n\nThe board is a `3 x 3` array that consists of characters `' '`, `'X'`, and `'O'`. The `' '` character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\n\n*   Players take turns placing characters into empty squares `' '`.\n*   The first player always places `'X'` characters, while the second player always places `'O'` characters.\n*   `'X'` and `'O'` characters are always placed into empty squares, never filled ones.\n*   The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n*   The game also ends if all squares are non-empty.\n*   No more moves can be played if the game is over.\n\n"}
{"question": "Given an integer array `nums` and two integers `left` and `right`, return _the number of contiguous non-empty **subarrays** such that the value of the maximum array element in that subarray is in the range_ `[left, right]`.\n\nThe test cases are generated so that the answer will fit in a **32-bit** integer.\n\n"}
{"question": "Given a directed acyclic graph (**DAG**) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in **any order**.\n\nThe graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).\n\n"}
{"question": "We stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row. Each glass holds one cup of champagne.\n\nThen, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\nNow after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)\n\n"}
{"question": "There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`.\n\nA node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node).\n\nReturn _an array containing all the **safe nodes** of the graph_. The answer should be sorted in **ascending** order.\n\n"}
{"question": "There is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\nA city's **skyline** is the outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`\\-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\nReturn _the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction_.\n\n"}
{"question": "There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations:\n\n1.  Serve `100` ml of **soup A** and `0` ml of **soup B**,\n2.  Serve `75` ml of **soup A** and `25` ml of **soup B**,\n3.  Serve `50` ml of **soup A** and `50` ml of **soup B**, and\n4.  Serve `25` ml of **soup A** and `75` ml of **soup B**.\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n\n**Note** that we do not have an operation where all `100` ml's of **soup B** are used first.\n\nReturn _the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time_. Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "Sometimes people repeat letters to represent extra feeling. For example:\n\n*   `\"hello \" -> \"heeellooo \"`\n*   `\"hi \" -> \"hiiii \"`\n\nIn these strings like `\"heeellooo \"`, we have groups of adjacent letters that are all the same: `\"h \"`, `\"eee \"`, `\"ll \"`, `\"ooo \"`.\n\nYou are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is **three or more**.\n\n*   For example, starting with `\"hello \"`, we could do an extension on the group `\"o \"` to get `\"hellooo \"`, but we cannot get `\"helloo \"` since the group `\"oo \"` has a size less than three. Also, we could do another extension like `\"ll \" -> \"lllll \"` to get `\"helllllooo \"`. If `s = \"helllllooo \"`, then the query word `\"hello \"` would be **stretchy** because of these two extension operations: `query = \"hello \" -> \"hellooo \" -> \"helllllooo \" = s`.\n\nReturn _the number of query strings that are **stretchy**_.\n\n"}
{"question": "A website domain `\"discuss.leetcode.com \"` consists of various subdomains. At the top level, we have `\"com \"`, at the next level, we have `\"leetcode.com \"` and at the lowest level, `\"discuss.leetcode.com \"`. When we visit a domain like `\"discuss.leetcode.com \"`, we will also visit the parent domains `\"leetcode.com \"` and `\"com \"` implicitly.\n\nA **count-paired domain** is a domain that has one of the two formats `\"rep d1.d2.d3 \"` or `\"rep d1.d2 \"` where `rep` is the number of visits to the domain and `d1.d2.d3` is the domain itself.\n\n*   For example, `\"9001 discuss.leetcode.com \"` is a **count-paired domain** that indicates that `discuss.leetcode.com` was visited `9001` times.\n\nGiven an array of **count-paired domains** `cpdomains`, return _an array of the **count-paired domains** of each subdomain in the input_. You may return the answer in **any order**.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.\n\nNote that the partition must use every integer in `nums`, and that the score is not necessarily an integer.\n\nReturn _the maximum **score** you can achieve of all the possible partitions_. Answers within `10-6` of the actual answer will be accepted.\n\n"}
{"question": "Given the `root` of a binary tree, return _the same tree where every subtree (of the given tree) not containing a_ `1` _has been removed_.\n\nA subtree of a node `node` is `node` plus every node that is a descendant of `node`.\n\n"}
{"question": "We had some 2-dimensional coordinates, like `\"(1, 3) \"` or `\"(2, 0.5) \"`. Then, we removed all commas, decimal points, and spaces and ended up with the string s.\n\n*   For example, `\"(1, 3) \"` becomes `s = \"(13) \"` and `\"(2, 0.5) \"` becomes `s = \"(205) \"`.\n\nReturn _a list of strings representing all possibilities for what our original coordinates could have been_.\n\nOur original representation never had extraneous zeroes, so we never started with numbers like `\"00 \"`, `\"0.0 \"`, `\"0.00 \"`, `\"1.0 \"`, `\"001 \"`, `\"00.01 \"`, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like `\".1 \"`.\n\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\n\n"}
{"question": "You are given the `head` of a linked list containing unique integer values and an integer array `nums` that is a subset of the linked list values.\n\nReturn _the number of connected components in_ `nums` _where two values are connected if they appear **consecutively** in the linked list_.\n\n"}
{"question": "A **valid encoding** of an array of `words` is any reference string `s` and array of indices `indices` such that:\n\n*   `words.length == indices.length`\n*   The reference string `s` ends with the `'#'` character.\n*   For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.\n\nGiven an array of `words`, return _the **length of the shortest reference string**_ `s` _possible of any **valid encoding** of_ `words`_._\n\n"}
{"question": "You are given two **0-indexed** integer arrays `fronts` and `backs` of length `n`, where the `ith` card has the positive integer `fronts[i]` printed on the front and `backs[i]` printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\n\nAfter flipping the cards, an integer is considered **good** if it is facing down on some card and **not** facing up on any card.\n\nReturn _the minimum possible good integer after flipping the cards_. If there are no good integers, return `0`.\n\n"}
{"question": "Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\nReturn _the number of binary trees we can make_. The answer may be too large so return the answer **modulo** `109 + 7`.\n\n"}
{"question": "There are `n` persons on a social media website. You are given an integer array `ages` where `ages[i]` is the age of the `ith` person.\n\nA Person `x` will not send a friend request to a person `y` (`x != y`) if any of the following conditions is true:\n\n*   `age[y] <= 0.5 * age[x] + 7`\n*   `age[y] > age[x]`\n*   `age[y] > 100 && age[x] < 100`\n\nOtherwise, `x` will send a friend request to `y`.\n\nNote that if `x` sends a request to `y`, `y` will not necessarily send a request to `x`. Also, a person will not send a friend request to themself.\n\nReturn _the total number of friend requests made_.\n\n"}
{"question": "You have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where:\n\n*   `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and\n*   `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`).\n\nEvery worker can be assigned **at most one job**, but one job can be **completed multiple times**.\n\n*   For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`.\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n"}
{"question": "You are given a personal information string `s`, representing either an **email address** or a **phone number**. Return _the **masked** personal information using the below rules_.\n\n**Email address:**\n\nAn email address is:\n\n*   A **name** consisting of uppercase and lowercase English letters, followed by\n*   The `'@'` symbol, followed by\n*   The **domain** consisting of uppercase and lowercase English letters with a dot `'.'` somewhere in the middle (not the first or last character).\n\nTo mask an email:\n\n*   The uppercase letters in the **name** and **domain** must be converted to lowercase letters.\n*   The middle letters of the **name** (i.e., all but the first and last letters) must be replaced by 5 asterisks `\"***** \"`.\n\n**Phone number:**\n\nA phone number is formatted as follows:\n\n*   The phone number contains 10-13 digits.\n*   The last 10 digits make up the **local number**.\n*   The remaining 0-3 digits, in the beginning, make up the **country code**.\n*   **Separation characters** from the set `{'+', '-', '(', ')', ' '}` separate the above digits in some way.\n\nTo mask a phone number:\n\n*   Remove all **separation characters**.\n*   The masked phone number should have the form:\n    *   `\"***-***-XXXX \"` if the country code has 0 digits.\n    *   `\"+*-***-***-XXXX \"` if the country code has 1 digit.\n    *   `\"+**-***-***-XXXX \"` if the country code has 2 digits.\n    *   `\"+***-***-***-XXXX \"` if the country code has 3 digits.\n*   `\"XXXX \"` is the last 4 digits of the **local number**.\n\n"}
{"question": "You are given a **0-indexed** string `s` that you must perform `k` replacement operations on. The replacement operations are given as three **0-indexed** parallel arrays, `indices`, `sources`, and `targets`, all of length `k`.\n\nTo complete the `ith` replacement operation:\n\n1.  Check if the **substring** `sources[i]` occurs at index `indices[i]` in the **original string** `s`.\n2.  If it does not occur, **do nothing**.\n3.  Otherwise if it does occur, **replace** that substring with `targets[i]`.\n\nFor example, if `s = \"abcd \"`, `indices[i] = 0`, `sources[i] = \"ab \"`, and `targets[i] = \"eee \"`, then the result of this replacement will be `\"eeecd \"`.\n\nAll replacement operations must occur **simultaneously**, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will **not overlap**.\n\n*   For example, a testcase with `s = \"abc \"`, `indices = [0, 1]`, and `sources = [ \"ab \", \"bc \"]` will not be generated because the `\"ab \"` and `\"bc \"` replacements overlap.\n\nReturn _the **resulting string** after performing all replacement operations on_ `s`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "You are given two images, `img1` and `img2`, represented as binary, square matrices of size `n x n`. A binary matrix has only `0`s and `1`s as values.\n\nWe **translate** one image however we choose by sliding all the `1` bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the **overlap** by counting the number of positions that have a `1` in **both** images.\n\nNote also that a translation does **not** include any kind of rotation. Any `1` bits that are translated outside of the matrix borders are erased.\n\nReturn _the largest possible overlap_.\n\n"}
{"question": "Alice plays the following game, loosely based on the card game **\"21 \"**.\n\nAlice starts with `0` points and draws numbers while she has less than `k` points. During each draw, she gains an integer number of points randomly from the range `[1, maxPts]`, where `maxPts` is an integer. Each draw is independent and the outcomes have equal probabilities.\n\nAlice stops drawing numbers when she gets `k` **or more points**.\n\nReturn the probability that Alice has `n` or fewer points.\n\nAnswers within `10-5` of the actual answer are considered accepted.\n\n"}
{"question": "There are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\nYou are given a string `dominoes` representing the initial state where:\n\n*   `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left,\n*   `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and\n*   `dominoes[i] = '.'`, if the `ith` domino has not been pushed.\n\nReturn _a string representing the final state_.\n\n"}
{"question": "A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers **from** `1` **to** `9` such that each row, column, and both diagonals all have the same sum.\n\nGiven a `row x col` `grid` of integers, how many `3 x 3` \"magic square \" subgrids are there? (Each subgrid is contiguous).\n\n"}
{"question": "There are `n` rooms labeled from `0` to `n - 1` and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\nWhen you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\nGiven an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` _if you can visit **all** the rooms, or_ `false` _otherwise_.\n\n"}
{"question": "You are given a string of digits `num`, such as `\"123456579 \"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`.\n\nFormally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that:\n\n*   `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type),\n*   `f.length >= 3`, and\n*   `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`.\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself.\n\nReturn any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done.\n\n"}
{"question": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n*   `arr.length >= 3`\n*   There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `arr`, return _the length of the longest subarray, which is a mountain_. Return `0` if there is no mountain subarray.\n\n"}
{"question": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards.\n\nGiven an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.\n\n"}
{"question": "You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length.\n\nCall the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`).\n\n*   For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.\n\nNow for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times.\n\nReturn _the final string after all such shifts to s are applied_.\n\n"}
{"question": "You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty **(0-indexed)**.\n\nThere is at least one empty seat, and at least one person sitting.\n\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\n\nReturn _that maximum distance to the closest person_.\n\n"}
{"question": "There is a group of `n` people labeled from `0` to `n - 1` where each person has a different amount of money and a different level of quietness.\n\nYou are given an array `richer` where `richer[i] = [ai, bi]` indicates that `ai` has more money than `bi` and an integer array `quiet` where `quiet[i]` is the quietness of the `ith` person. All the given data in richer are **logically correct** (i.e., the data will not lead you to a situation where `x` is richer than `y` and `y` is richer than `x` at the same time).\n\nReturn _an integer array_ `answer` _where_ `answer[x] = y` _if_ `y` _is the least quiet person (that is, the person_ `y` _with the smallest value of_ `quiet[y]`_) among all people who definitely have equal to or more money than the person_ `x`.\n\n"}
{"question": "An array `arr` a **mountain** if the following properties hold:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven a mountain array `arr`, return the index `i` such that `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.\n\nYou must solve it in `O(log(arr.length))` time complexity.\n\n"}
{"question": "There are `n` cars going to the same destination along a one-lane road. The destination is `target` miles away.\n\nYou are given two integer array `position` and `speed`, both of length `n`, where `position[i]` is the position of the `ith` car and `speed[i]` is the speed of the `ith` car (in miles per hour).\n\nA car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper **at the same speed**. The faster car will **slow down** to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\n\nA **car fleet** is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\n\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\n\nReturn _the **number of car fleets** that will arrive at the destination_.\n\n"}
{"question": "There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`.\n\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`.\n\nDesign a class that simulates the mentioned exam room.\n\nImplement the `ExamRoom` class:\n\n*   `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`.\n*   `int seat()` Returns the label of the seat at which the next student will set.\n*   `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`.\n\n"}
{"question": "Given a balanced parentheses string `s`, return _the **score** of the string_.\n\nThe **score** of a balanced parentheses string is based on the following rule:\n\n*   `\"() \"` has score `1`.\n*   `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings.\n*   `(A)` has score `2 * A`, where `A` is a balanced parentheses string.\n\n"}
{"question": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.\n\nThe square room has walls of length `p` and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0th` receptor.\n\nGiven the two integers `p` and `q`, return _the number of the receptor that the ray meets first_.\n\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`.\n\nA **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\nEvery row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers.\n\nReturn _the highest possible **score** after making any number of **moves** (including zero moves)_.\n\n"}
{"question": "Given the `root` of a binary tree, the value of a target node `target`, and an integer `k`, return _an array of the values of all nodes that have a distance_ `k` _from the target node._\n\nYou can return the answer in **any order**.\n\n"}
{"question": "Given the `root` of a binary tree, the depth of each node is **the shortest distance to the root**.\n\nReturn _the smallest subtree_ such that it contains **all the deepest nodes** in the original tree.\n\nA node is called **the deepest** if it has the largest depth possible among any node in the entire tree.\n\nThe **subtree** of a node is a tree consisting of that node, plus the set of all descendants of that node.\n\n"}
{"question": "Given an integer n, return _the smallest **prime palindrome** greater than or equal to_ `n`.\n\nAn integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number.\n\n*   For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes.\n\nAn integer is a **palindrome** if it reads the same from left to right as it does from right to left.\n\n*   For example, `101` and `12321` are palindromes.\n\nThe test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`.\n\n"}
{"question": "You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\nReturn `true` _if and only if we can do this so that the resulting number is a power of two_.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2` both of the same length. The **advantage** of `nums1` with respect to `nums2` is the number of indices `i` for which `nums1[i] > nums2[i]`.\n\nReturn _any permutation of_ `nums1` _that maximizes its **advantage** with respect to_ `nums2`.\n\n"}
{"question": "A sequence `x1, x2, ..., xn` is _Fibonacci-like_ if:\n\n*   `n >= 3`\n*   `xi + xi+1 == xi+2` for all `i + 2 <= n`\n\nGiven a **strictly increasing** array `arr` of positive integers forming a sequence, return _the **length** of the longest Fibonacci-like subsequence of_ `arr`. If one does not exist, return `0`.\n\nA **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.\n\n"}
{"question": "A robot on an infinite XY-plane starts at point `(0, 0)` facing north. The robot can receive a sequence of these three possible types of `commands`:\n\n*   `-2`: Turn left `90` degrees.\n*   `-1`: Turn right `90` degrees.\n*   `1 <= k <= 9`: Move forward `k` units, one unit at a time.\n\nSome of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\n\nReturn _the **maximum Euclidean distance** that the robot ever gets from the origin **squared** (i.e. if the distance is_ `5`_, return_ `25`_)_.\n\n**Note:**\n\n*   North means +Y direction.\n*   East means +X direction.\n*   South means -Y direction.\n*   West means -X direction.\n\n"}
{"question": "Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\nReturn _the minimum integer_ `k` _such that she can eat all the bananas within_ `h` _hours_.\n\n"}
{"question": "Alice and Bob play a game with piles of stones. There are an **even** number of piles arranged in a row, and each pile has a **positive** integer number of stones `piles[i]`.\n\nThe objective of the game is to end with the most stones. The **total** number of stones across all the piles is **odd**, so there are no ties.\n\nAlice and Bob take turns, with **Alice starting first**. Each turn, a player takes the entire pile of stones either from the **beginning** or from the **end** of the row. This continues until there are no more piles left, at which point the person with the **most stones wins**.\n\nAssuming Alice and Bob play optimally, return `true` _if Alice wins the game, or_ `false` _if Bob wins_.\n\n"}
{"question": "You are given an encoded string `s`. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\n*   If the character read is a letter, that letter is written onto the tape.\n*   If the character read is a digit `d`, the entire current tape is repeatedly written `d - 1` more times in total.\n\nGiven an integer `k`, return _the_ `kth` _letter (**1-indexed)** in the decoded string_.\n\n"}
{"question": "You are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\nReturn _the minimum number of boats to carry every given person_.\n\n"}
{"question": "You start at the cell `(rStart, cStart)` of an `rows x cols` grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\n\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all `rows * cols` spaces of the grid.\n\nReturn _an array of coordinates representing the positions of the grid in the order you visited them_.\n\n"}
{"question": "We want to split a group of `n` people (labeled from `1` to `n`) into two groups of **any size**. Each person may dislike some other people, and they should not go into the same group.\n\nGiven the integer `n` and the array `dislikes` where `dislikes[i] = [ai, bi]` indicates that the person labeled `ai` does not like the person labeled `bi`, return `true` _if it is possible to split everyone into two groups in this way_.\n\n"}
{"question": "Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return _the binary tree_.\n\nIf there exist multiple answers, you can **return any** of them.\n\n"}
{"question": "Given a list of strings `words` and a string `pattern`, return _a list of_ `words[i]` _that match_ `pattern`. You may return the answer in **any order**.\n\nA word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\n"}
{"question": "You are given an array of strings of the same length `words`.\n\nIn one **move**, you can swap any two even indexed characters or any two odd indexed characters of a string `words[i]`.\n\nTwo strings `words[i]` and `words[j]` are **special-equivalent** if after any number of moves, `words[i] == words[j]`.\n\n*   For example, `words[i] = \"zzxy \"` and `words[j] = \"xyzz \"` are **special-equivalent** because we may make the moves `\"zzxy \" -> \"xzzy \" -> \"xyzz \"`.\n\nA **group of special-equivalent strings** from `words` is a non-empty subset of words such that:\n\n*   Every pair of strings in the group are special equivalent, and\n*   The group is the largest size possible (i.e., there is not a string `words[i]` not in the group such that `words[i]` is special-equivalent to every string in the group).\n\nReturn _the number of **groups of special-equivalent strings** from_ `words`.\n\n"}
{"question": "Given an integer `n`, return _a list of all possible **full binary trees** with_ `n` _nodes_. Each node of each tree in the answer must have `Node.val == 0`.\n\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in **any order**.\n\nA **full binary tree** is a binary tree where each node has exactly `0` or `2` children.\n\n"}
{"question": "Given an integer array `arr`, return _the number of distinct bitwise ORs of all the non-empty subarrays of_ `arr`.\n\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n"}
{"question": "We can use run-length encoding (i.e., **RLE**) to encode a sequence of integers. In a run-length encoded array of even length `encoding` (**0-indexed**), for all even `i`, `encoding[i]` tells us the number of times that the non-negative integer value `encoding[i + 1]` is repeated in the sequence.\n\n*   For example, the sequence `arr = [8,8,8,5,5]` can be encoded to be `encoding = [3,8,2,5]`. `encoding = [3,8,0,9,2,5]` and `encoding = [2,8,1,8,2,5]` are also valid **RLE** of `arr`.\n\nGiven a run-length encoded array, design an iterator that iterates through it.\n\nImplement the `RLEIterator` class:\n\n*   `RLEIterator(int[] encoded)` Initializes the object with the encoded array `encoded`.\n*   `int next(int n)` Exhausts the next `n` elements and returns the last element exhausted in this way. If there is no element left to exhaust, return `-1` instead.\n\n"}
{"question": "Design an algorithm that collects daily price quotes for some stock and returns **the span** of that stock's price for the current day.\n\nThe **span** of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.\n\n*   For example, if the prices of the stock in the last four days is `[7,2,1,2]` and the price of the stock today is `2`, then the span of today is `4` because starting from today, the price of the stock was less than or equal `2` for `4` consecutive days.\n*   Also, if the prices of the stock in the last four days is `[7,34,1,2]` and the price of the stock today is `8`, then the span of today is `3` because starting from today, the price of the stock was less than or equal `8` for `3` consecutive days.\n\nImplement the `StockSpanner` class:\n\n*   `StockSpanner()` Initializes the object of the class.\n*   `int next(int price)` Returns the **span** of the stock's price given that today's price is `price`.\n\n"}
{"question": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces.\n\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\n*   You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold.\n*   Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n*   Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\nGiven the integer array `fruits`, return _the **maximum** number of fruits you can pick_.\n\n"}
{"question": "Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`.\n\n"}
{"question": "You are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a [**Boustrophedon style**](https://en.wikipedia.org/wiki/Boustrophedon) starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row.\n\nYou start on square `1` of the board. In each move, starting from square `curr`, do the following:\n\n*   Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`.\n    *   This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board.\n*   If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`.\n*   The game ends when you reach the square `n2`.\n\nA board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` do not have a snake or ladder.\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent snake or ladder.\n\n*   For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`.\n\nReturn _the least number of moves required to reach the square_ `n2`_. If it is not possible to reach the square, return_ `-1`.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`.\n\nFor each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`.\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\nReturn _the minimum **score** of_ `nums` _after changing the values at each index_.\n\n"}
{"question": "You are given two integer arrays `persons` and `times`. In an election, the `ith` vote was cast for `persons[i]` at time `times[i]`.\n\nFor each query at a time `t`, find the person that was leading the election at time `t`. Votes cast at time `t` will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\n\nImplement the `TopVotedCandidate` class:\n\n*   `TopVotedCandidate(int[] persons, int[] times)` Initializes the object with the `persons` and `times` arrays.\n*   `int q(int t)` Returns the number of the person that was leading the election at time `t` according to the mentioned rules.\n\n"}
{"question": "Given an array of integers `nums`, sort the array in ascending order and return it.\n\nYou must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.\n\n"}
{"question": "Given an integer array `nums`, partition it into two (contiguous) subarrays `left` and `right` so that:\n\n*   Every element in `left` is less than or equal to every element in `right`.\n*   `left` and `right` are non-empty.\n*   `left` has the smallest possible size.\n\nReturn _the length of_ `left` _after such a partitioning_.\n\nTest cases are generated such that partitioning exists.\n\n"}
{"question": "You are given two string arrays `words1` and `words2`.\n\nA string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity.\n\n*   For example, `\"wrr \"` is a subset of `\"warrior \"` but is not a subset of `\"world \"`.\n\nA string `a` from `words1` is **universal** if for every string `b` in `words2`, `b` is a subset of `a`.\n\nReturn an array of all the **universal** strings in `words1`. You may return the answer in **any order**.\n\n"}
{"question": "Given a **circular integer array** `nums` of length `n`, return _the maximum possible sum of a non-empty **subarray** of_ `nums`.\n\nA **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`.\n\nA **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`.\n\n"}
{"question": "A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\n\nImplement the `CBTInserter` class:\n\n*   `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree.\n*   `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`.\n*   `TreeNode get_root()` Returns the root node of the tree.\n\n"}
{"question": "A parentheses string is valid if and only if:\n\n*   It is the empty string,\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n*   It can be written as `(A)`, where `A` is a valid string.\n\nYou are given a parentheses string `s`. In one move, you can insert a parenthesis at any position of the string.\n\n*   For example, if `s = \"())) \"`, you can insert an opening parenthesis to be `\"(**(**))) \"` or a closing parenthesis to be `\"())**)**) \"`.\n\nReturn _the minimum number of moves required to make_ `s` _valid_.\n\n"}
{"question": "Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.\n\nAs the answer can be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "A binary string is monotone increasing if it consists of some number of `0`'s (possibly none), followed by some number of `1`'s (also possibly none).\n\nYou are given a binary string `s`. You can flip `s[i]` changing it from `0` to `1` or from `1` to `0`.\n\nReturn _the minimum number of flips to make_ `s` _monotone increasing_.\n\n"}
{"question": "Given a binary array `nums` and an integer `goal`, return _the number of non-empty **subarrays** with a sum_ `goal`.\n\nA **subarray** is a contiguous part of the array.\n\n"}
{"question": "Given an `n x n` array of integers `matrix`, return _the **minimum sum** of any **falling path** through_ `matrix`.\n\nA **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\n\n"}
{"question": "An array `nums` of length `n` is **beautiful** if:\n\n*   `nums` is a permutation of the integers in the range `[1, n]`.\n*   For every `0 <= i < j < n`, there is no index `k` with `i < k < j` where `2 * nums[k] == nums[i] + nums[j]`.\n\nGiven the integer `n`, return _any **beautiful** array_ `nums` _of length_ `n`. There will be at least one valid answer for the given `n`.\n\n"}
{"question": "You are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water.\n\nAn **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`.\n\nYou may change `0`'s to `1`'s to connect the two islands to form **one island**.\n\nReturn _the smallest number of_ `0`_'s you must flip to connect the two islands_.\n\n"}
{"question": "The chess knight has a **unique movement**, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagaram:\n\nA chess knight can move as indicated in the chess diagram below:\n\nWe have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell** (i.e. blue cell).\n\nGiven an integer `n`, return how many distinct phone numbers of length `n` we can dial.\n\nYou are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps.\n\nAs the answer may be very large, **return the answer modulo** `109 + 7`.\n\n"}
{"question": "You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the **identifier**.\n\nThere are two types of logs:\n\n*   **Letter-logs**: All words (except the identifier) consist of lowercase English letters.\n*   **Digit-logs**: All words (except the identifier) consist of digits.\n\nReorder these logs so that:\n\n1.  The **letter-logs** come before all **digit-logs**.\n2.  The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n3.  The **digit-logs** maintain their relative ordering.\n\nReturn _the final order of the logs_.\n\n"}
{"question": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\nReturn _the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes_. If there is not any such rectangle, return `0`.\n\n"}
{"question": "You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`.\n\nReturn _the minimum number of moves to make every value in_ `nums` _**unique**_.\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n"}
{"question": "Given two integer arrays `pushed` and `popped` each with distinct values, return `true` _if this could have been the result of a sequence of push and pop operations on an initially empty stack, or_ `false` _otherwise._\n\n"}
{"question": "On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\nA stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed.\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return _the largest possible number of stones that can be removed_.\n\n"}
{"question": "You have an initial **power** of `power`, an initial **score** of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).\n\nYour goal is to maximize your total **score** by potentially playing each token in one of two ways:\n\n*   If your current **power** is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` **power** and gaining `1` **score**.\n*   If your current **score** is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` **power** and losing `1` **score**.\n\nEach token may be played **at most** once and **in any order**. You do **not** have to play all the tokens.\n\nReturn _the largest possible **score** you can achieve after playing any number of tokens_.\n\n"}
{"question": "Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit **exactly once**.\n\n24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\nReturn _the latest 24-hour time in `\"HH:MM \"` format_. If no valid time can be made, return an empty string.\n\n"}
{"question": "You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.\n\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n\nYou will do the following steps repeatedly until all cards are revealed:\n\n1.  Take the top card of the deck, reveal it, and take it out of the deck.\n2.  If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n3.  If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\nReturn _an ordering of the deck that would reveal the cards in increasing order_.\n\n**Note** that the first entry in the answer is considered to be the top of the deck.\n\n"}
{"question": "For a binary tree **T**, we can define a **flip operation** as follows: choose any node, and swap the left and right child subtrees.\n\nA binary tree **X** is _flip equivalent_ to a binary tree **Y** if and only if we can make **X** equal to **Y** after some number of flip operations.\n\nGiven the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivalent or `false` otherwise.\n\n"}
{"question": "Given an integer array of even length `arr`, return `true` _if it is possible to reorder_ `arr` _such that_ `arr[2 * i + 1] = 2 * arr[2 * i]` _for every_ `0 <= i < len(arr) / 2`_, or_ `false` _otherwise_.\n\n"}
{"question": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\n\nFor example, if we have `strs = [ \"abcdef \", \"uvwxyz \"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[ \"bef \", \"vyz \"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in **lexicographic** order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return _the minimum possible value of_ `answer.length`.\n\n"}
{"question": "There are `8` prison cells in a row and each cell is either occupied or vacant.\n\nEach day, whether the cell is occupied or vacant changes according to the following rules:\n\n*   If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n*   Otherwise, it becomes vacant.\n\n**Note** that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\n\nYou are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.\n\nReturn the state of the prison after `n` days (i.e., `n` such changes described above).\n\n"}
{"question": "Given the `root` of a binary tree, determine if it is a _complete binary tree_.\n\nIn a **[complete binary tree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n"}
{"question": "An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\nGiven the grid `grid` represented as a string array, return _the number of regions_.\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n"}
{"question": "A **ramp** in an integer array `nums` is a pair `(i, j)` for which `i < j` and `nums[i] <= nums[j]`. The **width** of such a ramp is `j - i`.\n\nGiven an integer array `nums`, return _the maximum width of a **ramp** in_ `nums`. If there is no **ramp** in `nums`, return `0`.\n\n"}
{"question": "You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\nReturn _the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes_. If there is not any such rectangle, return `0`.\n\nAnswers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.\n\nFor a given `query` word, the spell checker handles two categories of spelling mistakes:\n\n*   Capitalization: If the query matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the case in the wordlist.\n    *   Example: `wordlist = [ \"yellow \"]`, `query = \"YellOw \"`: `correct = \"yellow \"`\n    *   Example: `wordlist = [ \"Yellow \"]`, `query = \"yellow \"`: `correct = \"Yellow \"`\n    *   Example: `wordlist = [ \"yellow \"]`, `query = \"yellow \"`: `correct = \"yellow \"`\n*   Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the match in the wordlist.\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yollow \"`: `correct = \"YellOw \"`\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yeellow \"`: `correct = \" \"` (no match)\n    *   Example: `wordlist = [ \"YellOw \"]`, `query = \"yllw \"`: `correct = \" \"` (no match)\n\nIn addition, the spell checker operates under the following precedence rules:\n\n*   When the query exactly matches a word in the wordlist (**case-sensitive**), you should return the same word back.\n*   When the query matches a word up to capitlization, you should return the first such match in the wordlist.\n*   When the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n*   If the query has no matches in the wordlist, you should return the empty string.\n\nGiven some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.\n\n"}
{"question": "Given two integers n and k, return _an array of all the integers of length_ `n` _where the difference between every two consecutive digits is_ `k`. You may return the answer in **any order**.\n\nNote that the integers should not have leading zeros. Integers as `02` and `043` are not allowed.\n\n"}
{"question": "Given an array of integers `arr`, sort the array by performing a series of **pancake flips**.\n\nIn one pancake flip we do the following steps:\n\n*   Choose an integer `k` where `1 <= k <= arr.length`.\n*   Reverse the sub-array `arr[0...k-1]` (**0-indexed**).\n\nFor example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.\n\nReturn _an array of the_ `k`_\\-values corresponding to a sequence of pancake flips that sort_ `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.\n\n"}
{"question": "Given three integers `x`, `y`, and `bound`, return _a list of all the **powerful integers** that have a value less than or equal to_ `bound`.\n\nAn integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.\n\nYou may return the answer in **any order**. In your answer, each value should occur **at most once**.\n\n"}
{"question": "You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the **desired** [**pre-order traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order) of the binary tree.\n\nAny node in the binary tree can be **flipped** by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\n\nFlip the **smallest** number of nodes so that the **pre-order traversal** of the tree **matches** `voyage`.\n\nReturn _a list of the values of all **flipped** nodes. You may return the answer in **any order**. If it is **impossible** to flip the nodes in the tree to make the pre-order traversal match_ `voyage`_, return the list_ `[-1]`.\n\n"}
{"question": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`).\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the number of non-empty **subarrays** that have a sum divisible by_ `k`.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "Given an integer array `arr`, return _the length of a maximum size turbulent subarray of_ `arr`.\n\nA subarray is **turbulent** if the comparison sign flips between each adjacent pair of elements in the subarray.\n\nMore formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:\n\n*   For `i <= k < j`:\n    *   `arr[k] > arr[k + 1]` when `k` is odd, and\n    *   `arr[k] < arr[k + 1]` when `k` is even.\n*   Or, for `i <= k < j`:\n    *   `arr[k] > arr[k + 1]` when `k` is even, and\n    *   `arr[k] < arr[k + 1]` when `k` is odd.\n\n"}
{"question": "You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins. There are `n` coins in total throughout the whole tree.\n\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\n\nReturn _the **minimum** number of moves required to make every node have **exactly** one coin_.\n\n"}
{"question": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\n\nImplement the `TimeMap` class:\n\n*   `TimeMap()` Initializes the object of the data structure.\n*   `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`.\n*   `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\" \"`.\n\n"}
{"question": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`.\n\nTrain tickets are sold in **three different ways**:\n\n*   a **1-day** pass is sold for `costs[0]` dollars,\n*   a **7-day** pass is sold for `costs[1]` dollars, and\n*   a **30-day** pass is sold for `costs[2]` dollars.\n\nThe passes allow that many days of consecutive travel.\n\n*   For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`.\n\nReturn _the minimum number of dollars you need to travel every day in the given list of days_.\n\n"}
{"question": "Given two integers `a` and `b`, return **any** string `s` such that:\n\n*   `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\n*   The substring `'aaa'` does not occur in `s`, and\n*   The substring `'bbb'` does not occur in `s`.\n\n"}
{"question": "You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`.\n\nFor each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`.\n\nReturn _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise **disjoint** and in **sorted order**.\n\nReturn _the intersection of these two interval lists_.\n\nA **closed interval** `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`.\n\nThe **intersection** of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.\n\n"}
{"question": "You are given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `'a'` to `'z'`.\n\nReturn _the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root_.\n\nAs a reminder, any shorter prefix of a string is **lexicographically smaller**.\n\n*   For example, `\"ab \"` is lexicographically smaller than `\"aba \"`.\n\nA leaf of a node is a node that has no children.\n\n"}
{"question": "You are given an array of strings `equations` that represent relationships between variables where each string `equations[i]` is of length `4` and takes one of two different forms: `\"xi==yi \"` or `\"xi!=yi \"`.Here, `xi` and `yi` are lowercase letters (not necessarily different) that represent one-letter variable names.\n\nReturn `true` _if it is possible to assign integers to variable names so as to satisfy all the given equations, or_ `false` _otherwise_.\n\n"}
{"question": "There is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n*   multiply the number on display by `2`, or\n*   subtract `1` from the number on display.\n\nGiven two integers `startValue` and `target`, return _the minimum number of operations needed to display_ `target` _on the calculator_.\n\n"}
{"question": "You are given an `m x n` `grid` where each cell can have one of three values:\n\n*   `0` representing an empty cell,\n*   `1` representing a fresh orange, or\n*   `2` representing a rotten orange.\n\nEvery minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten.\n\nReturn _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`.\n\n"}
{"question": "A **maximum tree** is a tree where every node has a value greater than any other value in its subtree.\n\nYou are given the `root` of a maximum binary tree and an integer `val`.\n\nJust as in the [previous problem](https://leetcode.com/problems/maximum-binary-tree/), the given tree was constructed from a list `a` (`root = Construct(a)`) recursively with the following `Construct(a)` routine:\n\n*   If `a` is empty, return `null`.\n*   Otherwise, let `a[i]` be the largest element of `a`. Create a `root` node with the value `a[i]`.\n*   The left child of `root` will be `Construct([a[0], a[1], ..., a[i - 1]])`.\n*   The right child of `root` will be `Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])`.\n*   Return `root`.\n\nNote that we were not given `a` directly, only a root node `root = Construct(a)`.\n\nSuppose `b` is a copy of `a` with the value `val` appended to it. It is guaranteed that `b` has unique values.\n\nReturn `Construct(b)`.\n\n"}
{"question": "Given a string `s`, determine if it is **valid**.\n\nA string `s` is **valid** if, starting with an empty string `t = \" \"`, you can **transform** `t` **into** `s` after performing the following operation **any number of times**:\n\n*   Insert string `\"abc \"` into any position in `t`. More formally, `t` becomes `tleft + \"abc \" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**.\n\nReturn `true` _if_ `s` _is a **valid** string, otherwise, return_ `false`.\n\n"}
{"question": "Given a binary array `nums` and an integer `k`, return _the maximum number of consecutive_ `1`_'s in the array if you can flip at most_ `k` `0`'s.\n\n"}
{"question": "The **factorial** of a positive integer `n` is the product of all positive integers less than or equal to `n`.\n\n*   For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.\n\nWe make a **clumsy factorial** using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply `'*'`, divide `'/'`, add `'+'`, and subtract `'-'` in this order.\n\n*   For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.\n\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\n\nAdditionally, the division that we use is floor division such that `10 * 9 / 8 = 90 / 8 = 11`.\n\nGiven an integer `n`, return _the clumsy factorial of_ `n`.\n\n"}
{"question": "In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom halves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\n\nWe may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap values.\n\nReturn the minimum number of rotations so that all the values in `tops` are the same, or all the values in `bottoms` are the same.\n\nIf it cannot be done, return `-1`.\n\n"}
{"question": "Given an array of integers preorder, which represents the **preorder traversal** of a BST (i.e., **binary search tree**), construct the tree and return _its root_.\n\nIt is **guaranteed** that there is always possible to find a binary search tree with the given requirements for the given test cases.\n\nA **binary search tree** is a binary tree where for every node, any descendant of `Node.left` has a value **strictly less than** `Node.val`, and any descendant of `Node.right` has a value **strictly greater than** `Node.val`.\n\nA **preorder traversal** of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.\n\n"}
{"question": "You are given a list of songs where the `ith` song has a duration of `time[i]` seconds.\n\nReturn _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n"}
{"question": "A conveyor belt has packages that must be shipped from one port to another within `days` days.\n\nThe `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days.\n\n"}
{"question": "You are given an integer array `values` where values\\[i\\] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\nReturn _the maximum score of a pair of sightseeing spots_.\n\n"}
{"question": "Given a positive integer `k`, you need to find the **length** of the **smallest** positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`.\n\nReturn _the **length** of_ `n`. If there is no such `n`, return -1.\n\n**Note:** `n` may not fit in a 64-bit signed integer.\n\n"}
{"question": "Given a binary string `s` and a positive integer `n`, return `true` _if the binary representation of all the integers in the range_ `[1, n]` _are **substrings** of_ `s`_, or_ `false` _otherwise_.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "Given an integer `n`, return _a binary string representing its representation in base_ `-2`.\n\n**Note** that the returned string should not have leading zeros unless the string is `\"0 \"`.\n\n"}
{"question": "You are given the `head` of a linked list with `n` nodes.\n\nFor each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it.\n\nReturn an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`.\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.\n\nA **move** consists of walking from one land cell to another adjacent (**4-directionally**) land cell or walking off the boundary of the `grid`.\n\nReturn _the number of land cells in_ `grid` _for which we cannot walk off the boundary of the grid in any number of **moves**_.\n\n"}
{"question": "Given an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise.\n\nA query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\n"}
{"question": "You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths.\n\nEach video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`.\n\nWe can cut these clips into segments freely.\n\n*   For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.\n\nReturn _the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event_ `[0, time]`. If the task is impossible, return `-1`.\n\n"}
{"question": "Given the `root` of a binary tree, find the maximum value `v` for which there exist **different** nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`.\n\nA node `a` is an ancestor of `b` if either: any child of `a` is equal to `b` or any child of `a` is an ancestor of `b`.\n\n"}
{"question": "Given an array `nums` of integers, return _the length of the longest arithmetic subsequence in_ `nums`.\n\n**Note** that:\n\n*   A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n*   A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`).\n\n"}
{"question": "A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\nReturn _the minimum cost to fly every person to a city_ such that exactly `n` people arrive in each city.\n\n"}
{"question": "Given an integer array `nums` and two integers `firstLen` and `secondLen`, return _the maximum sum of elements in two non-overlapping **subarrays** with lengths_ `firstLen` _and_ `secondLen`.\n\nThe array with length `firstLen` could occur before or after the array with length `secondLen`, but they have to be non-overlapping.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "There are three stones in different positions on the X-axis. You are given three integers `a`, `b`, and `c`, the positions of the stones.\n\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions `x`, `y`, and `z` with `x < y < z`. You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\nReturn _an integer array_ `answer` _of length_ `2` _where_:\n\n*   `answer[0]` _is the minimum number of moves you can play, and_\n*   `answer[1]` _is the maximum number of moves you can play_.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location.\n\nTwo squares belong to the same **connected component** if they have the same color and are next to each other in any of the 4 directions.\n\nThe **border of a connected component** is all the squares in the connected component that are either **4-directionally** adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).\n\nYou should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`.\n\nReturn _the final grid_.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines.\n\nWe may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that:\n\n*   `nums1[i] == nums2[j]`, and\n*   the line we draw does not intersect any other connecting (non-horizontal) line.\n\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\n\nReturn _the maximum number of connecting lines we can draw in this way_.\n\n"}
{"question": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these constraints:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n"}
{"question": "You have a convex `n`\\-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**).\n\nYou will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.\n\nReturn _the smallest possible total score that you can achieve with some triangulation of the polygon_.\n\n"}
{"question": "There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones.\n\nCall a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**.\n\n*   In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\nReturn _an integer array_ `answer` _of length_ `2` _where_:\n\n*   `answer[0]` _is the minimum number of moves you can play, and_\n*   `answer[1]` _is the maximum number of moves you can play_.\n\n"}
{"question": "On an infinite plane, a robot initially stands at `(0, 0)` and faces north. Note that:\n\n*   The **north direction** is the positive direction of the y-axis.\n*   The **south direction** is the negative direction of the y-axis.\n*   The **east direction** is the positive direction of the x-axis.\n*   The **west direction** is the negative direction of the x-axis.\n\nThe robot can receive one of three instructions:\n\n*   `\"G \"`: go straight 1 unit.\n*   `\"L \"`: turn 90 degrees to the left (i.e., anti-clockwise direction).\n*   `\"R \"`: turn 90 degrees to the right (i.e., clockwise direction).\n\nThe robot performs the `instructions` given in order, and repeats them forever.\n\nReturn `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.\n\n"}
{"question": "You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.\n\nAll gardens have **at most 3** paths coming into or leaving it.\n\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\n\nReturn _**any** such a choice as an array_ `answer`_, where_ `answer[i]` _is the type of flower planted in the_ `(i+1)th` _garden. The flower types are denoted_ `1`_,_ `2`_,_ `3`_, or_ `4`_. It is guaranteed an answer exists._\n\n"}
{"question": "Given an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n\nReturn _the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer._\n\n"}
{"question": "You are given an array of `words` where each word consists of lowercase English letters.\n\n`wordA` is a **predecessor** of `wordB` if and only if we can insert **exactly one** letter anywhere in `wordA` **without changing the order of the other characters** to make it equal to `wordB`.\n\n*   For example, `\"abc \"` is a **predecessor** of `\"abac \"`, while `\"cba \"` is not a **predecessor** of `\"bcad \"`.\n\nA **word chain** is a sequence of words `[word1, word2, ..., wordk]` with `k >= 1`, where `word1` is a **predecessor** of `word2`, `word2` is a **predecessor** of `word3`, and so on. A single word is trivially a **word chain** with `k == 1`.\n\nReturn _the **length** of the **longest possible word chain** with words chosen from the given list of_ `words`.\n\n"}
{"question": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n*   If `x == y`, both stones are destroyed, and\n*   If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is **at most one** stone left.\n\nReturn _the smallest possible weight of the left stone_. If there are no stones left, return `0`.\n\n"}
{"question": "There is a bookstore owner that has a store open for `n` minutes. Every minute, some number of customers enter the store. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customer that enters the store at the start of the `ith` minute and all those customers leave after the end of that minute.\n\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise.\n\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for `minutes` consecutive minutes, but can only use it once.\n\nReturn _the maximum number of customers that can be satisfied throughout the day_.\n\n"}
{"question": "Given an array of positive integers `arr` (not necessarily distinct), return _the_ _lexicographically_ _largest permutation that is smaller than_ `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array.\n\n**Note** that a _swap_ exchanges the positions of two numbers `arr[i]` and `arr[j]`\n\n"}
{"question": "In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.\n\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.\n\n"}
{"question": "A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).\n\nGiven two strings `source` and `target`, return _the minimum number of **subsequences** of_ `source` _such that their concatenation equals_ `target`. If the task is impossible, return `-1`.\n\n"}
{"question": "On a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`.\n\nYou are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**.\n\nAssign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker.\n\nIf there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers.\n\nReturn _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the index (**0-indexed**) of the bike that the_ `ith` _worker is assigned to_.\n\nThe **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n"}
{"question": "Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.\n\nReturn the string `\"-1 \"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `Σ |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.\n\n"}
{"question": "Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:\n\n*   At least one path exists from the `source` node to the `destination` node\n*   If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.\n*   The number of possible paths from `source` to `destination` is a finite number.\n\nReturn `true` if and only if all roads from `source` lead to `destination`.\n\n"}
{"question": "Given an integer array `nums` which is sorted in **ascending order** and all of its elements are **unique** and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.\n\n"}
{"question": "You are given two strings of the same length `s1` and `s2` and a string `baseStr`.\n\nWe say `s1[i]` and `s2[i]` are equivalent characters.\n\n*   For example, if `s1 = \"abc \"` and `s2 = \"cde \"`, then we have `'a' == 'c'`, `'b' == 'd'`, and `'c' == 'e'`.\n\nEquivalent characters follow the usual rules of any equivalence relation:\n\n*   **Reflexivity:** `'a' == 'a'`.\n*   **Symmetry:** `'a' == 'b'` implies `'b' == 'a'`.\n*   **Transitivity:** `'a' == 'b'` and `'b' == 'c'` implies `'a' == 'c'`.\n\nFor example, given the equivalency information from `s1 = \"abc \"` and `s2 = \"cde \"`, `\"acd \"` and `\"aab \"` are equivalent strings of `baseStr = \"eed \"`, and `\"aab \"` is the lexicographically smallest equivalent string of `baseStr`.\n\nReturn _the lexicographically smallest equivalent string of_ `baseStr` _by using the equivalency information from_ `s1` _and_ `s2`.\n\n"}
{"question": "Given a string `s`, return _the length of the longest repeating substrings_. If no repeating substring exists, return `0`.\n\n"}
{"question": "On a campus represented as a 2D grid, there are `n` workers and `m` bikes, with `n <= m`. Each worker and bike is a 2D coordinate on this grid.\n\nWe assign one unique bike to each worker so that the sum of the **Manhattan distances** between each worker and their assigned bike is minimized.\n\nReturn `the minimum possible sum of Manhattan distances between each worker and their assigned bike`.\n\nThe **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n"}
{"question": "You are given an `m x n` binary matrix `matrix`.\n\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).\n\nReturn _the maximum number of rows that have all values equal after some number of flips_.\n\n"}
{"question": "Given two numbers `arr1` and `arr2` in base **\\-2**, return the result of adding them together.\n\nEach number is given in _array format_: as an array of 0s and 1s, from most significant bit to least significant bit. For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. A number `arr` in _array, format_ is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.\n\nReturn the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.\n\n"}
{"question": "You have `n` `tiles`, where each tile has one letter `tiles[i]` printed on it.\n\nReturn _the number of possible non-empty sequences of letters_ you can make using the letters printed on those `tiles`.\n\n"}
{"question": "Given the `root` of a binary tree and an integer `limit`, delete all **insufficient nodes** in the tree simultaneously, and return _the root of the resulting binary tree_.\n\nA node is **insufficient** if every root to **leaf** path intersecting this node has a sum strictly less than `limit`.\n\nA **leaf** is a node with no children.\n\n"}
{"question": "Given a string `s`, return _the_ _lexicographically smallest_ _subsequence_ _of_ `s` _that contains all the distinct characters of_ `s` _exactly once_.\n\n"}
{"question": "You are given a string `s` representing a list of words. Each letter in the word has one or more options.\n\n*   If there is one option, the letter is represented as is.\n*   If there is more than one option, then curly braces delimit the options. For example, `\"{a,b,c} \"` represents options `[ \"a \", \"b \", \"c \"]`.\n\nFor example, if `s = \"a{b,c} \"`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[ \"ab \", \"ac \"]`.\n\nReturn all words that can be formed in this manner, **sorted** in lexicographical order.\n\n"}
{"question": "There is a set of `n` items. You are given two integer arrays `values` and `labels` where the value and the label of the `ith` element are `values[i]` and `labels[i]` respectively. You are also given two integers `numWanted` and `useLimit`.\n\nChoose a subset `s` of the `n` elements such that:\n\n*   The size of the subset `s` is **less than or equal to** `numWanted`.\n*   There are **at most** `useLimit` items with the same label in `s`.\n\nThe **score** of a subset is the sum of the values in the subset.\n\nReturn _the maximum **score** of a subset_ `s`.\n\n"}
{"question": "Given an `n x n` binary matrix `grid`, return _the length of the shortest **clear path** in the matrix_. If there is no clear path, return `-1`.\n\nA **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that:\n\n*   All the visited cells of the path are `0`.\n*   All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner).\n\nThe **length of a clear path** is the number of visited cells of this path.\n\n"}
{"question": "You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the **number of times** that `k` appears in the sample.\n\nCalculate the following statistics:\n\n*   `minimum`: The minimum element in the sample.\n*   `maximum`: The maximum element in the sample.\n*   `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n*   `median`:\n    *   If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n    *   If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n*   `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**.\n\nReturn _the statistics of the sample as an array of floating-point numbers_ `[minimum, maximum, mean, median, mode]`_. Answers within_ `10-5` _of the actual answer will be accepted._\n\n"}
{"question": "There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\n\nYou are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location.\n\nReturn `true` _if it is possible to pick up and drop off all passengers for all the given trips, or_ `false` _otherwise_.\n\n"}
{"question": "Given a string `s` and an integer `k`, return _the number of substrings in_ `s` _of length_ `k` _with no repeated characters_.\n\n"}
{"question": "There are n people in a social group labeled from `0` to `n - 1`. You are given an array `logs` where `logs[i] = [timestampi, xi, yi]` indicates that `xi` and `yi` will be friends at the time `timestampi`.\n\nFriendship is **symmetric**. That means if `a` is friends with `b`, then `b` is friends with `a`. Also, person `a` is acquainted with a person `b` if `a` is friends with `b`, or `a` is a friend of someone acquainted with `b`.\n\nReturn _the earliest time for which every person became acquainted with every other person_. If there is no such earliest time, return `-1`.\n\n"}
{"question": "Given an `m x n` integer matrix `grid`, return _the maximum **score** of a path starting at_ `(0, 0)` _and ending at_ `(m - 1, n - 1)` moving in the 4 cardinal directions.\n\nThe **score** of a path is the minimum value in that path.\n\n*   For example, the score of the path `8 -> 4 -> 5 -> 9` is `4`.\n\n"}
{"question": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\n\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\n\nGiven the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.\n\n"}
{"question": "You are given an array `books` where `books[i] = [thicknessi, heighti]` indicates the thickness and height of the `ith` book. You are also given an integer `shelfWidth`.\n\nWe want to place these books in order onto bookcase shelves that have a total width `shelfWidth`.\n\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to `shelfWidth`, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\n\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\n\n*   For example, if we have an ordered list of `5` books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\n\nReturn _the minimum possible height that the total bookshelf can be after placing shelves in this manner_.\n\n"}
{"question": "There are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range.\n\nReturn _an array_ `answer` _of length_ `n`_, where_ `answer[i]` _is the total number of seats reserved for flight_ `i`.\n\n"}
{"question": "Given the `root` of a binary tree, each node in the tree has a distinct value.\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).\n\nReturn the roots of the trees in the remaining forest. You may return the result in any order.\n\n"}
{"question": "A string is a _valid parentheses string_ (denoted VPS) if and only if it consists of `\"( \"` and `\") \"` characters only, and:\n\n*   It is the empty string, or\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\n*   It can be written as `(A)`, where `A` is a VPS.\n\nWe can similarly define the _nesting depth_ `depth(S)` of any VPS `S` as follows:\n\n*   `depth( \" \") = 0`\n*   `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n*   `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a VPS.\n\nFor example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are VPS's (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not VPS's.\n\nGiven a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).\n\nNow choose **any** such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.\n\nReturn an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`: `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`. Note that even though multiple answers may exist, you may return any of them.\n\n"}
{"question": "Given the `root` of a binary tree, return _the maximum **average** value of a **subtree** of that tree_. Answers within `10-5` of the actual answer will be accepted.\n\nA **subtree** of a tree is any node of that tree plus all its descendants.\n\nThe **average** value of a tree is the sum of its values, divided by the number of nodes.\n\n"}
{"question": "Given the `root` of a binary tree, return _the lowest common ancestor of its deepest leaves_.\n\nRecall that:\n\n*   The node of a binary tree is a leaf if and only if it has no children\n*   The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n*   The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\n"}
{"question": "We are given `hours`, a list of the number of hours worked per day for a given employee.\n\nA day is considered to be a _tiring day_ if and only if the number of hours worked is (strictly) greater than `8`.\n\nA _well-performing interval_ is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\n\nReturn the length of the longest well-performing interval.\n\n"}
{"question": "You are given an integer `n`, the number of nodes in a directed graph where the nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\n\nYou are given two arrays `redEdges` and `blueEdges` where:\n\n*   `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and\n*   `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph.\n\nReturn an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path, or `-1` if such a path does not exist.\n\n"}
{"question": "Given an array `arr` of positive integers, consider all binary trees such that:\n\n*   Each node has either `0` or `2` children;\n*   The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree.\n*   The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\n\nAmong all possible binary trees considered, return _the smallest possible sum of the values of each non-leaf node_. It is guaranteed this sum fits into a **32-bit** integer.\n\nA node is a **leaf** if and only if it has zero children.\n\n"}
{"question": "Given two arrays of integers with equal lengths, return the maximum value of:\n\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\n\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.\n\n"}
{"question": "There are `n` cities labeled from `1` to `n`. You are given the integer `n` and an array `connections` where `connections[i] = [xi, yi, costi]` indicates that the cost of connecting city `xi` and city `yi` (bidirectional connection) is `costi`.\n\nReturn _the minimum **cost** to connect all the_ `n` _cities such that there is at least one path between each pair of cities_. If it is impossible to connect all the `n` cities, return `-1`,\n\nThe **cost** is the sum of the connections' costs used.\n\n"}
{"question": "You are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`.\n\nIn one semester, you can take **any number** of courses as long as you have taken all the prerequisites in the **previous** semester for the courses you are taking.\n\nReturn _the **minimum** number of semesters needed to take all courses_. If there is no way to take all the courses, return `-1`.\n\n"}
{"question": "On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.\n\nHere, `board = [ \"abcde \", \"fghij \", \"klmno \", \"pqrst \", \"uvwxy \", \"z \"]`, as shown in the diagram below.\n\nWe may make the following moves:\n\n*   `'U'` moves our position up one row, if the position exists on the board;\n*   `'D'` moves our position down one row, if the position exists on the board;\n*   `'L'` moves our position left one column, if the position exists on the board;\n*   `'R'` moves our position right one column, if the position exists on the board;\n*   `'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.\n\n(Here, the only positions that exist on the board are positions with letters on them.)\n\nReturn a sequence of moves that makes our answer equal to `target` in the minimum number of moves. You may return any path that does so.\n\n"}
{"question": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest **square** subgrid that has all `1`s on its **border**, or `0` if such a subgrid doesn't exist in the `grid`.\n\n"}
{"question": "Alice and Bob continue their games with piles of stones. There are a number of piles **arranged in a row**, and each pile has a positive integer number of stones `piles[i]`. The objective of the game is to end with the most stones.\n\nAlice and Bob take turns, with Alice starting first. Initially, `M = 1`.\n\nOn each player's turn, that player can take **all the stones** in the **first** `X` remaining piles, where `1 <= X <= 2M`. Then, we set `M = max(M, X)`.\n\nThe game continues until all the stones have been taken.\n\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice can get.\n\n"}
{"question": "Given two strings `text1` and `text2`, return _the length of their longest **common subsequence**._ If there is no **common subsequence**, return `0`.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\nA **common subsequence** of two strings is a subsequence that is common to both strings.\n\n"}
{"question": "Given an array `nums` of integers, a _move_ consists of choosing any element and **decreasing it by 1**.\n\nAn array `A` is a _zigzag array_ if either:\n\n*   Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`\n*   OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`\n\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.\n\n"}
{"question": "Two players play a turn based game on a binary tree. We are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`.\n\nInitially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.\n\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an **uncolored** neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\n\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\n\nYou are the second player. If it is possible to choose such a `y` to ensure you win the game, return `true`. If it is not possible, return `false`.\n\n"}
{"question": "Implement a SnapshotArray that supports the following interface:\n\n*   `SnapshotArray(int length)` initializes an array-like data structure with the given length. **Initially, each element equals 0**.\n*   `void set(index, val)` sets the element at the given `index` to be equal to `val`.\n*   `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.\n*   `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`\n\n"}
{"question": "Given a binary array `data`, return the minimum number of swaps required to group all `1`'s present in the array together in **any place** in the array.\n\n"}
{"question": "You are given two string arrays `username` and `website` and an integer array `timestamp`. All the given arrays are of the same length and the tuple `[username[i], website[i], timestamp[i]]` indicates that the user `username[i]` visited the website `website[i]` at time `timestamp[i]`.\n\nA **pattern** is a list of three websites (not necessarily distinct).\n\n*   For example, `[ \"home \", \"away \", \"love \"]`, `[ \"leetcode \", \"love \", \"leetcode \"]`, and `[ \"luffy \", \"luffy \", \"luffy \"]` are all patterns.\n\nThe **score** of a **pattern** is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.\n\n*   For example, if the pattern is `[ \"home \", \"away \", \"love \"]`, the score is the number of users `x` such that `x` visited `\"home \"` then visited `\"away \"` and visited `\"love \"` after that.\n*   Similarly, if the pattern is `[ \"leetcode \", \"love \", \"leetcode \"]`, the score is the number of users `x` such that `x` visited `\"leetcode \"` then visited `\"love \"` and visited `\"leetcode \"` **one more time** after that.\n*   Also, if the pattern is `[ \"luffy \", \"luffy \", \"luffy \"]`, the score is the number of users `x` such that `x` visited `\"luffy \"` three different times at different timestamps.\n\nReturn _the **pattern** with the largest **score**_. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.\n\n"}
{"question": "You have `n` dice, and each die has `k` faces numbered from `1` to `k`.\n\nGiven three integers `n`, `k`, and `target`, return _the number of possible ways (out of the_ `kn` _total ways)_ _to roll the dice, so the sum of the face-up numbers equals_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a string `text`. You can swap two of the characters in the `text`.\n\nReturn _the length of the longest substring with repeated characters_.\n\n"}
{"question": "Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.\n\nReturn the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**.\n\n"}
{"question": "Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.\n\nThe distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.\n\n"}
{"question": "You are asked to design a file system that allows you to create new paths and associate them with different values.\n\nThe format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, \"`/leetcode \"` and \"`/leetcode/problems \"` are valid paths while an empty string `\" \"` and `\"/ \"` are not.\n\nImplement the `FileSystem` class:\n\n*   `bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path **already exists** or its parent path **doesn't exist**.\n*   `int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.\n\n"}
{"question": "You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.\n\nYou can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.\n\nReturn _the minimum cost of connecting all the given sticks into one stick in this way_.\n\n"}
{"question": "A transaction is possibly invalid if:\n\n*   the amount exceeds `$1000`, or;\n*   if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**.\n\nYou are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\n\nReturn a list of `transactions` that are possibly invalid. You may return the answer in **any order**.\n\n"}
{"question": "Let the function `f(s)` be the **frequency of the lexicographically smallest character** in a non-empty string `s`. For example, if `s = \"dcce \"` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.\n\nYou are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the **number of words** in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.\n\nReturn _an integer array_ `answer`_, where each_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.\n\nAfter doing so, return the head of the final linked list. You may return any such answer.\n\n(Note that in the examples below, all sequences are serializations of `ListNode` objects.)\n\n"}
{"question": "You are given a string `s` and array `queries` where `queries[i] = [lefti, righti, ki]`. We may rearrange the substring `s[lefti...righti]` for each query and then choose up to `ki` of them to replace with any lowercase English letter.\n\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.\n\nReturn a boolean array `answer` where `answer[i]` is the result of the `ith` query `queries[i]`.\n\nNote that each letter is counted individually for replacement, so if, for example `s[lefti...righti] = \"aaa \"`, and `ki = 2`, we can only replace two of the letters. Also, note that no query modifies the initial string `s`.\n\n"}
{"question": "Given a list of `phrases`, generate a list of Before and After puzzles.\n\nA _phrase_ is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.\n\n_Before and After puzzles_ are phrases that are formed by merging two phrases where the **last word of the first phrase** is the same as the **first word of the second phrase**.\n\nReturn the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.\n\nYou should return a list of **distinct** strings **sorted lexicographically**.\n\n"}
{"question": "You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.\n\nYou are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.\n\n"}
{"question": "Given an array of integers, return the maximum sum for a **non-empty** subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.\n\nNote that the subarray needs to be **non-empty** after deleting one element.\n\n"}
{"question": "You are given a string `s` that consists of lower case English letters and brackets.\n\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\n\nYour result should **not** contain any brackets.\n\n"}
{"question": "Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.\n\nFor example, if `arr = [1, 2]` and `k = 3` then the modified array will be `[1, 2, 1, 2, 1, 2]`.\n\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.\n\nAs the answer can be very large, return the answer **modulo** `109 + 7`.\n\n"}
{"question": "In an **infinite** chess board with coordinates from `-infinity` to `+infinity`, you have a **knight** at square `[0, 0]`.\n\nA knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.\n\nReturn _the minimum number of steps needed to move the knight to the square_ `[x, y]`. It is guaranteed the answer exists.\n\n"}
{"question": "Given an `m x n` matrix `mat` where every row is sorted in **strictly** **increasing** order, return _the **smallest common element** in all rows_.\n\nIf there is no common element, return `-1`.\n\n"}
{"question": "An **ugly number** is a positive integer that is divisible by `a`, `b`, or `c`.\n\nGiven four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.\n\n"}
{"question": "You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.\n\nYou can swap the characters at any pair of indices in the given `pairs` **any number of times**.\n\nReturn the lexicographically smallest string that `s` can be changed to after using the swaps.\n\n"}
{"question": "You are given two strings `s` and `t` of the same length and an integer `maxCost`.\n\nYou want to change `s` to `t`. Changing the `ith` character of `s` to `ith` character of `t` costs `|s[i] - t[i]|` (i.e., the absolute difference between the ASCII values of the characters).\n\nReturn _the maximum length of a substring of_ `s` _that can be changed to be the same as the corresponding substring of_ `t` _with a cost less than or equal to_ `maxCost`. If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.\n\n"}
{"question": "You are given a string `s` and an integer `k`, a `k` **duplicate removal** consists of choosing `k` adjacent and equal letters from `s` and removing them, causing the left and the right side of the deleted substring to concatenate together.\n\nWe repeatedly make `k` **duplicate removals** on `s` until we no longer can.\n\nReturn _the final string after all such duplicate removals have been made_. It is guaranteed that the answer is **unique**.\n\n"}
{"question": "Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.\n\n"}
{"question": "A **stepping number** is an integer such that all of its adjacent digits have an absolute difference of exactly `1`.\n\n*   For example, `321` is a **stepping number** while `421` is not.\n\nGiven two integers `low` and `high`, return _a sorted list of all the **stepping numbers** in the inclusive range_ `[low, high]`.\n\n"}
{"question": "Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n*   Every time you are located in a cell you will collect all the gold in that cell.\n*   From your position, you can walk one step to the left, right, up, or down.\n*   You can't visit the same cell more than once.\n*   Never visit a cell with `0` gold.\n*   You can start and stop collecting gold from **any** position in the grid that has some gold.\n\n"}
{"question": "On a **0-indexed** `8 x 8` chessboard, there can be multiple black queens ad one white king.\n\nYou are given a 2D integer array `queens` where `queens[i] = [xQueeni, yQueeni]` represents the position of the `ith` black queen on the chessboard. You are also given an integer array `king` of length `2` where `king = [xKing, yKing]` represents the position of the white king.\n\nReturn _the coordinates of the black queens that can directly attack the king_. You may return the answer in **any order**.\n\n"}
{"question": "`n` passengers board an airplane with exactly `n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\n\n*   Take their own seat if it is still available, and\n*   Pick other seats randomly when they find their seat occupied\n\nReturn _the probability that the_ `nth` _person gets his own seat_.\n\n"}
{"question": "Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the **earliest time slot** that works for both of them and is of duration `duration`.\n\nIf there is no common time slot that satisfies the requirements, return an **empty array**.\n\nThe format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.\n\nIt is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.\n\n"}
{"question": "You have some coins. The `i`\\-th coin has a probability `prob[i]` of facing heads when tossed.\n\nReturn the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.\n\n"}
{"question": "Given a list of folders `folder`, return _the folders after removing all **sub-folders** in those folders_. You may return the answer in **any order**.\n\nIf a `folder[i]` is located within another `folder[j]`, it is called a **sub-folder** of it.\n\nThe format of a path is one or more concatenated strings of the form: `'/'` followed by one or more lowercase English letters.\n\n*   For example, `\"/leetcode \"` and `\"/leetcode/problems \"` are valid paths while an empty string and `\"/ \"` are not.\n\n"}
{"question": "You are given a string s of length `n` containing only four kinds of characters: `'Q'`, `'W'`, `'E'`, and `'R'`.\n\nA string is said to be **balanced** if each of its characters appears `n / 4` times where `n` is the length of the string.\n\nReturn _the minimum length of the substring that can be replaced with **any** other string of the same length to make_ `s` _**balanced**_. If s is already **balanced**, return `0`.\n\n"}
{"question": "Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the **same hostname** as `startUrl`.\n\nReturn all urls obtained by your web crawler in **any** order.\n\nYour crawler should:\n\n*   Start from the page: `startUrl`\n*   Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.\n*   Do not crawl the same link twice.\n*   Explore only the links that are under the **same hostname** as `startUrl`.\n\nAs shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use **http protocol** without any **port** specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.\n\nThe `HtmlParser` interface is defined as such:\n\ninterface HtmlParser {\n  // Return a list of all urls from a webpage of given _url_.\n  public List getUrls(String url);\n}\n\nBelow are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables `urls`, `edges` and `startUrl`. Notice that you will only have access to `startUrl` in your code, while `urls` and `edges` are not directly accessible to you in code.\n\nNote: Consider the same URL with the trailing slash \"/ \" as a different URL. For example, \"http://news.yahoo.com \", and \"http://news.yahoo.com/ \" are different urls.\n\n"}
{"question": "Given a callable function `f(x, y)` **with a hidden formula** and a value `z`, reverse engineer the formula and return _all positive integer pairs_ `x` _and_ `y` _where_ `f(x,y) == z`. You may return the pairs in any order.\n\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\n\n*   `f(x, y) < f(x + 1, y)`\n*   `f(x, y) < f(x, y + 1)`\n\nThe function interface is defined like this:\n\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n  int f(int x, int y);\n};\n\nWe will judge your solution as follows:\n\n*   The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an **answer key** of all valid pairs for a specific `z`.\n*   The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.\n*   The judge will call your `findSolution` and compare your results with the **answer key**.\n*   If your results match the **answer key**, your solution will be `Accepted`.\n\n"}
{"question": "Given 2 integers `n` and `start`. Your task is return **any** permutation `p` of `(0,1,2.....,2^n -1)` such that :\n\n*   `p[0] = start`\n*   `p[i]` and `p[i+1]` differ by only one bit in their binary representation.\n*   `p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.\n\n"}
{"question": "You are given an array of strings `arr`. A string `s` is formed by the **concatenation** of a **subsequence** of `arr` that has **unique characters**.\n\nReturn _the **maximum** possible length_ of `s`.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "Design a Leaderboard class, which has 3 functions:\n\n1.  `addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.\n2.  `top(K)`: Return the score sum of the top `K` players.\n3.  `reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.\n\nInitially, the leaderboard is empty.\n\n"}
{"question": "The **diameter** of a tree is **the number of edges** in the longest path in that tree.\n\nThere is an undirected tree of `n` nodes labeled from `0` to `n - 1`. You are given a 2D array `edges` where `edges.length == n - 1` and `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the tree.\n\nReturn _the **diameter** of the tree_.\n\n"}
{"question": "You are given two strings `s1` and `s2` of equal length consisting of letters `\"x \"` and `\"y \"` **only**. Your task is to make these two strings equal to each other. You can swap any two characters that belong to **different** strings, which means: swap `s1[i]` and `s2[j]`.\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.\n\n"}
{"question": "Given an array of integers `nums` and an integer `k`. A continuous subarray is called **nice** if there are `k` odd numbers on it.\n\nReturn _the number of **nice** sub-arrays_.\n\n"}
{"question": "Given the following details of a matrix with `n` columns and `2` rows :\n\n*   The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n*   The sum of elements of the 0-th(upper) row is given as `upper`.\n*   The sum of elements of the 1-st(lower) row is given as `lower`.\n*   The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\nReturn it as a 2-D integer array.\n\nIf there are more than one valid solution, any of them will be accepted.\n\nIf no valid solution exists, return an empty 2-D array.\n\n"}
{"question": "Given a 2D `grid` consists of `0s` (land) and `1s` (water). An _island_ is a maximal 4-directionally connected group of `0s` and a _closed island_ is an island **totally** (all left, top, right, bottom) surrounded by `1s.`\n\nReturn the number of _closed islands_.\n\n"}
{"question": "Given a non-negative integer `num`, Return its _encoding_ string.\n\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:\n\n"}
{"question": "You are given some lists of `regions` where the first region of each list includes all other regions in that list.\n\nNaturally, if a region `x` contains another region `y` then `x` is bigger than `y`. Also, by definition, a region `x` contains itself.\n\nGiven two regions: `region1` and `region2`, return _the smallest region that contains both of them_.\n\nIf you are given regions `r1`, `r2`, and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.\n\nIt is guaranteed the smallest region exists.\n\n"}
{"question": "You are given a list of equivalent string pairs `synonyms` where `synonyms[i] = [si, ti]` indicates that `si` and `ti` are equivalent strings. You are also given a sentence `text`.\n\nReturn _all possible synonymous sentences **sorted lexicographically**_.\n\n"}
{"question": "Given a binary tree with the following rules:\n\n1.  `root.val == 0`\n2.  If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\n3.  If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\n\nNow the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.\n\nImplement the `FindElements` class:\n\n*   `FindElements(TreeNode* root)` Initializes the object with a contaminated binary tree and recovers it.\n*   `bool find(int target)` Returns `true` if the `target` value exists in the recovered binary tree.\n\n"}
{"question": "Given an integer array `nums`, return _the **maximum possible sum** of elements of the array such that it is divisible by three_.\n\n"}
{"question": "You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:\n\n*   `ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.\n\nYou need to use the following functions to access the linked list (you **can't** access the `ImmutableListNode` directly):\n\n*   `ImmutableListNode.printValue()`: Print value of the current node.\n*   `ImmutableListNode.getNext()`: Return the next node.\n\nThe input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.\n\n"}
{"question": "You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  \n  \nReturn the number of servers that communicate with any other server.\n\n"}
{"question": "You are given an array of strings `products` and a string `searchWord`.\n\nDesign a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with `searchWord`. If there are more than three products with a common prefix return the three lexicographically minimums products.\n\nReturn _a list of lists of the suggested products after each character of_ `searchWord` _is typed_.\n\n"}
{"question": "A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).\n\nYou are given a **sorted** list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.\n\nReturn _the set of real numbers with the interval_ `toBeRemoved` _**removed** from_ `intervals`_. In other words, return the set of real numbers such that every_ `x` _in the set is in_ `intervals` _but **not** in_ `toBeRemoved`_. Your answer should be a **sorted** list of disjoint intervals as described above._\n\n"}
{"question": "A tree rooted at node 0 is given as follows:\n\n*   The number of nodes is `nodes`;\n*   The value of the `ith` node is `value[i]`;\n*   The parent of the `ith` node is `parent[i]`.\n\nRemove every subtree whose sum of values of nodes is zero.\n\nReturn _the number of the remaining nodes in the tree_.\n\n"}
{"question": "Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:\n\n*   **Jumbo Burger:** `4` tomato slices and `1` cheese slice.\n*   **Small Burger:** `2` Tomato slices and `1` cheese slice.\n\nReturn `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to `0` and the number of remaining `cheeseSlices` equal to `0`. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to `0` return `[]`.\n\n"}
{"question": "Given a `m * n` matrix of ones and zeros, return how many **square** submatrices have all ones.\n\n"}
{"question": "There are `n` people that are split into some unknown number of groups. Each person is labeled with a **unique ID** from `0` to `n - 1`.\n\nYou are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.\n\nReturn _a list of groups such that each person `i` is in a group of size `groupSizes[i]`_.\n\nEach person should appear in **exactly one group**, and every person must be in a group. If there are multiple answers, **return any of them**. It is **guaranteed** that there will be **at least one** valid solution for the given input.\n\n"}
{"question": "Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the **smallest** `divisor` such that the result mentioned above is less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nThe test cases are generated so that there will be an answer.\n\n"}
{"question": "Design the `CombinationIterator` class:\n\n*   `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments.\n*   `next()` Returns the next combination of length `combinationLength` in **lexicographical order**.\n*   `hasNext()` Returns `true` if and only if there exists a next combination.\n\n"}
{"question": "Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list.\n\nThe interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`.\n\nReturn _the number of remaining intervals_.\n\n"}
{"question": "An integer has _sequential digits_ if and only if each digit in the number is one more than the previous digit.\n\nReturn a **sorted** list of all the integers in the range `[low, high]` inclusive that have sequential digits.\n\n"}
{"question": "Given a `m x n` matrix `mat` and an integer `threshold`, return _the maximum side-length of a square with a sum less than or equal to_ `threshold` _or return_ `0` _if there is no such square_.\n\n"}
{"question": "Given an array of integers `nums` and a positive integer `k`, check whether it is possible to divide this array into sets of `k` consecutive numbers.\n\nReturn `true` _if it is possible_. Otherwise, return `false`.\n\n"}
{"question": "Given a string `s`, return the maximum number of ocurrences of **any** substring under the following rules:\n\n*   The number of unique characters in the substring must be less than or equal to `maxLetters`.\n*   The substring size must be between `minSize` and `maxSize` inclusive.\n\n"}
{"question": "Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.\n\nIn case of a tie, return the minimum such integer.\n\nNotice that the answer is not neccesarilly a number from `arr`.\n\n"}
{"question": "Given the `root` of a binary tree, return _the sum of values of its deepest leaves_.\n\n"}
{"question": "Given two binary search trees `root1` and `root2`, return _a list containing all the integers from both trees sorted in **ascending** order_.\n\n"}
{"question": "Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to **any** index with value 0.\n\nNotice that you can not jump outside of the array at any time.\n\n"}
{"question": "You are given an array `arr` of positive integers. You are also given the array `queries` where `queries[i] = [lefti, righti]`.\n\nFor each query `i` compute the **XOR** of elements from `lefti` to `righti` (that is, `arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti]` ).\n\nReturn an array `answer` where `answer[i]` is the answer to the `ith` query.\n\n"}
{"question": "There are `n` people, each person has a unique _id_ between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.\n\nLevel **1** of videos are all watched videos by your friends, level **2** of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path **exactly** equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\n\n"}
{"question": "Given a `m x n` matrix `mat` and an integer `k`, return _a matrix_ `answer` _where each_ `answer[i][j]` _is the sum of all elements_ `mat[r][c]` _for_:\n\n*   `i - k <= r <= i + k,`\n*   `j - k <= c <= j + k`, and\n*   `(r, c)` is a valid position in the matrix.\n\n"}
{"question": "Given the `root` of a binary tree, return _the sum of values of nodes with an **even-valued grandparent**_. If there are no nodes with an **even-valued grandparent**, return `0`.\n\nA **grandparent** of a node is the parent of its parent if it exists.\n\n"}
{"question": "Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).  \nFlip operation consists of change **any** single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\n\n"}
{"question": "There are `n` computers numbered from `0` to `n - 1` connected by ethernet cables `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between computers `ai` and `bi`. Any computer can reach any other computer directly or indirectly through the network.\n\nYou are given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\n\nReturn _the minimum number of times you need to do this in order to make all the computers connected_. If it is not possible, return `-1`.\n\n"}
{"question": "Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.  \nWords are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).  \nEach word would be put on only one column and that in one column there will be only one word.\n\n"}
{"question": "Given a binary tree `root` and an integer `target`, delete all the **leaf nodes** with value `target`.\n\nNote that once you delete a leaf node with value `target`**,** if its parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you cannot).\n\n"}
{"question": "Given a palindromic string of lowercase English letters `palindrome`, replace **exactly one** character with any lowercase English letter so that the resulting string is **not** a palindrome and that it is the **lexicographically smallest** one possible.\n\nReturn _the resulting string. If there is no way to replace a character to make it not a palindrome, return an **empty string**._\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc \"` is lexicographically smaller than `\"abcd \"` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.\n\n"}
{"question": "A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\nGiven an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return _the resulting matrix_.\n\n"}
{"question": "Given the array `restaurants` where `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.\n\nThe `veganFriendly` filter will be either _true_ (meaning you should only include restaurants with `veganFriendlyi` set to true) or _false_ (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.\n\nReturn the array of restaurant _**IDs**_ after filtering, ordered by **rating** from highest to lowest. For restaurants with the same rating, order them by _**id**_ from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value _1_ when it is _true_, and _0_ when it is _false_.\n\n"}
{"question": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.\n\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is **at most** `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities _**i**_ and _**j**_ is equal to the sum of the edges' weights along that path.\n\n"}
{"question": "You are given an integer array `arr`. You can choose a set of integers and remove all the occurrences of these integers in the array.\n\nReturn _the minimum size of the set so that **at least** half of the integers of the array are removed_.\n\n"}
{"question": "Given the `root` of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\n\nReturn _the maximum product of the sums of the two subtrees_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n**Note** that you need to maximize the answer before taking the mod and not after taking it.\n\n"}
{"question": "Given an array of integers `arr` and two integers `k` and `threshold`, return _the number of sub-arrays of size_ `k` _and average greater than or equal to_ `threshold`.\n\n"}
{"question": "Given two numbers, `hour` and `minutes`, return _the smaller angle (in degrees) formed between the_ `hour` _and the_ `minute` _hand_.\n\nAnswers within `10-5` of the actual value will be accepted as correct.\n\n"}
{"question": "You are given two strings of the same length `s` and `t`. In one step you can choose **any character** of `t` and replace it with **another character**.\n\nReturn _the minimum number of steps_ to make `t` an anagram of `s`.\n\nAn **Anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n"}
{"question": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller **time chunks** based on a certain frequency (every **minute**, **hour**, or **day**).\n\nFor example, the period `[10, 10000]` (in **seconds**) would be partitioned into the following **time chunks** with these frequencies:\n\n*   Every **minute** (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`\n*   Every **hour** (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`\n*   Every **day** (86400-second chunks): `[10,10000]`\n\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).\n\nDesign and implement an API to help the company with their analysis.\n\nImplement the `TweetCounts` class:\n\n*   `TweetCounts()` Initializes the `TweetCounts` object.\n*   `void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in **seconds**).\n*   `List getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each **time chunk** for the given period of time `[startTime, endTime]` (in **seconds**) and frequency `freq`.\n    *   `freq` is one of `\"minute \"`, `\"hour \"`, or `\"day \"` representing a frequency of every **minute**, **hour**, or **day** respectively.\n\n"}
{"question": "Design an algorithm that accepts a stream of integers and retrieves the product of the last `k` integers of the stream.\n\nImplement the `ProductOfNumbers` class:\n\n*   `ProductOfNumbers()` Initializes the object with an empty stream.\n*   `void add(int num)` Appends the integer `num` to the stream.\n*   `int getProduct(int k)` Returns the product of the last `k` numbers in the current list. You can assume that always the current list has at least `k` numbers.\n\nThe test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n\n"}
{"question": "You are given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.\n\nYou can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. You can only attend one event at any time `d`.\n\nReturn _the maximum number of events you can attend_.\n\n"}
{"question": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays `products` and `prices`, where the `ith` product has an ID of `products[i]` and a price of `prices[i]`.\n\nWhen a customer is paying, their bill is represented as two parallel integer arrays `product` and `amount`, where the `jth` product they purchased has an ID of `product[j]`, and `amount[j]` is how much of the product they bought. Their subtotal is calculated as the sum of each `amount[j] * (price of the jth product)`.\n\nThe supermarket decided to have a sale. Every `nth` customer paying for their groceries will be given a **percentage discount**. The discount amount is given by `discount`, where they will be given `discount` percent off their subtotal. More formally, if their subtotal is `bill`, then they would actually pay `bill * ((100 - discount) / 100)`.\n\nImplement the `Cashier` class:\n\n*   `Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, and the `products` and their `prices`.\n*   `double getBill(int[] product, int[] amount)` Returns the final total of the bill with the discount applied (if any). Answers within `10-5` of the actual value will be accepted.\n\n"}
{"question": "Given a string `s` consisting only of characters _a_, _b_ and _c_.\n\nReturn the number of substrings containing **at least** one occurrence of all these characters _a_, _b_ and _c_.\n\n"}
{"question": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if **all** the given nodes form **exactly one** valid binary tree.\n\nIf node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.\n\nNote that the nodes have no values and that we only use the node numbers in this problem.\n\n"}
{"question": "Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.\n\nReturn the two integers in any order.\n\n"}
{"question": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.\n\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\n\nYou are given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\n\nReturn _a string of all teams **sorted** by the ranking system_.\n\n"}
{"question": "Given a binary tree `root` and a linked list with `head` as the first node.\n\nReturn True if all the elements in the linked list starting from the `head` correspond to some _downward path_ connected in the binary tree otherwise return False.\n\nIn this context downward path means a path that starts at some node and goes downwards.\n\n"}
{"question": "Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.\n\n"}
{"question": "You are given the `root` of a binary tree.\n\nA ZigZag path for a binary tree is defined as follow:\n\n*   Choose **any** node in the binary tree and a direction (right or left).\n*   If the current direction is right, move to the right child of the current node; otherwise, move to the left child.\n*   Change the direction from right to left or from left to right.\n*   Repeat the second and third steps until you can't move in the tree.\n\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\n\nReturn _the longest **ZigZag** path contained in that tree_.\n\n"}
{"question": "You have a **1-indexed** binary string of length `n` where all the bits are `0` initially. We will flip all the bits of this binary string (i.e., change them from `0` to `1`) one by one. You are given a **1-indexed** integer array `flips` where `flips[i]` indicates that the bit at index `i` will be flipped in the `ith` step.\n\nA binary string is **prefix-aligned** if, after the `ith` step, all the bits in the **inclusive** range `[1, i]` are ones and all the other bits are zeros.\n\nReturn _the number of times the binary string is **prefix-aligned** during the flipping process_.\n\n"}
{"question": "A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.\n\nEach employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.\n\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\n\nThe `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime\\[i\\] minutes, all his direct subordinates can start spreading the news).\n\nReturn _the number of minutes_ needed to inform all the employees about the urgent news.\n\n"}
{"question": "Design a stack that supports increment operations on its elements.\n\nImplement the `CustomStack` class:\n\n*   `CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack.\n*   `void push(int x)` Adds `x` to the top of the stack if the stack has not reached the `maxSize`.\n*   `int pop()` Pops and returns the top of the stack or `-1` if the stack is empty.\n*   `void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, increment all the elements in the stack.\n\n"}
{"question": "Given the `root` of a binary search tree, return _a **balanced** binary search tree with the same node values_. If there is more than one answer, return **any of them**.\n\nA binary search tree is **balanced** if the depth of the two subtrees of every node never differs by more than `1`.\n\n"}
{"question": "A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.\n\nGiven the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row **3** and labelled with **8** is already reserved.\n\n_Return the maximum number of four-person groups you can assign on the cinema seats._ A four-person group occupies four adjacent seats **in one single row**. Seats across an aisle (such as \\[3,3\\] and \\[3,4\\]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.\n\n"}
{"question": "Given an integer array `nums`, return _the sum of divisors of the integers in that array that have exactly four divisors_. If there is no such integer in the array, return `0`.\n\n"}
{"question": "You are given an `m x n` `grid`. Each cell of `grid` represents a street. The street of `grid[i][j]` can be:\n\n*   `1` which means a street connecting the left cell and the right cell.\n*   `2` which means a street connecting the upper cell and the lower cell.\n*   `3` which means a street connecting the left cell and the lower cell.\n*   `4` which means a street connecting the right cell and the lower cell.\n*   `5` which means a street connecting the left cell and the upper cell.\n*   `6` which means a street connecting the right cell and the upper cell.\n\nYou will initially start at the street of the upper-left cell `(0, 0)`. A valid path in the grid is a path that starts from the upper left cell `(0, 0)` and ends at the bottom-right cell `(m - 1, n - 1)`. **The path should only follow the streets**.\n\n**Notice** that you are **not allowed** to change any street.\n\nReturn `true` _if there is a valid path in the grid or_ `false` _otherwise_.\n\n"}
{"question": "There are `n` soldiers standing in a line. Each soldier is assigned a **unique** `rating` value.\n\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\n*   Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).\n*   A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\n"}
{"question": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\n\nImplement the `UndergroundSystem` class:\n\n*   `void checkIn(int id, string stationName, int t)`\n    *   A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.\n    *   A customer can only be checked into one place at a time.\n*   `void checkOut(int id, string stationName, int t)`\n    *   A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.\n*   `double getAverageTime(string startStation, string endStation)`\n    *   Returns the average time it takes to travel from `startStation` to `endStation`.\n    *   The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened **directly**, meaning a check in at `startStation` followed by a check out from `endStation`.\n    *   The time it takes to travel from `startStation` to `endStation` **may be different** from the time it takes to travel from `endStation` to `startStation`.\n    *   There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.\n\nYou may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.\n\n"}
{"question": "Given a string `s` and an integer `k`, return `true` _if you can use all the characters in_ `s` _to construct_ `k` _palindrome strings or_ `false` _otherwise_.\n\n"}
{"question": "You are given a circle represented as `(radius, xCenter, yCenter)` and an axis-aligned rectangle represented as `(x1, y1, x2, y2)`, where `(x1, y1)` are the coordinates of the bottom-left corner, and `(x2, y2)` are the coordinates of the top-right corner of the rectangle.\n\nReturn `true` _if the circle and rectangle are overlapped otherwise return_ `false`. In other words, check if there is **any** point `(xi, yi)` that belongs to the circle and the rectangle at the same time.\n\n"}
{"question": "Given the binary representation of an integer as a string `s`, return _the number of steps to reduce it to_ `1` _under the following rules_:\n\n*   If the current number is even, you have to divide it by `2`.\n    \n*   If the current number is odd, you have to add `1` to it.\n    \n\nIt is guaranteed that you can always reach one for all test cases.\n\n"}
{"question": "A string `s` is called **happy** if it satisfies the following conditions:\n\n*   `s` only contains the letters `'a'`, `'b'`, and `'c'`.\n*   `s` does not contain any of `\"aaa \"`, `\"bbb \"`, or `\"ccc \"` as a substring.\n*   `s` contains **at most** `a` occurrences of the letter `'a'`.\n*   `s` contains **at most** `b` occurrences of the letter `'b'`.\n*   `s` contains **at most** `c` occurrences of the letter `'c'`.\n\nGiven three integers `a`, `b`, and `c`, return _the **longest possible happy** string_. If there are multiple longest happy strings, return _any of them_. If there is no such string, return _the empty string_ `\" \"`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:\n\n*   In the beginning, you have the permutation `P=[1,2,3,...,m]`.\n*   For the current `i`, find the position of `queries[i]` in the permutation `P` (**indexing from 0**) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.\n\nReturn an array containing the result for the given `queries`.\n\n"}
{"question": "**HTML entity parser** is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\n\nThe special characters and their entities for HTML are:\n\n*   **Quotation Mark:** the entity is `&quot;` and symbol character is `\"`.\n*   **Single Quote Mark:** the entity is `&apos;` and symbol character is `'`.\n*   **Ampersand:** the entity is `&amp;` and symbol character is `&`.\n*   **Greater Than Sign:** the entity is `&gt;` and symbol character is `>`.\n*   **Less Than Sign:** the entity is `&lt;` and symbol character is `<`.\n*   **Slash:** the entity is `&frasl;` and symbol character is `/`.\n\nGiven the input `text` string to the HTML parser, you have to implement the entity parser.\n\nReturn _the text after replacing the entities by the special characters_.\n\n"}
{"question": "Given an integer `k`, _return the minimum number of Fibonacci numbers whose sum is equal to_ `k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n\n*   `F1 = 1`\n*   `F2 = 1`\n*   `Fn = Fn-1 + Fn-2` for `n > 2.`\n\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.\n\n"}
{"question": "A **happy string** is a string that:\n\n*   consists only of letters of the set `['a', 'b', 'c']`.\n*   `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\nFor example, strings **\"abc \", \"ac \", \"b \"** and **\"abcbabcbcb \"** are all happy strings and strings **\"aa \", \"baa \"** and **\"ababbc \"** are not happy strings.\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.\n\nReturn _the kth string_ of this list or return an **empty string** if there are less than `k` happy strings of length `n`.\n\n"}
{"question": "Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.\n\n_Return the restaurant's \"**display table**\"_. The \"**display table**\" is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \"Table\", followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\n\n"}
{"question": "You are given the string `croakOfFrogs`, which represents a combination of the string `\"croak \"` from different frogs, that is, multiple frogs can croak at the same time, so multiple `\"croak \"` are mixed.\n\n_Return the minimum number of_ different _frogs to finish all the croaks in the given string._\n\nA valid `\"croak \"` means a frog is printing five letters `'c'`, `'r'`, `'o'`, `'a'`, and `'k'` **sequentially**. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid `\"croak \"` return `-1`.\n\n"}
{"question": "There are several cards **arranged in a row**, and each card has an associated number of points. The points are given in the integer array `cardPoints`.\n\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.\n\nYour score is the sum of the points of the cards you have taken.\n\nGiven the integer array `cardPoints` and the integer `k`, return the _maximum score_ you can obtain.\n\n"}
{"question": "Given a 2D integer array `nums`, return _all elements of_ `nums` _in diagonal order as shown in the below images_.\n\n"}
{"question": "A **row-sorted binary matrix** means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.\n\nGiven a **row-sorted binary matrix** `binaryMatrix`, return _the index (0-indexed) of the **leftmost column** with a 1 in it_. If such an index does not exist, return `-1`.\n\n**You can't access the Binary Matrix directly.** You may only access the matrix using a `BinaryMatrix` interface:\n\n*   `BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).\n*   `BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.\n\nSubmissions making more than `1000` calls to `BinaryMatrix.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification.\n\nFor custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.\n\n"}
{"question": "You have a queue of integers, you need to retrieve the first unique integer in the queue.\n\nImplement the `FirstUnique` class:\n\n*   `FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.\n*   `int showFirstUnique()` returns the value of **the first unique** integer of the queue, and returns **\\-1** if there is no such integer.\n*   `void add(int value)` insert value to the queue.\n\n"}
{"question": "Given a binary tree where each path going from the root to any leaf form a **valid sequence**, check if a given string is a **valid sequence** in such binary tree.\n\nWe get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a **sequence** in the given binary tree.\n\n"}
{"question": "You are given an integer `num`. You will apply the following steps exactly **two** times:\n\n*   Pick a digit `x (0 <= x <= 9)`.\n*   Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n*   Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n*   The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\nReturn _the max difference_ between `a` and `b`.\n\n"}
{"question": "Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.\n\nA string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.\n\n"}
{"question": "Given an array of integers `nums` and an integer `limit`, return the size of the longest **non-empty** subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`_._\n\n"}
{"question": "You are given an integer array `target` and an integer `n`.\n\nYou have an empty stack with the two following operations:\n\n*   **`\"Push \"`**: pushes an integer to the top of the stack.\n*   **`\"Pop \"`**: removes the integer on the top of the stack.\n\nYou also have a stream of the integers in the range `[1, n]`.\n\nUse the two stack operations to make the numbers in the stack (from the bottom to the top) equal to `target`. You should follow the following rules:\n\n*   If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.\n*   If the stack is not empty, pop the integer at the top of the stack.\n*   If, at any moment, the elements in the stack (from the bottom to the top) are equal to `target`, do not read new integers from the stream and do not do more operations on the stack.\n\nReturn _the stack operations needed to build_ `target` following the mentioned rules. If there are multiple valid answers, return **any of them**.\n\n"}
{"question": "Given an array of integers `arr`.\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.\n\nLet's define `a` and `b` as follows:\n\n*   `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n*   `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\n\nNote that **^** denotes the **bitwise-xor** operation.\n\nReturn _the number of triplets_ (`i`, `j` and `k`) Where `a == b`.\n\n"}
{"question": "Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. _Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at **vertex 0** and coming back to this vertex._\n\nThe edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.\n\n"}
{"question": "Given an integer `n`, return _a list of all **simplified** fractions between_ `0` _and_ `1` _(exclusive) such that the denominator is less-than-or-equal-to_ `n`. You can return the answer in **any order**.\n\n"}
{"question": "Given a binary tree `root`, a node _X_ in the tree is named **good** if in the path from root to _X_ there are no nodes with a value _greater than_ X.\n\nReturn the number of **good** nodes in the binary tree.\n\n"}
{"question": "Given a sentence `text` (A _sentence_ is a string of space-separated words) in the following format:\n\n*   First letter is in upper case.\n*   Each word in `text` are separated by a single space.\n\nYour task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\n\nReturn the new text following the format shown above.\n\n"}
{"question": "Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (**indexed from 0**).\n\n_Return the indices of people whose list of favorite companies is not a **subset** of any other list of favorites companies_. You must return the indices in increasing order.\n\n"}
{"question": "Given a string `s` and an integer `k`, return _the maximum number of vowel letters in any substring of_ `s` _with length_ `k`.\n\n**Vowel letters** in English are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n"}
{"question": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n_Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes._\n\n"}
{"question": "Given a binary string `s` and an integer `k`, return `true` _if every binary code of length_ `k` _is a substring of_ `s`. Otherwise, return `false`.\n\n"}
{"question": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `ai` first if you want to take course `bi`.\n\n*   For example, the pair `[0, 1]` indicates that you have to take course `0` before you can take course `1`.\n\nPrerequisites can also be **indirect**. If course `a` is a prerequisite of course `b`, and course `b` is a prerequisite of course `c`, then course `a` is a prerequisite of course `c`.\n\nYou are also given an array `queries` where `queries[j] = [uj, vj]`. For the `jth` query, you should answer whether course `uj` is a prerequisite of course `vj` or not.\n\nReturn _a boolean array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query._\n\n"}
{"question": "You are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts` where:\n\n*   `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, and\n*   `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.\n\nReturn _the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays_ `horizontalCuts` _and_ `verticalCuts`. Since the answer can be a large number, return this **modulo** `109 + 7`.\n\n"}
{"question": "There are `n` cities numbered from `0` to `n - 1` and `n - 1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\n\nRoads are represented by `connections` where `connections[i] = [ai, bi]` represents a road from city `ai` to city `bi`.\n\nThis year, there will be a big event in the capital (city `0`), and many people want to travel to this city.\n\nYour task consists of reorienting some roads such that each city can visit the city `0`. Return the **minimum** number of edges changed.\n\nIt's **guaranteed** that each city can reach city `0` after reorder.\n\n"}
{"question": "Given an array of integers `arr` and an integer `k`.\n\nA value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the **median** of the array.  \nIf `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.\n\nReturn _a list of the strongest `k`_ values in the array. return the answer **in any arbitrary order**.\n\n**Median** is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list **(0-indexed)**.\n\n*   For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.\n*   For `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.\n\n"}
{"question": "You have a **browser** of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.\n\nImplement the `BrowserHistory` class:\n\n*   `BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.\n*   `void visit(string url)` Visits `url` from the current page. It clears up all the forward history.\n*   `string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history **at most** `steps`.\n*   `string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history **at most** `steps`.\n\n"}
{"question": "Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:\n\n1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n\n*   Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.\n\n2. `getValue(int row, int col)`\n\n*   Returns the current value of the coordinate `(row,col)` from the rectangle.\n\n"}
{"question": "You are given an array of integers `arr` and an integer `target`.\n\nYou have to find **two non-overlapping sub-arrays** of `arr` each with a sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is **minimum**.\n\nReturn _the minimum sum of the lengths_ of the two required sub-arrays, or return `-1` if you cannot find such two sub-arrays.\n\n"}
{"question": "Given an array of integers `arr` and an integer `k`. Find the _least number of unique integers_ after removing **exactly** `k` elements**.**\n\n"}
{"question": "You are given an integer array `bloomDay`, an integer `m` and an integer `k`.\n\nYou want to make `m` bouquets. To make a bouquet, you need to use `k` **adjacent flowers** from the garden.\n\nThe garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in **exactly one** bouquet.\n\nReturn _the minimum number of days you need to wait to be able to make_ `m` _bouquets from the garden_. If it is impossible to make m bouquets return `-1`.\n\n"}
{"question": "A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.\n\nReturn a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the tree.\n\nThe tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:\n\n*   `val`: an integer representing `Node.val`\n*   `random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.\n\nYou will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.\n\n"}
{"question": "Given an array of strings `names` of size `n`. You will create `n` folders in your file system **such that**, at the `ith` minute, you will create a folder with the name `names[i]`.\n\nSince two files **cannot** have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the **smallest positive integer** such that the obtained name remains unique.\n\nReturn _an array of strings of length_ `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.\n\n"}
{"question": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake that is **full of water**, there will be a **flood**. Your goal is to avoid floods in any lake.\n\nGiven an integer array `rains` where:\n\n*   `rains[i] > 0` means there will be rains over the `rains[i]` lake.\n*   `rains[i] == 0` means there are no rains this day and you can choose **one lake** this day and **dry it**.\n\nReturn _an array `ans`_ where:\n\n*   `ans.length == rains.length`\n*   `ans[i] == -1` if `rains[i] > 0`.\n*   `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.\n\nIf there are multiple valid answers return **any** of them. If it is impossible to avoid flood return **an empty array**.\n\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.\n\n"}
{"question": "Given a `root` of an N-ary tree, return a [**deep copy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the tree.\n\nEach node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.\n\nclass Node {\n    public int val;\n    public List children;\n}\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n"}
{"question": "You are given two positive integers `n` and `k`. A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.\n\nConsider a list of all factors of `n` sorted in **ascending order**, return _the_ `kth` _factor_ in this list or return `-1` if `n` has less than `k` factors.\n\n"}
{"question": "Given a binary array `nums`, you should delete one element from it.\n\nReturn _the size of the longest non-empty subarray containing only_ `1`_'s in the resulting array_. Return `0` if there is no such subarray.\n\n"}
{"question": "You are given an array of integers `nums` and an integer `target`.\n\nReturn _the number of **non-empty** subsequences of_ `nums` _such that the sum of the minimum and maximum element on it is less or equal to_ `target`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "We will use a file-sharing system to share a very large file which consists of `m` small **chunks** with IDs from `1` to `m`.\n\nWhen users join the system, the system should assign **a unique** ID to them. The unique ID should be used **once** for each user, but when a user leaves the system, the ID can be **reused** again.\n\nUsers can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receives a non-empty list of IDs, they receive the requested chunk successfully.\n\n  \nImplement the `FileSharing` class:\n\n*   `FileSharing(int m)` Initializes the object with a file of `m` chunks.\n*   `int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the **smallest positive integer** not taken by any other user. Return the assigned id.\n*   `void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.\n*   `int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.\n\n"}
{"question": "We have a wooden plank of the length `n` **units**. Some ants are walking on the plank, each ant moves with a speed of **1 unit per second**. Some of the ants move to the **left**, the other move to the **right**.\n\nWhen two ants moving in two **different** directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\n\nWhen an ant reaches **one end** of the plank at a time `t`, it falls out of the plank immediately.\n\nGiven an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right, return _the moment when the last ant(s) fall out of the plank_.\n\n"}
{"question": "Given an `m x n` binary matrix `mat`, _return the number of **submatrices** that have all ones_.\n\n"}
{"question": "You are given all the nodes of an **[N-ary tree](https://leetcode.com/explore/learn/card/n-ary-tree/)** as an array of `Node` objects, where each node has a **unique value**.\n\nReturn _the **root** of the N-ary tree_.\n\n**Custom testing:**\n\nAn N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).\n\nFor example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.\n\nThe testing will be done in the following way:\n\n1.  The **input data** should be provided as a serialization of the tree.\n2.  The driver code will construct the tree from the serialized input data and put each `Node` object into an array **in an arbitrary order**.\n3.  The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array.\n4.  The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the **same**, the test **passes**.\n\n"}
{"question": "You are given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.\n\n_Return the sum of the numbers from index_ `left` _to index_ `right` (**indexed from 1**)_, inclusive, in the new array._ Since the answer can be a huge number return it modulo `109 + 7`.\n\n"}
{"question": "You are given an integer array `nums`.\n\nIn one move, you can choose one element of `nums` and change it to **any value**.\n\nReturn _the minimum difference between the largest and smallest value of `nums` **after performing at most three moves**_.\n\n"}
{"question": "Given a binary string `s`, return _the number of substrings with all characters_ `1`_'s_. Since the answer may be too large, return it modulo `109 + 7`.\n\n"}
{"question": "You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.\n\nGiven two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.\n\nIf there is no path from `start` to `end`, **return 0**. Your answer will be accepted if it differs from the correct answer by at most **1e-5**.\n\n"}
{"question": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The **root** of the tree is the node `0`, and each node of the tree has **a label** which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).\n\nThe `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.\n\nReturn _an array of size `n`_ where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.\n\nA subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.\n\n"}
{"question": "Given a `root` of an [N-ary tree](https://leetcode.com/articles/introduction-to-n-ary-trees/), you need to compute the length of the diameter of the tree.\n\nThe diameter of an N-ary tree is the length of the **longest** path between any two nodes in the tree. This path may or may not pass through the root.\n\n(_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)_\n\n"}
{"question": "Given an array of integers `arr`, return _the number of subarrays with an **odd** sum_.\n\nSince the answer can be very large, return it modulo `109 + 7`.\n\n"}
{"question": "You are given a string `s`.\n\nA split is called **good** if you can split `s` into two non-empty strings `sleft` and `sright` where their concatenation is equal to `s` (i.e., `sleft + sright = s`) and the number of distinct letters in `sleft` and `sright` is the same.\n\nReturn _the number of **good splits** you can make in `s`_.\n\n"}
{"question": "You are given a **0-indexed** binary string `target` of length `n`. You have another binary string `s` of length `n` that is initially set to all zeros. You want to make `s` equal to `target`.\n\nIn one operation, you can pick an index `i` where `0 <= i < n` and flip all bits in the **inclusive** range `[i, n - 1]`. Flip means changing `'0'` to `'1'` and `'1'` to `'0'`.\n\nReturn _the minimum number of operations needed to make_ `s` _equal to_ `target`.\n\n"}
{"question": "You are given the `root` of a binary tree and an integer `distance`. A pair of two different **leaf** nodes of a binary tree is said to be good if the length of **the shortest path** between them is less than or equal to `distance`.\n\nReturn _the number of good leaf node pairs_ in the tree.\n\n"}
{"question": "We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is **larger** than the rest of the integers. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions:\n\n*   `int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:\n    *   **1** if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.\n    *   **0** if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.\n    *   **\\-1** if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.\n*   `int length()`: Returns the size of the array.\n\nYou are allowed to call `compareSub()` **20 times** at most. You can assume both functions work in `O(1)` time.\n\nReturn _the index of the array `arr` which has the largest integer_.\n\n"}
{"question": "Given an integer array `arr` of **distinct** integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0`, and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.\n\nReturn _the integer which will win the game_.\n\nIt is **guaranteed** that there will be a winner of the game.\n\n"}
{"question": "Given an `n x n` binary `grid`, in one step you can choose two **adjacent rows** of the grid and swap them.\n\nA grid is said to be **valid** if all the cells above the main diagonal are **zeros**.\n\nReturn _the minimum number of steps_ needed to make the grid valid, or **\\-1** if the grid cannot be valid.\n\nThe main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.\n\n"}
{"question": "We have an integer array `nums`, where all the integers in `nums` are **0** or **1**. You will not be given direct access to the array, instead, you will have an **API** `ArrayReader` which have the following functions:\n\n*   `int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns:\n    *   **4** : if the values of the 4 elements are the same (0 or 1).\n    *   **2** : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.\n    *   **0** : if two element have a value equal to 0 and two elements have a value equal to 1.\n*   `int length()`: Returns the size of the array.\n\nYou are allowed to call `query()` **2 \\* n times** at most where n is equal to `ArrayReader.length()`.\n\nReturn **any** index of the most frequent value in `nums`, in case of tie, return -1.\n\n"}
{"question": "Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.\n\nDuring the `ith` (`1 <= i <= k`) move you can:\n\n*   Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.\n*   Do nothing.\n\nShifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.\n\nRemember that any index `j` can be picked at most once.\n\nReturn `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.\n\n"}
{"question": "Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is **balanced** if:\n\n*   Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n*   Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\nIn other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis.\n\n*   For example, `\"()) \"`, `\"())(()))) \"` and `\"(())()))) \"` are balanced, `\")() \"`, `\"())) \"` and `\"(())) \"` are not balanced.\n\nYou can insert the characters `'('` and `')'` at any position of the string to balance it if needed.\n\nReturn _the minimum number of insertions_ needed to make `s` balanced.\n\n"}
{"question": "Given two positive integers `n` and `k`, the binary string `Sn` is formed as follows:\n\n*   `S1 = \"0 \"`\n*   `Si = Si - 1 + \"1 \" + reverse(invert(Si - 1))` for `i > 1`\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the reversed string `x`, and `invert(x)` inverts all the bits in `x` (`0` changes to `1` and `1` changes to `0`).\n\nFor example, the first four strings in the above sequence are:\n\n*   `S1 = \"0 \"`\n*   `S2 = \"0**1**1 \"`\n*   `S3 = \"011**1**001 \"`\n*   `S4 = \"0111001**1**0110001 \"`\n\nReturn _the_ `kth` _bit_ _in_ `Sn`. It is guaranteed that `k` is valid for the given `n`.\n\n"}
{"question": "Given an array `nums` and an integer `target`, return _the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to_ `target`.\n\n"}
{"question": "You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e., `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e., perform `arr[x] -=1` and `arr[y] += 1`). The goal is to make all the elements of the array **equal**. It is **guaranteed** that all the elements of the array can be made equal using some operations.\n\nGiven an integer `n`, the length of the array, return _the minimum number of operations_ needed to make all the elements of arr equal.\n\n"}
{"question": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the **minimum magnetic force** between any two balls is **maximum**.\n\nRick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.\n\nGiven the integer array `position` and the integer `m`. Return _the required force_.\n\n"}
{"question": "Given a list of strings `dict` where all the strings are of the same length.\n\nReturn `true` if there are 2 strings that only differ by 1 character in the same index, otherwise return `false`.\n\n"}
{"question": "Given a **directed acyclic graph**, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.\n\nFind _the smallest set of vertices from which all nodes in the graph are reachable_. It's guaranteed that a unique solution exists.\n\nNotice that you can return the vertices in any order.\n\n"}
{"question": "You are given an integer array `nums`. You have an integer array `arr` of the same length with all values set to `0` initially. You also have the following `modify` function:\n\nYou want to use the modify function to covert `arr` to `nums` using the minimum number of calls.\n\nReturn _the minimum number of function calls to make_ `nums` _from_ `arr`.\n\nThe test cases are generated so that the answer fits in a **32-bit** signed integer.\n\n"}
{"question": "Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the **same value** in `grid`.\n\nA cycle is a path of **length 4 or more** in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the **same value** of the current cell.\n\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell.\n\nReturn `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.\n\n"}
{"question": "There are `3n` piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n*   In each step, you will choose **any** `3` piles of coins (not necessarily consecutive).\n*   Of your choice, Alice will pick the pile with the maximum number of coins.\n*   You will pick the next pile with the maximum number of coins.\n*   Your friend Bob will pick the last pile.\n*   Repeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\nReturn the maximum number of coins that you can have.\n\n"}
{"question": "Given an array `arr` that represents a permutation of numbers from `1` to `n`.\n\nYou have a binary string of size `n` that initially has all its bits set to zero. At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`.\n\nYou are also given an integer `m`. Find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of `1`'s such that it cannot be extended in either direction.\n\nReturn _the latest step at which there exists a group of ones of length **exactly**_ `m`. _If no such group exists, return_ `-1`.\n\n"}
{"question": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\n\n*   Boxes cannot be stacked.\n*   You can rearrange the insertion order of the boxes.\n*   Boxes can only be pushed into the warehouse from left to right only.\n*   If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn _the maximum number of boxes you can put into the warehouse._\n\n"}
{"question": "Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.\n\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\n\nReturn _the maximum length of a subarray with positive product_.\n\n"}
{"question": "Given two sparse vectors, compute their dot product.\n\nImplement class `SparseVector`:\n\n*   `SparseVector(nums)` Initializes the object with the vector `nums`\n*   `dotProduct(vec)` Compute the dot product between the instance of _SparseVector_ and `vec`\n\nA **sparse vector** is a vector that has mostly zero values, you should store the sparse vector **efficiently** and compute the dot product between two _SparseVector_.\n\n**Follow up:** What if only one of the vectors is sparse?\n\n"}
{"question": "Given a binary string `s`, you can split `s` into 3 **non-empty** strings `s1`, `s2`, and `s3` where `s1 + s2 + s3 = s`.\n\nReturn the number of ways `s` can be split such that the number of ones is the same in `s1`, `s2`, and `s3`. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are **non-decreasing**.\n\nReturn _the length of the shortest subarray to remove_.\n\nA **subarray** is a contiguous subsequence of the array.\n\n"}
{"question": "Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\n\n*   Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n*   Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n"}
{"question": "Alice has `n` balloons arranged on a rope. You are given a **0-indexed** string `colors` where `colors[i]` is the color of the `ith` balloon.\n\nAlice wants the rope to be **colorful**. She does not want **two consecutive balloons** to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it **colorful**. You are given a **0-indexed** integer array `neededTime` where `neededTime[i]` is the time (in seconds) that Bob needs to remove the `ith` balloon from the rope.\n\nReturn _the **minimum time** Bob needs to make the rope **colorful**_.\n\n"}
{"question": "You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\nBoxes are put into the warehouse by the following rules:\n\n*   Boxes cannot be stacked.\n*   You can rearrange the insertion order of the boxes.\n*   Boxes can be pushed into the warehouse from **either side** (left or right)\n*   If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\nReturn _the maximum number of boxes you can put into the warehouse._\n\n"}
{"question": "You are given a list of `preferences` for `n` friends, where `n` is always **even**.\n\nFor each person `i`, `preferences[i]` contains a list of friends **sorted** in the **order of preference**. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.\n\nAll the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.\n\nHowever, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:\n\n*   `x` prefers `u` over `y`, and\n*   `u` prefers `x` over `v`.\n\nReturn _the number of unhappy friends_.\n\n"}
{"question": "You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.\n\nThe cost of connecting two points `[xi, yi]` and `[xj, yj]` is the **manhattan distance** between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.\n\nReturn _the minimum cost to make all points connected._ All points are connected if there is **exactly one** simple path between any two points.\n\n"}
{"question": "Implement the `BSTIterator` class that represents an iterator over the **[in-order traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR))** of a binary search tree (BST):\n\n*   `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n*   `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n*   `int next()` Moves the pointer to the right, then returns the number at the pointer.\n*   `boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.\n*   `int prev()` Moves the pointer to the left, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.\n\n"}
{"question": "We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are _0-indexed_.\n\nReturn _the maximum total sum of all requests **among all permutations** of_ `nums`.\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given an array of positive integers `nums`, remove the **smallest** subarray (possibly **empty**) such that the **sum** of the remaining elements is divisible by `p`. It is **not** allowed to remove the whole array.\n\nReturn _the length of the smallest subarray that you need to remove, or_ `-1` _if it's impossible_.\n\nA **subarray** is defined as a contiguous block of elements in the array.\n\n"}
{"question": "Given a string `s`, return _the maximum number of unique substrings that the given string can be split into_.\n\nYou can split string `s` into any list of **non-empty substrings**, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are **unique**.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "You are given a `m x n` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only **move right or down** in the matrix.\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(m - 1, n - 1)`, find the path with the **maximum non-negative product**. The product of a path is the product of all integers in the grid cells visited along the path.\n\nReturn the _maximum non-negative product **modulo**_ `109 + 7`. _If the maximum product is **negative**, return_ `-1`.\n\nNotice that the modulo is performed after getting the maximum product.\n\n"}
{"question": "You are the operator of a Centennial Wheel that has **four gondolas**, and each gondola has room for **up** **to** **four people**. You have the ability to rotate the gondolas **counterclockwise**, which costs you `runningCost` dollars.\n\nYou are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you **must rotate the wheel** `i` **times before the** `customers[i]` **customers arrive**. **You cannot make customers wait if there is room in the gondola**. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\n\nYou can stop the wheel at any time, including **before** **serving** **all** **customers**. If you decide to stop serving customers, **all subsequent rotations are free** in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait **for the next rotation**.\n\nReturn _the minimum number of rotations you need to perform to maximize your profit._ If there is **no scenario** where the profit is positive, return `-1`.\n\n"}
{"question": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.\n\nSuccessor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\n\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n\n1.  In the beginning, `curOrder` will be `[ \"king \"]`.\n2.  Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[ \"king \", \"Alice \"]`.\n3.  Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \"]`.\n4.  Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`.\n5.  Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[ \"king \", \"Alice \", \"Jack \", \"Bob \"]`.\n\nUsing the above function, we can always obtain a unique order of inheritance.\n\nImplement the `ThroneInheritance` class:\n\n*   `ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.\n*   `void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.\n*   `void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.\n*   `string[] getInheritanceOrder()` Returns a list representing the current order of inheritance **excluding** dead people.\n\n"}
{"question": "Given the `root` of a binary tree and a node `u` in the tree, return _the **nearest** node on the **same level** that is to the **right** of_ `u`_, or return_ `null` _if_ `u` _is the rightmost node in its level_.\n\n"}
{"question": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an **alert** if any worker uses the key-card **three or more times** in a one-hour period.\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used **in a** **single day**.\n\nAccess times are given in the **24-hour time format \"HH:MM \"**, such as `\"23:51 \"` and `\"09:49 \"`.\n\nReturn a _list of unique worker names who received an alert for frequent keycard use_. Sort the names in **ascending order alphabetically**.\n\nNotice that `\"10:00 \"` - `\"11:00 \"` is considered to be within a one-hour period, while `\"22:51 \"` - `\"23:52 \"` is not considered to be within a one-hour period.\n\n"}
{"question": "You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\n\nFind any matrix of **non-negative** integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.\n\nReturn _a 2D array representing **any** matrix that fulfills the requirements_. It's guaranteed that **at least one** matrix that fulfills the requirements exists.\n\n"}
{"question": "A binary tree is named **Even-Odd** if it meets the following conditions:\n\n*   The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.\n*   For every **even-indexed** level, all nodes at the level have **odd** integer values in **strictly increasing** order (from left to right).\n*   For every **odd-indexed** level, all nodes at the level have **even** integer values in **strictly decreasing** order (from left to right).\n\nGiven the `root` of a binary tree, _return_ `true` _if the binary tree is **Even-Odd**, otherwise return_ `false`_._\n\n"}
{"question": "A **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).\n\nYou are given the roots of two binary expression trees, `root1` and `root2`. Return `true` _if the two binary expression trees are equivalent_. Otherwise, return `false`.\n\nTwo binary expression trees are equivalent if they **evaluate to the same value** regardless of what the variables are set to.\n\n"}
{"question": "There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.\n\nThe **network rank** of **two different cities** is defined as the total number of **directly** connected roads to **either** city. If a road is directly connected to both cities, it is only counted **once**.\n\nThe **maximal network rank** of the infrastructure is the **maximum network rank** of all pairs of different cities.\n\nGiven the integer `n` and the array `roads`, return _the **maximal network rank** of the entire infrastructure_.\n\n"}
{"question": "You are given two strings `a` and `b` of the same length. Choose an index and split both strings **at the same index**, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = \"abc \"`, then `\" \" + \"abc \"`, `\"a \" + \"bc \"`, `\"ab \" + \"c \"` , and `\"abc \" + \" \"` are valid splits.\n\nReturn `true` _if it is possible to form_ _a palindrome string, otherwise return_ `false`.\n\n**Notice** that `x + y` denotes the concatenation of strings `x` and `y`.\n\n"}
{"question": "You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes **in ascending order**.\n\nYou can use the `FontInfo` interface to get the width and height of any character at any available font size.\n\nThe `FontInfo` interface is defined as such:\n\ninterface FontInfo {\n  // Returns the width of character ch on the screen using font size fontSize.\n  // O(1) per call\n  public int getWidth(int fontSize, char ch);\n\n  // Returns the height of any character on the screen using font size fontSize.\n  // O(1) per call\n  public int getHeight(int fontSize);\n}\n\nThe calculated width of `text` for some `fontSize` is the **sum** of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (**0-indexed**). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a **single line**.\n\nIt is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.\n\nIt is also guaranteed that for any font size `fontSize` and any character `ch`:\n\n*   `getHeight(fontSize) <= getHeight(fontSize+1)`\n*   `getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`\n\nReturn _the maximum font size you can use to display_ `text` _on the screen_. If `text` cannot fit on the display with any font size, return `-1`.\n\n"}
{"question": "You are given an array of network towers `towers`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are **integral coordinates** on the X-Y plane, and the distance between the two coordinates is the **Euclidean distance**.\n\nYou are also given an integer `radius` where a tower is **reachable** if the distance is **less than or equal to** `radius`. Outside that distance, the signal becomes garbled, and the tower is **not reachable**.\n\nThe signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. The **network quality** at a coordinate is the sum of the signal qualities from all the **reachable** towers.\n\nReturn _the array_ `[cx, cy]` _representing the **integral** coordinate_ `(cx, cy)` _where the **network quality** is maximum. If there are multiple coordinates with the same **network quality**, return the lexicographically minimum **non-negative** coordinate._\n\n**Note:**\n\n*   A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either:\n    *   `x1 < x2`, or\n    *   `x1 == x2` and `y1 < y2`.\n*   `⌊val⌋` is the greatest integer less than or equal to `val` (the floor function).\n\n"}
{"question": "Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw **exactly** `k` **non-overlapping** line segments such that each segment covers two or more points. The endpoints of each segment must have **integral coordinates**. The `k` line segments **do not** have to cover all `n` points, and they are **allowed** to share endpoints.\n\nReturn _the number of ways we can draw_ `k` _non-overlapping line segments__._ Since this number can be huge, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a string `s` of **even length** consisting of digits from `0` to `9`, and two integers `a` and `b`.\n\nYou can apply either of the following two operations any number of times and in any order on `s`:\n\n*   Add `a` to all odd indices of `s` **(0-indexed)**. Digits post `9` are cycled back to `0`. For example, if `s = \"3456 \"` and `a = 5`, `s` becomes `\"3951 \"`.\n*   Rotate `s` to the right by `b` positions. For example, if `s = \"3456 \"` and `b = 1`, `s` becomes `\"6345 \"`.\n\nReturn _the **lexicographically smallest** string you can obtain by applying the above operations any number of times on_ `s`.\n\nA string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `\"0158 \"` is lexicographically smaller than `\"0190 \"` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.\n\n"}
{"question": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the **sum** of scores of all the players in the team.\n\nHowever, the basketball team is not allowed to have **conflicts**. A **conflict** exists if a younger player has a **strictly higher** score than an older player. A conflict does **not** occur between players of the same age.\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return _the highest overall score of all possible basketball teams_.\n\n"}
{"question": "Given the `postfix` tokens of an arithmetic expression, build and return _the binary expression tree that represents this expression._\n\n**Postfix** notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [ \"4 \", \"5 \", \"7 \", \"2 \", \"+ \", \"- \", \"* \"]`.\n\nThe class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.\n\nA **[binary expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree)** is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).\n\nIt's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).\n\n**Follow up:** Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?\n\n"}
{"question": "A sequence of numbers is called **arithmetic** if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0]` for all valid `i`.\n\nFor example, these are **arithmetic** sequences:\n\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\n\nThe following sequence is not **arithmetic**:\n\n1, 1, 2, 5, 7\n\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are **0-indexed**.\n\nReturn _a list of_ `boolean` _elements_ `answer`_, where_ `answer[i]` _is_ `true` _if the subarray_ `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` _can be **rearranged** to form an **arithmetic** sequence, and_ `false` _otherwise._\n\n"}
{"question": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., **0-indexed**). You can move **up**, **down**, **left**, or **right**, and you wish to find a route that requires the minimum **effort**.\n\nA route's **effort** is the **maximum absolute difference** in heights between two consecutive cells of the route.\n\nReturn _the minimum **effort** required to travel from the top-left cell to the bottom-right cell._\n\n"}
{"question": "A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.\n\nEach node has three attributes:\n\n*   `coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `**9**x4` is `9`.\n*   `power`: an integer representing the exponent. The power of the term `9x**4**` is `4`.\n*   `next`: a pointer to the next node in the list, or `null` if it is the last node of the list.\n\nFor example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:\n\nThe polynomial linked list must be in its standard form: the polynomial must be in **strictly** descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.\n\nGiven two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return _the head of the sum of the polynomials_.\n\n**`PolyNode` format:**\n\nThe input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.\n\n"}
{"question": "Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return _the **widest vertical area** between two points such that no points are inside the area._\n\nA **vertical area** is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The **widest vertical area** is the one with the maximum width.\n\nNote that points **on the edge** of a vertical area **are not** considered included in the area.\n\n"}
{"question": "Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a **single character** by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by **exactly** one character.\n\nFor example, the underlined substrings in `\"computer \"` and `\"computation \"` only differ by the `'e'`/`'a'`, so this is a valid way.\n\nReturn _the number of substrings that satisfy the condition above._\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "Given an integer `n`, return _the number of strings of length_ `n` _that consist only of vowels (_`a`_,_ `e`_,_ `i`_,_ `o`_,_ `u`_) and are **lexicographically sorted**._\n\nA string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.\n\n"}
{"question": "You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.\n\nYou start your journey from building `0` and move to the next building by possibly using bricks or ladders.\n\nWhile moving from building `i` to building `i+1` (**0-indexed**),\n\n*   If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks.\n*   If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**.\n\n_Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally._\n\n"}
{"question": "Given the `root` of a binary tree, return _the lowest common ancestor (LCA) of two given nodes,_ `p` _and_ `q`. If either node `p` or `q` **does not exist** in the tree, return `null`. All values of the nodes in the tree are **unique**.\n\nAccording to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as **descendants** (where we allow **a node to be a descendant of itself**) \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.\n\n"}
{"question": "A string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\nGiven a string `s`, return _the **minimum** number of characters you need to delete to make_ `s` _**good**._\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab \"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n"}
{"question": "You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of **any** color.\n\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls **of that color** you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).\n\nYou are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls **in any order**.\n\nReturn _the **maximum** total value that you can attain after selling_ `orders` _colored balls_. As the answer may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given two nodes of a binary tree `p` and `q`, return _their lowest common ancestor (LCA)_.\n\nEach node will have a reference to its parent node. The definition for `Node` is below:\n\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node parent;\n}\n\nAccording to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow **a node to be a descendant of itself**). \"\n\n"}
{"question": "You are given a string `s` consisting only of characters `'a'` and `'b'`​​​​.\n\nYou can delete any number of characters in `s` to make `s` **balanced**. `s` is **balanced** if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.\n\nReturn _the **minimum** number of deletions needed to make_ `s` _**balanced**_.\n\n"}
{"question": "A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.\n\nThe bug jumps according to the following rules:\n\n*   It can jump exactly `a` positions **forward** (to the right).\n*   It can jump exactly `b` positions **backward** (to the left).\n*   It cannot jump backward twice in a row.\n*   It cannot jump to any `forbidden` positions.\n\nThe bug may jump forward **beyond** its home, but it **cannot jump** to positions numbered with **negative** integers.\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return _the minimum number of jumps needed for the bug to reach its home_. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`\n\n"}
{"question": "Two strings are considered **close** if you can attain one from the other using the following operations:\n\n*   Operation 1: Swap any two **existing** characters.\n    *   For example, `abcde -> aecdb`\n*   Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character.\n    *   For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\n\nYou can use the operations on either string as many times as necessary.\n\nGiven two strings, `word1` and `word2`, return `true` _if_ `word1` _and_ `word2` _are **close**, and_ `false` _otherwise._\n\n"}
{"question": "You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this **modifies** the array for future operations.\n\nReturn _the **minimum number** of operations to reduce_ `x` _to **exactly**_ `0` _if it is possible__, otherwise, return_ `-1`.\n\n"}
{"question": "You have a binary tree with a small defect. There is **exactly one** invalid node where its right child incorrectly points to another node at the **same depth** but to the **invalid node's right**.\n\nGiven the root of the binary tree with this defect, `root`, return _the root of the binary tree after **removing** this invalid node **and every node underneath it** (minus the node it incorrectly points to)._\n\n**Custom testing:**\n\nThe test input is read as 3 lines:\n\n*   `TreeNode root`\n*   `int fromNode` (**not available to** `correctBinaryTree`)\n*   `int toNode` (**not available to** `correctBinaryTree`)\n\nAfter the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.\n\n"}
{"question": "The **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\nThe **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe \"` is equal to `1 + 2 + 5 = 8`.\n\nYou are given two integers `n` and `k`. Return _the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`._\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n"}
{"question": "You are given an integer array `nums`. You can choose **exactly one** index (**0-indexed**) and remove the element. Notice that the index of the elements may change after the removal.\n\nFor example, if `nums = [6,1,7,4,1]`:\n\n*   Choosing to remove index `1` results in `nums = [6,7,4,1]`.\n*   Choosing to remove index `2` results in `nums = [6,1,4,1]`.\n*   Choosing to remove index `4` results in `nums = [6,1,7,4]`.\n\nAn array is **fair** if the sum of the odd-indexed values equals the sum of the even-indexed values.\n\nReturn the _**number** of indices that you could choose such that after the removal,_ `nums` _is **fair**._\n\n"}
{"question": "Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.\n\nYou can reroot the tree with the following steps for each node `cur` on the path **starting from the** `leaf` up to the `root`​​​ **excluding the root**:\n\n1.  If `cur` has a left child, then that child becomes `cur`'s right child.\n2.  `cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.\n\nReturn _the new root_ _of the rerooted tree._\n\n**Note:** Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive \"Wrong Answer \".\n\n"}
{"question": "You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.\n\nRemove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.\n\nThe blue edges and nodes in the following figure indicate the result:\n\n_Build the result list and return its head._\n\n"}
{"question": "Design a queue that supports `push` and `pop` operations in the front, middle, and back.\n\nImplement the `FrontMiddleBack` class:\n\n*   `FrontMiddleBack()` Initializes the queue.\n*   `void pushFront(int val)` Adds `val` to the **front** of the queue.\n*   `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.\n*   `void pushBack(int val)` Adds `val` to the **back** of the queue.\n*   `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`.\n*   `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`.\n*   `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`.\n\n**Notice** that when there are **two** middle position choices, the operation is performed on the **frontmost** middle position choice. For example:\n\n*   Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.\n*   Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.\n\n"}
{"question": "Given an integer array `nums` and a positive integer `k`, return _the most **competitive** subsequence of_ `nums` _of size_ `k`.\n\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\n\nWe define that a subsequence `a` is more **competitive** than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number **less** than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.\n\n"}
{"question": "You are given an integer array `nums` of **even** length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.\n\nThe array `nums` is **complementary** if for all indices `i` (**0-indexed**), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.\n\nReturn the _**minimum** number of moves required to make_ `nums` _**complementary**_.\n\n"}
{"question": "Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return _the lowest common ancestor (LCA) of **all the nodes** in_ `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are **unique**.\n\nExtending the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a **descendant** (where we allow **a node to be a descendant of itself**) for every valid `i` \". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\nReturn _the maximum number of operations you can perform on the array_.\n\n"}
{"question": "Given an integer `n`, return _the **decimal value** of the binary string formed by concatenating the binary representations of_ `1` _to_ `n` _in order, **modulo**_ `109 + 7`.\n\n"}
{"question": "A subsequence of a string `s` is considered a **good palindromic subsequence** if:\n\n*   It is a subsequence of `s`.\n*   It is a palindrome (has the same value if reversed).\n*   It has an **even** length.\n*   No two consecutive characters are equal, except the two middle ones.\n\nFor example, if `s = \"abcabcabb \"`, then `\"abba \"` is considered a **good palindromic subsequence**, while `\"bcb \"` (not even length) and `\"bbbb \"` (has equal consecutive characters) are not.\n\nGiven a string `s`, return _the **length** of the **longest good palindromic subsequence** in_ `s`.\n\n"}
{"question": "You are given an integer array `nums` sorted in **non-decreasing** order.\n\nBuild and return _an integer array_ `result` _with the same length as_ `nums` _such that_ `result[i]` _is equal to the **summation of absolute differences** between_ `nums[i]` _and all the other elements in the array._\n\nIn other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (**0-indexed**).\n\n"}
{"question": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are `n` stones in a pile. On each player's turn, they can **remove** a stone from the pile and receive points based on the stone's value. Alice and Bob may **value the stones differently**.\n\nYou are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.\n\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play **optimally**. Both players know the other's values.\n\nDetermine the result of the game, and:\n\n*   If Alice wins, return `1`.\n*   If Bob wins, return `-1`.\n*   If the game results in a draw, return `0`.\n\n"}
{"question": "A decimal number is called **deci-binary** if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are **deci-binary**, while `112` and `3001` are not.\n\nGiven a string `n` that represents a positive decimal integer, return _the **minimum** number of positive **deci-binary** numbers needed so that they sum up to_ `n`_._\n\n"}
{"question": "Alice and Bob take turns playing a game, with **Alice starting first**.\n\nThere are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score.\n\nGiven an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return _the **difference** in Alice and Bob's score if they both play **optimally**._\n\n"}
{"question": "You are given an array of positive integers `nums` and want to erase a subarray containing **unique elements**. The **score** you get by erasing the subarray is equal to the **sum** of its elements.\n\nReturn _the **maximum score** you can get by erasing **exactly one** subarray._\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\nYou are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` **inclusive**.\n\nYou want to reach the last index of the array (index `n - 1`). Your **score** is the **sum** of all `nums[j]` for each index `j` you visited in the array.\n\nReturn _the **maximum score** you can get_.\n\n"}
{"question": "Given a string `s`, return _the number of **distinct** substrings of_ `s`.\n\nA **substring** of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.\n\n"}
{"question": "There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`\n\n*   `arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in **non-decreasing** order.\n*   `timei` is the time needed to prepare the order of the `ith` customer.\n\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers **in the order they were given in the input**.\n\nReturn _the **average** waiting time of all customers_. Solutions within `10-5` from the actual answer are considered accepted.\n\n"}
{"question": "You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:\n\n*   Operation 1: If the number contains the substring `\"00 \"`, you can replace it with `\"10 \"`.\n    *   For example, `\"00010 \" -> \"10010` \"\n*   Operation 2: If the number contains the substring `\"10 \"`, you can replace it with `\"01 \"`.\n    *   For example, `\"00010 \" -> \"00001 \"`\n\n_Return the **maximum binary string** you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation._\n\n"}
{"question": "There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.\n\nYou decided to eat **at most** one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.\n\nGiven two integer arrays `days` and `apples` of length `n`, return _the maximum number of apples you can eat._\n\n"}
{"question": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.\n\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\n*   A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n*   A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V \" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\n\nReturn _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the column that the ball falls out of at the bottom after dropping the ball from the_ `ith` _column at the top, or `-1` _if the ball gets stuck in the box_._\n\n"}
{"question": "A **good meal** is a meal that contains **exactly two different food items** with a sum of deliciousness equal to a power of two.\n\nYou can pick **any** two different foods to make a good meal.\n\nGiven an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i​​​​​​th​​​​`​​​​ item of food, return _the number of different **good meals** you can make from this list modulo_ `109 + 7`.\n\nNote that items with different indices are considered different even if they have the same deliciousness value.\n\n"}
{"question": "A split of an integer array is **good** if:\n\n*   The array is split into three **non-empty** contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.\n*   The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.\n\nGiven `nums`, an array of **non-negative** integers, return _the number of **good** ways to split_ `nums`. As the number may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.\n\n*   Remove substring `\"ab \"` and gain `x` points.\n    *   For example, when removing `\"ab \"` from `\"cabxbae \"` it becomes `\"cxbae \"`.\n*   Remove substring `\"ba \"` and gain `y` points.\n    *   For example, when removing `\"ba \"` from `\"cabxbae \"` it becomes `\"cabxe \"`.\n\nReturn _the maximum points you can gain after applying the above operations on_ `s`.\n\n"}
{"question": "Given an integer `n`, find a sequence that satisfies all of the following:\n\n*   The integer `1` occurs once in the sequence.\n*   Each integer between `2` and `n` occurs twice in the sequence.\n*   For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n\nThe **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n\nReturn _the **lexicographically largest** sequence__. It is guaranteed that under the given constraints, there is always a solution._\n\nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.\n\n"}
{"question": "You are given the `head` of a linked list, and an integer `k`.\n\nReturn _the head of the linked list after **swapping** the values of the_ `kth` _node from the beginning and the_ `kth` _node from the end (the list is **1-indexed**)._\n\n"}
{"question": "You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` **(0-indexed)** of array `source`. Note that you can swap elements at a specific pair of indices **multiple** times and in **any** order.\n\nThe **Hamming distance** of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` **(0-indexed)**.\n\nReturn _the **minimum Hamming distance** of_ `source` _and_ `target` _after performing **any** amount of swap operations on array_ `source`_._\n\n"}
{"question": "Given an array `nums` of **distinct** positive integers, return _the number of tuples_ `(a, b, c, d)` _such that_ `a * b = c * d` _where_ `a`_,_ `b`_,_ `c`_, and_ `d` _are elements of_ `nums`_, and_ `a != b != c != d`_._\n\n"}
{"question": "You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the **columns** of the `matrix` in any order.\n\nReturn _the area of the largest submatrix within_ `matrix` _where **every** element of the submatrix is_ `1` _after reordering the columns optimally._\n\n"}
{"question": "You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.\n\nYou are given an `m x n` character matrix, `grid`, of these different types of cells:\n\n*   `'*'` is your location. There is **exactly one** `'*'` cell.\n*   `'#'` is a food cell. There may be **multiple** food cells.\n*   `'O'` is free space, and you can travel through these cells.\n*   `'X'` is an obstacle, and you cannot travel through these cells.\n\nYou can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.\n\nReturn _the **length** of the shortest path for you to reach **any** food cell_. If there is no path for you to reach food, return `-1`.\n\n"}
{"question": "On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.\n\nYou are given an integer `n`, an array `languages`, and an array `friendships` where:\n\n*   There are `n` languages numbered `1` through `n`,\n*   `languages[i]` is the set of languages the `i​​​​​​th`​​​​ user knows, and\n*   `friendships[i] = [u​​​​​​i​​​, v​​​​​​i]` denotes a friendship between the users `u​​​​​​​​​​​i`​​​​​ and `vi`.\n\nYou can choose **one** language and teach it to some users so that all friends can communicate with each other. Return _the_ _**minimum**_ _number of users you need to teach._\n\nNote that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.\n\n"}
{"question": "There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always **odd**.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.\n\nGiven the `encoded` array, return _the original array_ `perm`. It is guaranteed that the answer exists and is unique.\n\n"}
{"question": "You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to **any lowercase letter**.\n\nYour goal is to satisfy **one** of the following three conditions:\n\n*   **Every** letter in `a` is **strictly less** than **every** letter in `b` in the alphabet.\n*   **Every** letter in `b` is **strictly less** than **every** letter in `a` in the alphabet.\n*   **Both** `a` and `b` consist of **only one** distinct letter.\n\nReturn _the **minimum** number of operations needed to achieve your goal._\n\n"}
{"question": "You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.\n\nThe **value** of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` **(0-indexed)**.\n\nFind the `kth` largest value **(1-indexed)** of all the coordinates of `matrix`.\n\n"}
{"question": "Given the root of a binary tree and two integers `p` and `q`, return _the **distance** between the nodes of value_ `p` _and value_ `q` _in the tree_.\n\nThe **distance** between two nodes is the number of edges on the path from one to the other.\n\n"}
{"question": "There is an integer array `nums` that consists of `n` **unique** elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.\n\nYou are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.\n\nIt is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear **in any order**.\n\nReturn _the original array_ `nums`_. If there are multiple solutions, return **any of them**_.\n\n"}
{"question": "You are given a **(0-indexed)** array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.\n\nYou play a game with the following rules:\n\n*   You start eating candies on day `**0**`.\n*   You **cannot** eat **any** candy of type `i` unless you have eaten **all** candies of type `i - 1`.\n*   You must eat **at least** **one** candy per day until you have eaten all the candies.\n\nConstruct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating **more than** `dailyCapi` candies on **any** day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\n\nReturn _the constructed array_ `answer`.\n\n"}
{"question": "You are given an integer array `nums`. You must perform **exactly one** operation where you can **replace** one element `nums[i]` with `nums[i] * nums[i]`.\n\nReturn _the **maximum** possible subarray sum after **exactly one** operation_. The subarray must be non-empty.\n\n"}
{"question": "You are given an integer array `nums`. The **absolute sum** of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.\n\nReturn _the **maximum** absolute sum of any **(possibly empty)** subarray of_ `nums`.\n\nNote that `abs(x)` is defined as follows:\n\n*   If `x` is a negative integer, then `abs(x) = -x`.\n*   If `x` is a non-negative integer, then `abs(x) = x`.\n\n"}
{"question": "Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\n\n1.  Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal.\n2.  Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal.\n3.  The prefix and the suffix should not intersect at any index.\n4.  The characters from the prefix and suffix must be the same.\n5.  Delete both the prefix and the suffix.\n\nReturn _the **minimum length** of_ `s` _after performing the above operation any number of times (possibly zero times)_.\n\n"}
{"question": "You are playing a solitaire game with **three piles** of stones of sizes `a`​​​​​​, `b`,​​​​​​ and `c`​​​​​​ respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves).\n\nGiven three integers `a`​​​​​, `b`,​​​​​ and `c`​​​​​, return _the_ **_maximum_** _**score** you can get._\n\n"}
{"question": "You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose **one** of the following options:\n\n*   If `word1` is non-empty, append the **first** character in `word1` to `merge` and delete it from `word1`.\n    *   For example, if `word1 = \"abc \"` and `merge = \"dv \"`, then after choosing this operation, `word1 = \"bc \"` and `merge = \"dva \"`.\n*   If `word2` is non-empty, append the **first** character in `word2` to `merge` and delete it from `word2`.\n    *   For example, if `word2 = \"abc \"` and `merge = \" \"`, then after choosing this operation, `word2 = \"bc \"` and `merge = \"a \"`.\n\nReturn _the lexicographically **largest**_ `merge` _you can construct_.\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `\"abcd \"` is lexicographically larger than `\"abcc \"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n"}
{"question": "Design a queue-like data structure that moves the most recently used element to the end of the queue.\n\nImplement the `MRUQueue` class:\n\n*   `MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.\n*   `int fetch(int k)` moves the `kth` element **(1-indexed)** to the end of the queue and returns it.\n\n"}
{"question": "Given a string `s`, return _the number of **homogenous** substrings of_ `s`_._ Since the answer may be too large, return it **modulo** `109 + 7`.\n\nA string is **homogenous** if all the characters of the string are the same.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.\n\nYou can perform the following operation at most `maxOperations` times:\n\n*   Take any bag of balls and divide it into two new bags with a **positive** number of balls.\n    *   For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.\n\nYour penalty is the **maximum** number of balls in a bag. You want to **minimize** your penalty after the operations.\n\nReturn _the minimum possible penalty after performing the operations_.\n\n"}
{"question": "There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.\n\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a **smaller** height.\n\nReturn a list of indices **(0-indexed)** of buildings that have an ocean view, sorted in increasing order.\n\n"}
{"question": "You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.\n\nYou are asked if you can choose `n` **disjoint** subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (**0-indexed**), and if `i > 0`, the `(i-1)th` subarray appears **before** the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).\n\nReturn `true` _if you can do this task, and_ `false` _otherwise_.\n\nNote that the subarrays are **disjoint** if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.\n\n"}
{"question": "You are given an integer matrix `isWater` of size `m x n` that represents a map of **land** and **water** cells.\n\n*   If `isWater[i][j] == 0`, cell `(i, j)` is a **land** cell.\n*   If `isWater[i][j] == 1`, cell `(i, j)` is a **water** cell.\n\nYou must assign each cell a height in a way that follows these rules:\n\n*   The height of each cell must be non-negative.\n*   If the cell is a **water** cell, its height must be `0`.\n*   Any two adjacent cells must have an absolute height difference of **at most** `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is **maximized**.\n\nReturn _an integer matrix_ `height` _of size_ `m x n` _where_ `height[i][j]` _is cell_ `(i, j)`_'s height. If there are multiple solutions, return **any** of them_.\n\n"}
{"question": "You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is **empty**, and `'1'` if it contains **one** ball.\n\nIn one operation, you can move **one** ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.\n\nReturn an array `answer` of size `n`, where `answer[i]` is the **minimum** number of operations needed to move all the balls to the `ith` box.\n\nEach `answer[i]` is calculated considering the **initial** state of the boxes.\n\n"}
{"question": "You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.\n\nThe **popularity** of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.\n\nReturn _the features in sorted order._\n\n"}
{"question": "You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:\n\n*   There must be **exactly one** ice cream base.\n*   You can add **one or more** types of topping or have no toppings at all.\n*   There are **at most two** of **each type** of topping.\n\nYou are given three inputs:\n\n*   `baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.\n*   `toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of **one** of the `ith` topping.\n*   `target`, an integer representing your target price for dessert.\n\nYou want to make a dessert with a total cost as close to `target` as possible.\n\nReturn _the closest possible cost of the dessert to_ `target`. If there are multiple, return _the **lower** one._\n\n"}
{"question": "You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.\n\nIn one operation, you can change any integer's value in **any** of the arrays to **any** value between `1` and `6`, inclusive.\n\nReturn _the minimum number of operations required to make the sum of values in_ `nums1` _equal to the sum of values in_ `nums2`_._ Return `-1`​​​​​ if it is not possible to make the sum of the two arrays equal.\n\n"}
{"question": "This is an **interactive problem**.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked.\n\nYou want to find the minimum distance to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThr `GridMaster` class has the following functions:\n\n*   `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n*   `void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, and the robot will remain in the same position.\n*   `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn _the **minimum distance** between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return_ `-1`.\n\n**Custom testing:**\n\nThe test input is read as a 2D matrix `grid` of size `m x n` where:\n\n*   `grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).\n*   `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n*   `grid[i][j] == 1` indicates that the cell `(i, j)` is empty.\n*   `grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.\n\nThere is exactly one `-1` and `2` in `grid`. Remember that you will **not** have this information in your code.\n\n"}
{"question": "Given an integer `n`, return `true` _if it is possible to represent_ `n` _as the sum of distinct powers of three._ Otherwise, return `false`.\n\nAn integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.\n\n"}
{"question": "The **beauty** of a string is the difference in frequencies between the most frequent and least frequent characters.\n\n*   For example, the beauty of `\"abaacc \"` is `3 - 1 = 2`.\n\nGiven a string `s`, return _the sum of **beauty** of all of its substrings._\n\n"}
{"question": "You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.\n\nReturn _the minimum number of elements you need to add to make the sum of the array equal to_ `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n"}
{"question": "There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.\n\nThe distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A **restricted path** is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\nReturn _the number of restricted paths from node_ `1` _to node_ `n`. Since that number may be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.\n\nYou are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes.\n\nThe **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes.\n\nReturn _the **maximum** possible average pass ratio after assigning the_ `extraStudents` _students._ Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "You are given two strings `firstString` and `secondString` that are **0-indexed** and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:\n\n*   `0 <= i <= j < firstString.length`\n*   `0 <= a <= b < secondString.length`\n*   The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is **equal** to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).\n*   `j - a` is the **minimum** possible value among all quadruples that satisfy the previous conditions.\n\nReturn _the **number** of such quadruples_.\n\n"}
{"question": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be **extended** to expire `timeToLive` seconds after the (potentially different) `currentTime`.\n\nImplement the `AuthenticationManager` class:\n\n*   `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.\n*   `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.\n*   `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.\n*   `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime.\n\nNote that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before** the other actions.\n\n"}
{"question": "You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can **make** some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.\n\nReturn the _maximum number of consecutive integer values that you **can** **make** with your coins **starting** from and **including**_ `0`.\n\nNote that you may have multiple coins of the same value.\n\n"}
{"question": "You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:\n\n*   `0` if it is a batch of `buy` orders, or\n*   `1` if it is a batch of `sell` orders.\n\nNote that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.\n\nThere is a **backlog** that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\n\n*   If the order is a `buy` order, you look at the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.\n*   Vice versa, if the order is a `sell` order, you look at the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.\n\nReturn _the total **amount** of orders in the backlog after placing all the orders from the input_. Since this number can be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**) that satisfies the following conditions:\n\n*   `nums.length == n`\n*   `nums[i]` is a **positive** integer where `0 <= i < n`.\n*   `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n*   The sum of all the elements of `nums` does not exceed `maxSum`.\n*   `nums[index]` is **maximized**.\n\nReturn `nums[index]` _of the constructed array_.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n"}
{"question": "You are given an **even** integer `n`​​​​​​. You initially have a permutation `perm` of size `n`​​ where `perm[i] == i`​ **(0-indexed)**​​​​.\n\nIn one operation, you will create a new array `arr`, and for each `i`:\n\n*   If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.\n*   If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.\n\nYou will then assign `arr`​​​​ to `perm`.\n\nReturn _the minimum **non-zero** number of operations you need to perform on_ `perm` _to return the permutation to its initial value._\n\n"}
{"question": "You are given a string `s` that contains some bracket pairs, with each pair containing a **non-empty** key.\n\n*   For example, in the string `\"(name)is(age)yearsold \"`, there are **two** bracket pairs that contain the keys `\"name \"` and `\"age \"`.\n\nYou know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.\n\nYou are tasked to evaluate **all** of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:\n\n*   Replace `keyi` and the bracket pair with the key's corresponding `valuei`.\n*   If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"? \"` (without the quotation marks).\n\nEach key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.\n\nReturn _the resulting string after evaluating **all** of the bracket pairs._\n\n"}
{"question": "This is an **interactive problem**.\n\nThere is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is **guaranteed** that the starting cell and the target cell are different, and neither of them is blocked.\n\nEach cell has a **cost** that you need to pay each time you **move** to the cell. The starting cell's cost is **not** applied before the robot moves.\n\nYou want to find the minimum total cost to move the robot to the target cell. However, you **do not know** the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.\n\nThe `GridMaster` class has the following functions:\n\n*   `boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.\n*   `int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be **ignored**, the robot will remain in the same position, and the function will return `-1`.\n*   `boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.\n\nNote that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.\n\nReturn _the **minimum total cost** to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return_ `-1`.\n\n**Custom testing:**\n\nThe test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:\n\n*   `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.\n*   `grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the **cost** to move to that cell.\n*   `(r1, c1)` is the starting cell of the robot.\n*   `(r2, c2)` is the target cell of the robot.\n\nRemember that you will **not** have this information in your code.\n\n"}
{"question": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World \"`, `\"HELLO \"`, `\"hello world hello world \"` are all sentences. Words consist of **only** uppercase and lowercase English letters.\n\nTwo sentences `sentence1` and `sentence2` are **similar** if it is possible to insert an arbitrary sentence **(possibly empty)** inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane \"` and `sentence2 = \"Hello Jane \"` can be made equal by inserting `\"my name is \"` between `\"Hello \"` and `\"Jane \"` in `sentence2`.\n\nGiven two sentences `sentence1` and `sentence2`, return `true` _if_ `sentence1` _and_ `sentence2` _are similar._ Otherwise, return `false`.\n\n"}
{"question": "You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice** if it satisfies all of the following conditions:\n\n*   `0 <= i < j < nums.length`\n*   `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\n\nReturn _the number of nice pairs of indices_. Since that number can be too large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.\n\n**Multiple users** can perform actions simultaneously, and a single user can perform **multiple actions** in the same minute.\n\nThe **user active minutes (UAM)** for a given user is defined as the **number of unique minutes** in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\n\nYou are to calculate a **1-indexed** array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the **number of users** whose **UAM** equals `j`.\n\nReturn _the array_ `answer` _as described above_.\n\n"}
{"question": "You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.\n\nThe **absolute sum difference** of arrays `nums1` and `nums2` is defined as the **sum** of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (**0-indexed**).\n\nYou can replace **at most one** element of `nums1` with **any** other element in `nums1` to **minimize** the absolute sum difference.\n\nReturn the _minimum absolute sum difference **after** replacing at most one element in the array `nums1`._ Since the answer may be large, return it **modulo** `109 + 7`.\n\n`|x|` is defined as:\n\n*   `x` if `x >= 0`, or\n*   `-x` if `x < 0`.\n\n"}
{"question": "There are `m` boys and `n` girls in a class attending an upcoming party.\n\nYou are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most **one girl**, and a girl can accept at most **one invitation** from a boy.\n\nReturn _the **maximum** possible number of accepted invitations._\n\n"}
{"question": "There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in **clockwise order**. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.\n\nThe rules of the game are as follows:\n\n1.  **Start** at the `1st` friend.\n2.  Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once.\n3.  The last friend you counted leaves the circle and loses the game.\n4.  If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat.\n5.  Else, the last friend in the circle wins the game.\n\nGiven the number of friends, `n`, and an integer `k`, return _the winner of the game_.\n\n"}
{"question": "There is a **3 lane road** of length `n` that consists of `n + 1` **points** labeled from `0` to `n`. A frog **starts** at point `0` in the **second** lane and wants to jump to point `n`. However, there could be obstacles along the way.\n\nYou are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (**ranging from 0 to 3**) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be **at most one** obstacle in the 3 lanes at each point.\n\n*   For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.\n\nThe frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a **side jump** to jump to **another** lane (even if they are not adjacent) at the **same** point if there is no obstacle on the new lane.\n\n*   For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\nReturn _the **minimum number of side jumps** the frog needs to reach **any lane** at point n starting from lane `2` at point 0._\n\n**Note:** There will be no obstacles on points `0` and `n`.\n\n"}
{"question": "You are given an array `points` where `points[i] = [xi, yi]` is the coordinates of the `ith` point on a 2D plane. Multiple points can have the **same** coordinates.\n\nYou are also given an array `queries` where `queries[j] = [xj, yj, rj]` describes a circle centered at `(xj, yj)` with a radius of `rj`.\n\nFor each query `queries[j]`, compute the number of points **inside** the `jth` circle. Points **on the border** of the circle are considered **inside**.\n\nReturn _an array_ `answer`_, where_ `answer[j]` _is the answer to the_ `jth` _query_.\n\n"}
{"question": "You are given a **sorted** array `nums` of `n` non-negative integers and an integer `maximumBit`. You want to perform the following query `n` **times**:\n\n1.  Find a non-negative integer `k < 2maximumBit` such that `nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k` is **maximized**. `k` is the answer to the `ith` query.\n2.  Remove the **last** element from the current array `nums`.\n\nReturn _an array_ `answer`_, where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\n\nAt the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible.\n\n**Note:** The boy can buy the ice cream bars in any order.\n\nReturn _the **maximum** number of ice cream bars the boy can buy with_ `coins` _coins._\n\nYou must solve the problem by counting sort.\n\n"}
{"question": "You are given `n`​​​​​​ tasks labeled from `0` to `n - 1` represented by a 2D integer array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]` means that the `i​​​​​​th`​​​​ task will be available to process at `enqueueTimei` and will take `processingTimei` to finish processing.\n\nYou have a single-threaded CPU that can process **at most one** task at a time and will act in the following way:\n\n*   If the CPU is idle and there are no available tasks to process, the CPU remains idle.\n*   If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\n*   Once a task is started, the CPU will **process the entire task** without stopping.\n*   The CPU can finish a task then start a new one instantly.\n\nReturn _the order in which the CPU will process the tasks._\n\n"}
{"question": "Given the `head` of a linked list, find all the values that appear **more than once** in the list and delete the nodes that have any of those values.\n\nReturn _the linked list after the deletions._\n\n"}
{"question": "The **frequency** of an element is the number of times it occurs in an array.\n\nYou are given an integer array `nums` and an integer `k`. In one operation, you can choose an index of `nums` and increment the element at that index by `1`.\n\nReturn _the **maximum possible frequency** of an element after performing **at most**_ `k` _operations_.\n\n"}
{"question": "A string is considered **beautiful** if it satisfies the following conditions:\n\n*   Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it.\n*   The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.).\n\nFor example, strings `\"aeiou \"` and `\"aaaaaaeiiiioou \"` are considered **beautiful**, but `\"uaeio \"`, `\"aeoiu \"`, and `\"aaaeeeooo \"` are **not beautiful**.\n\nGiven a string `word` consisting of English vowels, return _the **length of the longest beautiful substring** of_ `word`_. If no such substring exists, return_ `0`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "Design a system that manages the reservation state of `n` seats that are numbered from `1` to `n`.\n\nImplement the `SeatManager` class:\n\n*   `SeatManager(int n)` Initializes a `SeatManager` object that will manage `n` seats numbered from `1` to `n`. All seats are initially available.\n*   `int reserve()` Fetches the **smallest-numbered** unreserved seat, reserves it, and returns its number.\n*   `void unreserve(int seatNumber)` Unreserves the seat with the given `seatNumber`.\n\n"}
{"question": "You are given an array of positive integers `arr`. Perform some operations (possibly none) on `arr` so that it satisfies these conditions:\n\n*   The value of the **first** element in `arr` must be `1`.\n*   The absolute difference between any 2 adjacent elements must be **less than or equal to** `1`. In other words, `abs(arr[i] - arr[i - 1]) <= 1` for each `i` where `1 <= i < arr.length` (**0-indexed**). `abs(x)` is the absolute value of `x`.\n\nThere are 2 types of operations that you can perform any number of times:\n\n*   **Decrease** the value of any element of `arr` to a **smaller positive integer**.\n*   **Rearrange** the elements of `arr` to be in any order.\n\nReturn _the **maximum** possible value of an element in_ `arr` _after performing the operations to satisfy the conditions_.\n\n"}
{"question": "You are given a string `s` that consists of only digits.\n\nCheck if we can split `s` into **two or more non-empty substrings** such that the **numerical values** of the substrings are in **descending order** and the **difference** between numerical values of every two **adjacent** **substrings** is equal to `1`.\n\n*   For example, the string `s = \"0090089 \"` can be split into `[ \"0090 \", \"089 \"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid.\n*   Another example, the string `s = \"001 \"` can be split into `[ \"0 \", \"01 \"]`, `[ \"00 \", \"1 \"]`, or `[ \"0 \", \"0 \", \"1 \"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order.\n\nReturn `true` _if it is possible to split_ `s`​​​​​​ _as described above__, or_ `false` _otherwise._\n\nA **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "You are given a string `num`, representing a large integer, and an integer `k`.\n\nWe call some integer **wonderful** if it is a **permutation** of the digits in `num` and is **greater in value** than `num`. There can be many wonderful integers. However, we only care about the **smallest-valued** ones.\n\n*   For example, when `num = \"5489355142 \"`:\n    *   The 1st smallest wonderful integer is `\"5489355214 \"`.\n    *   The 2nd smallest wonderful integer is `\"5489355241 \"`.\n    *   The 3rd smallest wonderful integer is `\"5489355412 \"`.\n    *   The 4th smallest wonderful integer is `\"5489355421 \"`.\n\nReturn _the **minimum number of adjacent digit swaps** that needs to be applied to_ `num` _to reach the_ `kth` _**smallest wonderful** integer_.\n\nThe tests are generated in such a way that `kth` smallest wonderful integer exists.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, you are asked to construct the array `ans` of size `n-k+1` where `ans[i]` is the number of **distinct** numbers in the subarray `nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]]`.\n\nReturn _the array_ `ans`.\n\n"}
{"question": "You are given two **non-increasing 0-indexed** integer arrays `nums1`​​​​​​ and `nums2`​​​​​​.\n\nA pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j < nums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The **distance** of the pair is `j - i`​​​​.\n\nReturn _the **maximum distance** of any **valid** pair_ `(i, j)`_. If there are no valid pairs, return_ `0`.\n\nAn array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i < arr.length`.\n\n"}
{"question": "The **min-product** of an array is equal to the **minimum value** in the array **multiplied by** the array's **sum**.\n\n*   For example, the array `[3,2,5]` (minimum value is `2`) has a min-product of `2 * (3+2+5) = 2 * 10 = 20`.\n\nGiven an array of integers `nums`, return _the **maximum min-product** of any **non-empty subarray** of_ `nums`. Since the answer may be large, return it **modulo** `109 + 7`.\n\nNote that the min-product should be maximized **before** performing the modulo operation. Testcases are generated such that the maximum min-product **without** modulo will fit in a **64-bit signed integer**.\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "Given an array of strings `words`, find the **longest** string in `words` such that **every prefix** of it is also in `words`.\n\n*   For example, let `words = [ \"a \", \"app \", \"ap \"]`. The string `\"app \"` has prefixes `\"ap \"` and `\"a \"`, all of which are in `words`.\n\nReturn _the string described above. If there is more than one string with the same length, return the **lexicographically smallest** one, and if no string exists, return_ `\" \"`.\n\n"}
{"question": "You are given two integers `memory1` and `memory2` representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\n\nAt the `ith` second (starting from 1), `i` bits of memory are allocated to the stick with **more available memory** (or from the first memory stick if both have the same available memory). If neither stick has at least `i` bits of available memory, the program **crashes**.\n\nReturn _an array containing_ `[crashTime, memory1crash, memory2crash]`_, where_ `crashTime` _is the time (in seconds) when the program crashed and_ `memory1crash` _and_ `memory2crash` _are the available bits of memory in the first and second sticks respectively_.\n\n"}
{"question": "You are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n*   A stone `'#'`\n*   A stationary obstacle `'*'`\n*   Empty `'.'`\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\nReturn _an_ `n x m` _matrix representing the box after the rotation described above_.\n\n"}
{"question": "Given a binary string `s`, return _the **minimum** number of character swaps to make it **alternating**, or_ `-1` _if it is impossible._\n\nThe string is called **alternating** if no two adjacent characters are equal. For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not.\n\nAny two characters may be swapped, even if they are **not adjacent**.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2`. You are tasked to implement a data structure that supports queries of two types:\n\n1.  **Add** a positive integer to an element of a given index in the array `nums2`.\n2.  **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`).\n\nImplement the `FindSumPairs` class:\n\n*   `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`.\n*   `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`.\n*   `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.\n\n"}
{"question": "**Run-length encoding** is a compression algorithm that allows for an integer array `nums` with many segments of **consecutive repeated** numbers to be represented by a (generally smaller) 2D array `encoded`. Each `encoded[i] = [vali, freqi]` describes the `ith` segment of repeated numbers in `nums` where `vali` is the value that is repeated `freqi` times.\n\n*   For example, `nums = [1,1,1,2,2,2,2,2]` is represented by the **run-length encoded** array `encoded = [[1,3],[2,5]]`. Another way to read this is \"three `1`'s followed by five `2`'s \".\n\nThe **product** of two run-length encoded arrays `encoded1` and `encoded2` can be calculated using the following steps:\n\n1.  **Expand** both `encoded1` and `encoded2` into the full arrays `nums1` and `nums2` respectively.\n2.  Create a new array `prodNums` of length `nums1.length` and set `prodNums[i] = nums1[i] * nums2[i]`.\n3.  **Compress** `prodNums` into a run-length encoded array and return it.\n\nYou are given two **run-length encoded** arrays `encoded1` and `encoded2` representing full arrays `nums1` and `nums2` respectively. Both `nums1` and `nums2` have the **same length**. Each `encoded1[i] = [vali, freqi]` describes the `ith` segment of `nums1`, and each `encoded2[j] = [valj, freqj]` describes the `jth` segment of `nums2`.\n\nReturn _the **product** of_ `encoded1` _and_ `encoded2`.\n\n**Note:** Compression should be done such that the run-length encoded array has the **minimum** possible length.\n\n"}
{"question": "You are given a floating-point number `hour`, representing the amount of time you have to reach the office. To commute to the office, you must take `n` trains in sequential order. You are also given an integer array `dist` of length `n`, where `dist[i]` describes the distance (in kilometers) of the `ith` train ride.\n\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\n\n*   For example, if the `1st` train ride takes `1.5` hours, you must wait for an additional `0.5` hours before you can depart on the `2nd` train ride at the 2 hour mark.\n\nReturn _the **minimum positive integer** speed **(in kilometers per hour)** that all the trains must travel at for you to reach the office on time, or_ `-1` _if it is impossible to be on time_.\n\nTests are generated such that the answer will not exceed `107` and `hour` will have **at most two digits after the decimal point**.\n\n"}
{"question": "You are given a **0-indexed** binary string `s` and two integers `minJump` and `maxJump`. In the beginning, you are standing at index `0`, which is equal to `'0'`. You can move from index `i` to index `j` if the following conditions are fulfilled:\n\n*   `i + minJump <= j <= min(i + maxJump, s.length - 1)`, and\n*   `s[j] == '0'`.\n\nReturn `true` _if you can reach index_ `s.length - 1` _in_ `s`_, or_ `false` _otherwise._\n\n"}
{"question": "The **product sum** of two equal-length arrays `a` and `b` is equal to the sum of `a[i] * b[i]` for all `0 <= i < a.length` (**0-indexed**).\n\n*   For example, if `a = [1,2,3,4]` and `b = [5,2,3,1]`, the **product sum** would be `1*5 + 2*2 + 3*3 + 4*1 = 22`.\n\nGiven two arrays `nums1` and `nums2` of length `n`, return _the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in_ `nums1`.\n\n"}
{"question": "The **pair sum** of a pair `(a,b)` is equal to `a + b`. The **maximum pair sum** is the largest **pair sum** in a list of pairs.\n\n*   For example, if we have pairs `(1,5)`, `(2,3)`, and `(4,4)`, the **maximum pair sum** would be `max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8`.\n\nGiven an array `nums` of **even** length `n`, pair up the elements of `nums` into `n / 2` pairs such that:\n\n*   Each element of `nums` is in **exactly one** pair, and\n*   The **maximum pair sum** is **minimized**.\n\nReturn _the minimized **maximum pair sum** after optimally pairing up the elements_.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid`​​​.\n\nA **rhombus sum** is the sum of the elements that form **the** **border** of a regular rhombus shape in `grid`​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each **rhombus sum**:\n\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\n\nReturn _the biggest three **distinct rhombus sums** in the_ `grid` _in **descending order**__. If there are less than three distinct values, return all of them_.\n\n"}
{"question": "You are given a very large integer `n`, represented as a string,​​​​​​ and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number.\n\nYou want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`​​​​​​. You **cannot** insert `x` to the left of the negative sign.\n\n*   For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`.\n*   If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`.\n\nReturn _a string representing the **maximum** value of_ `n`_​​​​​​ after the insertion_.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `servers` and `tasks` of lengths `n`​​​​​​ and `m`​​​​​​ respectively. `servers[i]` is the **weight** of the `i​​​​​​th`​​​​ server, and `tasks[j]` is the **time needed** to process the `j​​​​​​th`​​​​ task **in seconds**.\n\nTasks are assigned to the servers using a **task queue**. Initially, all servers are free, and the queue is **empty**.\n\nAt second `j`, the `jth` task is **inserted** into the queue (starting with the `0th` task being inserted at second `0`). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the **smallest weight**, and in case of a tie, it is assigned to a free server with the **smallest index**.\n\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned **in order of insertion** following the weight and index priorities above.\n\nA server that is assigned task `j` at second `t` will be free again at second `t + tasks[j]`.\n\nBuild an array `ans`​​​​ of length `m`, where `ans[j]` is the **index** of the server the `j​​​​​​th` task will be assigned to.\n\nReturn _the array_ `ans`​​​​.\n\n"}
{"question": "You are given **two identical** eggs and you have access to a building with `n` floors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**.\n\nIn each move, you may take an **unbroken** egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves.\n\nReturn _the **minimum number of moves** that you need to determine **with certainty** what the value of_ `f` is.\n\n"}
{"question": "Given two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\nReturn _the **number of pairs** satisfying the condition._\n\n"}
{"question": "Given an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps:\n\n1.  Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`.\n2.  Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`.\n3.  Reduce `nums[i]` to `nextLargest`.\n\nReturn _the number of operations to make all elements in_ `nums` _equal_.\n\n"}
{"question": "You are given a binary string `s`. You are allowed to perform two types of operations on the string in any sequence:\n\n*   **Type-1: Remove** the character at the start of the string `s` and **append** it to the end of the string.\n*   **Type-2: Pick** any character in `s` and **flip** its value, i.e., if its value is `'0'` it becomes `'1'` and vice-versa.\n\nReturn _the **minimum** number of **type-2** operations you need to perform_ _such that_ `s` _becomes **alternating**._\n\nThe string is called **alternating** if no two adjacent characters are equal.\n\n*   For example, the strings `\"010 \"` and `\"1010 \"` are alternating, while the string `\"0100 \"` is not.\n\n"}
{"question": "There are `n` students in a class numbered from `0` to `n - 1`. The teacher will give each student a problem starting with the student number `0`, then the student number `1`, and so on until the teacher reaches the student number `n - 1`. After that, the teacher will restart the process, starting with the student number `0` again.\n\nYou are given a **0-indexed** integer array `chalk` and an integer `k`. There are initially `k` pieces of chalk. When the student number `i` is given a problem to solve, they will use `chalk[i]` pieces of chalk to solve that problem. However, if the current number of chalk pieces is **strictly less** than `chalk[i]`, then the student number `i` will be asked to **replace** the chalk.\n\nReturn _the **index** of the student that will **replace** the chalk pieces_.\n\n"}
{"question": "A `k x k` **magic square** is a `k x k` grid filled with integers such that every row sum, every column sum, and both diagonal sums are **all equal**. The integers in the magic square **do not have to be distinct**. Every `1 x 1` grid is trivially a **magic square**.\n\nGiven an `m x n` integer `grid`, return _the **size** (i.e., the side length_ `k`_) of the **largest magic square** that can be found within this grid_.\n\n"}
{"question": "You are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**).\n\nYou want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence.\n\nReturn _the **maximum**_ `k` _you can choose such that_ `p` _is still a **subsequence** of_ `s` _after the removals_.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n"}
{"question": "A **triplet** is an array of three integers. You are given a 2D integer array `triplets`, where `triplets[i] = [ai, bi, ci]` describes the `ith` **triplet**. You are also given an integer array `target = [x, y, z]` that describes the **triplet** you want to obtain.\n\nTo obtain `target`, you may apply the following operation on `triplets` **any number** of times (possibly **zero**):\n\n*   Choose two indices (**0-indexed**) `i` and `j` (`i != j`) and **update** `triplets[j]` to become `[max(ai, aj), max(bi, bj), max(ci, cj)]`.\n    *   For example, if `triplets[i] = [2, 5, 3]` and `triplets[j] = [1, 7, 5]`, `triplets[j]` will be updated to `[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]`.\n\nReturn `true` _if it is possible to obtain the_ `target` _**triplet**_ `[x, y, z]` _as an **element** of_ `triplets`_, or_ `false` _otherwise_.\n\n"}
{"question": "A **peak** element in a 2D grid is an element that is **strictly greater** than all of its **adjacent** neighbors to the left, right, top, and bottom.\n\nGiven a **0-indexed** `m x n` matrix `mat` where **no two adjacent cells are equal**, find **any** peak element `mat[i][j]` and return _the length 2 array_ `[i,j]`.\n\nYou may assume that the entire matrix is surrounded by an **outer perimeter** with the value `-1` in each cell.\n\nYou must write an algorithm that runs in `O(m log(n))` or `O(n log(m))` time.\n\n"}
{"question": "You are given a **0-indexed** integer array `order` of length `n`, a **permutation** of integers from `1` to `n` representing the **order** of insertion into a **binary search tree**.\n\nA binary search tree is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\nThe binary search tree is constructed as follows:\n\n*   `order[0]` will be the **root** of the binary search tree.\n*   All subsequent elements are inserted as the **child** of **any** existing node such that the binary search tree properties hold.\n\nReturn _the **depth** of the binary search tree_.\n\nA binary tree's **depth** is the number of **nodes** along the **longest path** from the root node down to the farthest leaf node.\n\n"}
{"question": "You are participating in an online chess tournament. There is a chess round that starts every `15` minutes. The first round of the day starts at `00:00`, and after every `15` minutes, a new round starts.\n\n*   For example, the second round starts at `00:15`, the fourth round starts at `00:45`, and the seventh round starts at `01:30`.\n\nYou are given two strings `loginTime` and `logoutTime` where:\n\n*   `loginTime` is the time you will login to the game, and\n*   `logoutTime` is the time you will logout from the game.\n\nIf `logoutTime` is **earlier** than `loginTime`, this means you have played from `loginTime` to midnight and from midnight to `logoutTime`.\n\nReturn _the number of full chess rounds you have played in the tournament_.\n\n**Note:** All the given times follow the 24-hour clock. That means the first round of the day starts at `00:00` and the last round of the day starts at `23:45`.\n\n"}
{"question": "You are given two `m x n` binary matrices `grid1` and `grid2` containing only `0`'s (representing water) and `1`'s (representing land). An **island** is a group of `1`'s connected **4-directionally** (horizontal or vertical). Any cells outside of the grid are considered water cells.\n\nAn island in `grid2` is considered a **sub-island** if there is an island in `grid1` that contains **all** the cells that make up **this** island in `grid2`.\n\nReturn the _**number** of islands in_ `grid2` _that are considered **sub-islands**_.\n\n"}
{"question": "The **minimum absolute difference** of an array `a` is defined as the **minimum value** of `|a[i] - a[j]|`, where `0 <= i < j < a.length` and `a[i] != a[j]`. If all elements of `a` are the **same**, the minimum absolute difference is `-1`.\n\n*   For example, the minimum absolute difference of the array `[5,2,3,7,2]` is `|2 - 3| = 1`. Note that it is not `0` because `a[i]` and `a[j]` must be different.\n\nYou are given an integer array `nums` and the array `queries` where `queries[i] = [li, ri]`. For each query `i`, compute the **minimum absolute difference** of the **subarray** `nums[li...ri]` containing the elements of `nums` between the **0-based** indices `li` and `ri` (**inclusive**).\n\nReturn _an **array**_ `ans` _where_ `ans[i]` _is the answer to the_ `ith` _query_.\n\nA **subarray** is a contiguous sequence of elements in an array.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`.\n*   `-x` if `x < 0`.\n\n"}
{"question": "Alice and Bob take turns playing a game with **Alice starting first**.\n\nIn this game, there are `n` piles of stones. On each player's turn, the player should remove any **positive** number of stones from a non-empty pile **of his or her choice**. The first player who cannot make a move loses, and the other player wins.\n\nGiven an integer array `piles`, where `piles[i]` is the number of stones in the `ith` pile, return `true` _if Alice wins, or_ `false` _if Bob wins_.\n\nBoth Alice and Bob play **optimally**.\n\n"}
{"question": "Given two strings `s` and `part`, perform the following operation on `s` until **all** occurrences of the substring `part` are removed:\n\n*   Find the **leftmost** occurrence of the substring `part` and **remove** it from `s`.\n\nReturn `s` _after removing all occurrences of_ `part`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "The **alternating sum** of a **0-indexed** array is defined as the **sum** of the elements at **even** indices **minus** the **sum** of the elements at **odd** indices.\n\n*   For example, the alternating sum of `[4,2,5,3]` is `(4 + 5) - (2 + 3) = 4`.\n\nGiven an array `nums`, return _the **maximum alternating sum** of any subsequence of_ `nums` _(after **reindexing** the elements of the subsequence)_.\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid`​​​, where `m` and `n` are both **even** integers, and an integer `k`.\n\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\n\nA cyclic rotation of the matrix is done by cyclically rotating **each layer** in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the **counter-clockwise** direction. An example rotation is shown below:\n\nReturn _the matrix after applying_ `k` _cyclic rotations to it_.\n\n"}
{"question": "A **wonderful** string is a string where **at most one** letter appears an **odd** number of times.\n\n*   For example, `\"ccjjc \"` and `\"abab \"` are wonderful, but `\"ab \"` is not.\n\nGiven a string `word` that consists of the first ten lowercase English letters (`'a'` through `'j'`), return _the **number of wonderful non-empty substrings** in_ `word`_. If the same substring appears multiple times in_ `word`_, then count **each occurrence** separately._\n\nA **substring** is a contiguous sequence of characters in a string.\n\n"}
{"question": "Given an integer array `nums` of length `n` and an integer `k`, return _the_ `kth` _**smallest subarray sum**._\n\nA **subarray** is defined as a **non-empty** contiguous sequence of elements in an array. A **subarray sum** is the sum of all elements in the subarray.\n\n"}
{"question": "You are playing a video game where you are defending your city from a group of `n` monsters. You are given a **0-indexed** integer array `dist` of size `n`, where `dist[i]` is the **initial distance** in kilometers of the `ith` monster from the city.\n\nThe monsters walk toward the city at a **constant** speed. The speed of each monster is given to you in an integer array `speed` of size `n`, where `speed[i]` is the speed of the `ith` monster in kilometers per minute.\n\nYou have a weapon that, once fully charged, can eliminate a **single** monster. However, the weapon takes **one minute** to charge.The weapon is fully charged at the very start.\n\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a **loss**, and the game ends before you can use your weapon.\n\nReturn _the **maximum** number of monsters that you can eliminate before you lose, or_ `n` _if you can eliminate all the monsters before they reach the city._\n\n"}
{"question": "A digit string is **good** if the digits **(0-indexed)** at **even** indices are **even** and the digits at **odd** indices are **prime** (`2`, `3`, `5`, or `7`).\n\n*   For example, `\"2582 \"` is good because the digits (`2` and `8`) at even positions are even and the digits (`5` and `2`) at odd positions are prime. However, `\"3245 \"` is **not** good because `3` is at an even index but is not even.\n\nGiven an integer `n`, return _the **total** number of good digit strings of length_ `n`. Since the answer may be large, **return it modulo** `109 + 7`.\n\nA **digit string** is a string consisting of digits `0` through `9` that may contain leading zeros.\n\n"}
{"question": "You are given an `m x n` matrix `maze` (**0-indexed**) with empty cells (represented as `'.'`) and walls (represented as `'+'`). You are also given the `entrance` of the maze, where `entrance = [entrancerow, entrancecol]` denotes the row and column of the cell you are initially standing at.\n\nIn one step, you can move one cell **up**, **down**, **left**, or **right**. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the **nearest exit** from the `entrance`. An **exit** is defined as an **empty cell** that is at the **border** of the `maze`. The `entrance` **does not count** as an exit.\n\nReturn _the **number of steps** in the shortest path from the_ `entrance` _to the nearest exit, or_ `-1` _if no such path exists_.\n\n"}
{"question": "Alice and Bob take turns playing a game, with **Alice** **starting first**.\n\nYou are given a string `num` of **even length** consisting of digits and `'?'` characters. On each turn, a player will do the following if there is still at least one `'?'` in `num`:\n\n1.  Choose an index `i` where `num[i] == '?'`.\n2.  Replace `num[i]` with any digit between `'0'` and `'9'`.\n\nThe game ends when there are no more `'?'` characters in `num`.\n\nFor Bob to win, the sum of the digits in the first half of `num` must be **equal** to the sum of the digits in the second half. For Alice to win, the sums must **not be equal**.\n\n*   For example, if the game ended with `num = \"243801 \"`, then Bob wins because `2+4+3 = 8+0+1`. If the game ended with `num = \"243803 \"`, then Alice wins because `2+4+3 != 8+0+3`.\n\nAssuming Alice and Bob play **optimally**, return `true` _if Alice will win and_ `false` _if Bob will win_.\n\n"}
{"question": "Given a string `s`, return _the number of **unique palindromes of length three** that are a **subsequence** of_ `s`.\n\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted **once**.\n\nA **palindrome** is a string that reads the same forwards and backwards.\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n*   For example, `\"ace \"` is a subsequence of `\"abcde \"`.\n\n"}
{"question": "You are given a **strictly increasing** integer array `rungs` that represents the **height** of rungs on a ladder. You are currently on the **floor** at height `0`, and you want to reach the last rung.\n\nYou are also given an integer `dist`. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is **at most** `dist`. You are able to insert rungs at any positive **integer** height if a rung is not already there.\n\nReturn _the **minimum** number of rungs that must be added to the ladder in order for you to climb to the last rung._\n\n"}
{"question": "You are given an `m x n` integer matrix `points` (**0-indexed**). Starting with `0` points, you want to **maximize** the number of points you can get from the matrix.\n\nTo gain points, you must pick one cell in **each row**. Picking the cell at coordinates `(r, c)` will **add** `points[r][c]` to your score.\n\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows `r` and `r + 1` (where `0 <= r < m - 1`), picking cells at coordinates `(r, c1)` and `(r + 1, c2)` will **subtract** `abs(c1 - c2)` from your score.\n\nReturn _the **maximum** number of points you can achieve_.\n\n`abs(x)` is defined as:\n\n*   `x` for `x >= 0`.\n*   `-x` for `x < 0`.\n\n"}
{"question": "There is a party where `n` friends numbered from `0` to `n - 1` are attending. There is an **infinite** number of chairs in this party that are numbered from `0` to `infinity`. When a friend arrives at the party, they sit on the unoccupied chair with the **smallest number**.\n\n*   For example, if chairs `0`, `1`, and `5` are occupied when a friend comes, they will sit on chair number `2`.\n\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\n\nYou are given a **0-indexed** 2D integer array `times` where `times[i] = [arrivali, leavingi]`, indicating the arrival and leaving times of the `ith` friend respectively, and an integer `targetFriend`. All arrival times are **distinct**.\n\nReturn _the **chair number** that the friend numbered_ `targetFriend` _will sit on_.\n\n"}
{"question": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a **unique** color. You are given a 2D integer array `segments`, where `segments[i] = [starti, endi, colori]` represents the **half-closed segment** `[starti, endi)` with `colori` as the color.\n\nThe colors in the overlapping segments of the painting were **mixed** when it was painted. When two or more colors mix, they form a new color that can be represented as a **set** of mixed colors.\n\n*   For example, if colors `2`, `4`, and `6` are mixed, then the resulting mixed color is `{2,4,6}`.\n\nFor the sake of simplicity, you should only output the **sum** of the elements in the set rather than the full set.\n\nYou want to **describe** the painting with the **minimum** number of non-overlapping **half-closed segments** of these mixed colors. These segments can be represented by the 2D array `painting` where `painting[j] = [leftj, rightj, mixj]` describes a **half-closed segment** `[leftj, rightj)` with the mixed color **sum** of `mixj`.\n\n*   For example, the painting created with `segments = [[1,4,5],[1,7,7]]` can be described by `painting = [[1,4,12],[4,7,7]]` because:\n    *   `[1,4)` is colored `{5,7}` (with a sum of `12`) from both the first and second segments.\n    *   `[4,7)` is colored `{7}` from only the second segment.\n\nReturn _the 2D array_ `painting` _describing the finished painting (excluding any parts that are **not** painted). You may return the segments in **any order**_.\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n"}
{"question": "You are given a string `num`, which represents a large integer. You are also given a **0-indexed** integer array `change` of length `10` that maps each digit `0-9` to another digit. More formally, digit `d` maps to digit `change[d]`.\n\nYou may **choose** to **mutate a single substring** of `num`. To mutate a substring, replace each digit `num[i]` with the digit it maps to in `change` (i.e. replace `num[i]` with `change[num[i]]`).\n\nReturn _a string representing the **largest** possible integer after **mutating** (or choosing not to) a **single substring** of_ `num`.\n\nA **substring** is a contiguous sequence of characters within the string.\n\n"}
{"question": "There is a survey that consists of `n` questions where each question's answer is either `0` (no) or `1` (yes).\n\nThe survey was given to `m` students numbered from `0` to `m - 1` and `m` mentors numbered from `0` to `m - 1`. The answers of the students are represented by a 2D integer array `students` where `students[i]` is an integer array that contains the answers of the `ith` student (**0-indexed**). The answers of the mentors are represented by a 2D integer array `mentors` where `mentors[j]` is an integer array that contains the answers of the `jth` mentor (**0-indexed**).\n\nEach student will be assigned to **one** mentor, and each mentor will have **one** student assigned to them. The **compatibility score** of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\n\n*   For example, if the student's answers were `[1, 0, 1]` and the mentor's answers were `[0, 0, 1]`, then their compatibility score is 2 because only the second and the third answers are the same.\n\nYou are tasked with finding the optimal student-mentor pairings to **maximize** the **sum of the compatibility scores**.\n\nGiven `students` and `mentors`, return _the **maximum compatibility score sum** that can be achieved._\n\n"}
{"question": "You are given an integer array `nums` of size `n`. You are asked to solve `n` queries for each integer `i` in the range `0 <= i < n`.\n\nTo solve the `ith` query:\n\n1.  Find the **minimum value** in each possible subarray of size `i + 1` of the array `nums`.\n2.  Find the **maximum** of those minimum values. This maximum is the **answer** to the query.\n\nReturn _a **0-indexed** integer array_ `ans` _of size_ `n` _such that_ `ans[i]` _is the answer to the_ `ith` _query_.\n\nA **subarray** is a contiguous sequence of elements in an array.\n\n"}
{"question": "There are `n` projects numbered from `0` to `n - 1`. You are given an integer array `milestones` where each `milestones[i]` denotes the number of milestones the `ith` project has.\n\nYou can work on the projects following these two rules:\n\n*   Every week, you will finish **exactly one** milestone of **one** project. You **must** work every week.\n*   You **cannot** work on two milestones from the same project for two **consecutive** weeks.\n\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will **stop working**. Note that you may not be able to finish every project's milestones due to these constraints.\n\nReturn _the **maximum** number of weeks you would be able to work on the projects without violating the rules mentioned above_.\n\n"}
{"question": "In a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\nGiven an integer `neededApples`, return _the **minimum perimeter** of a plot such that **at least**_ `neededApples` _apples are **inside or on** the perimeter of that plot_.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`\n*   `-x` if `x < 0`\n\n"}
{"question": "You are given a **0-indexed** `8 x 8` grid `board`, where `board[r][c]` represents the cell `(r, c)` on a game board. On the board, free cells are represented by `'.'`, white cells are represented by `'W'`, and black cells are represented by `'B'`.\n\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only **legal** if, after changing it, the cell becomes the **endpoint of a good line** (horizontal, vertical, or diagonal).\n\nA **good line** is a line of **three or more cells (including the endpoints)** where the endpoints of the line are **one color**, and the remaining cells in the middle are the **opposite color** (no cells in the line are free). You can find examples for good lines in the figure below:\n\nGiven two integers `rMove` and `cMove` and a character `color` representing the color you are playing as (white or black), return `true` _if changing cell_ `(rMove, cMove)` _to color_ `color` _is a **legal** move, or_ `false` _if it is not legal_.\n\n"}
{"question": "You are currently designing a dynamic array. You are given a **0-indexed** integer array `nums`, where `nums[i]` is the number of elements that will be in the array at time `i`. In addition, you are given an integer `k`, the **maximum** number of times you can **resize** the array (to **any** size).\n\nThe size of the array at time `t`, `sizet`, must be at least `nums[t]` because there needs to be enough space in the array to hold all the elements. The **space wasted** at time `t` is defined as `sizet - nums[t]`, and the **total** space wasted is the **sum** of the space wasted across every time `t` where `0 <= t < nums.length`.\n\nReturn _the **minimum** **total space wasted** if you can resize the array at most_ `k` _times_.\n\n**Note:** The array can have **any size** at the start and does **not** count towards the number of resizing operations.\n\n"}
{"question": "You are given a **0-indexed** integer array `piles`, where `piles[i]` represents the number of stones in the `ith` pile, and an integer `k`. You should apply the following operation **exactly** `k` times:\n\n*   Choose any `piles[i]` and **remove** `floor(piles[i] / 2)` stones from it.\n\n**Notice** that you can apply the operation on the **same** pile more than once.\n\nReturn _the **minimum** possible total number of stones remaining after applying the_ `k` _operations_.\n\n`floor(x)` is the **greatest** integer that is **smaller** than or **equal** to `x` (i.e., rounds `x` down).\n\n"}
{"question": "You are given a **0-indexed** string `s` of **even** length `n`. The string consists of **exactly** `n / 2` opening brackets `'['` and `n / 2` closing brackets `']'`.\n\nA string is called **balanced** if and only if:\n\n*   It is the empty string, or\n*   It can be written as `AB`, where both `A` and `B` are **balanced** strings, or\n*   It can be written as `[C]`, where `C` is a **balanced** string.\n\nYou may swap the brackets at **any** two indices **any** number of times.\n\nReturn _the **minimum** number of swaps to make_ `s` _**balanced**_.\n\n"}
{"question": "Consider a function that implements an algorithm **similar** to [Binary Search](https://leetcode.com/explore/learn/card/binary-search/). The function has two input parameters: `sequence` is a sequence of integers, and `target` is an integer value. The purpose of the function is to find if the `target` exists in the `sequence`.\n\nThe pseudocode of the function is as follows:\n\nfunc(sequence, target)\n  while sequence is not empty\n    **randomly** choose an element from sequence as the pivot\n    if pivot = target, return **true**\n    else if pivot < target, remove pivot and all elements to its left from the sequence\n    else, remove pivot and all elements to its right from the sequence\n  end while\n  return **false**\n\nWhen the `sequence` is sorted, the function works correctly for **all** values. When the `sequence` is not sorted, the function does not work for all values, but may still work for **some** values.\n\nGiven an integer array `nums`, representing the `sequence`, that contains **unique** numbers and **may or may not be sorted**, return _the number of values that are **guaranteed** to be found using the function, for **every possible** pivot selection_.\n\n"}
{"question": "You are given a **0-indexed** array `nums` of **distinct** integers. You want to rearrange the elements in the array such that every element in the rearranged array is **not** equal to the **average** of its neighbors.\n\nMore formally, the rearranged array should have the property such that for every `i` in the range `1 <= i < nums.length - 1`, `(nums[i-1] + nums[i+1]) / 2` is **not** equal to `nums[i]`.\n\nReturn _**any** rearrangement of_ `nums` _that meets the requirements_.\n\n"}
{"question": "You are given a positive integer `p`. Consider an array `nums` (**1-indexed**) that consists of the integers in the **inclusive** range `[1, 2p - 1]` in their binary representations. You are allowed to do the following operation **any** number of times:\n\n*   Choose two elements `x` and `y` from `nums`.\n*   Choose a bit in `x` and swap it with its corresponding bit in `y`. Corresponding bit refers to the bit that is in the **same position** in the other integer.\n\nFor example, if `x = 1101` and `y = 0011`, after swapping the `2nd` bit from the right, we have `x = 1111` and `y = 0001`.\n\nFind the **minimum non-zero** product of `nums` after performing the above operation **any** number of times. Return _this product_ _**modulo**_ `109 + 7`.\n\n**Note:** The answer should be the minimum product **before** the modulo operation is done.\n\n"}
{"question": "Given the `root` of a binary tree, return _the number of nodes where the value of the node is equal to the **sum** of the values of its descendants_.\n\nA **descendant** of a node `x` is any node that is on the path from node `x` to some leaf node. The sum is considered to be `0` if the node has no descendants.\n\n"}
{"question": "You are given an `n x n` integer `matrix`. You can do the following operation **any** number of times:\n\n*   Choose any two **adjacent** elements of `matrix` and **multiply** each of them by `-1`.\n\nTwo elements are considered **adjacent** if and only if they share a **border**.\n\nYour goal is to **maximize** the summation of the matrix's elements. Return _the **maximum** sum of the matrix's elements using the operation mentioned above._\n\n"}
{"question": "You are in a city that consists of `n` intersections numbered from `0` to `n - 1` with **bi-directional** roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\n\nYou are given an integer `n` and a 2D integer array `roads` where `roads[i] = [ui, vi, timei]` means that there is a road between intersections `ui` and `vi` that takes `timei` minutes to travel. You want to know in how many ways you can travel from intersection `0` to intersection `n - 1` in the **shortest amount of time**.\n\nReturn _the **number of ways** you can arrive at your destination in the **shortest amount of time**_. Since the answer may be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given an array of strings `nums` containing `n` **unique** binary strings each of length `n`, return _a binary string of length_ `n` _that **does not appear** in_ `nums`_. If there are multiple answers, you may return **any** of them_.\n\n"}
{"question": "You are given an `m x n` integer matrix `mat` and an integer `target`.\n\nChoose one integer from **each row** in the matrix such that the **absolute difference** between `target` and the **sum** of the chosen elements is **minimized**.\n\nReturn _the **minimum absolute difference**_.\n\nThe **absolute difference** between two numbers `a` and `b` is the absolute value of `a - b`.\n\n"}
{"question": "You are given two **0-indexed** binary arrays `nums1` and `nums2`. Find the **widest** pair of indices `(i, j)` such that `i <= j` and `nums1[i] + nums1[i+1] + ... + nums1[j] == nums2[i] + nums2[i+1] + ... + nums2[j]`.\n\nThe **widest** pair of indices is the pair with the **largest** **distance** between `i` and `j`. The **distance** between a pair of indices is defined as `j - i + 1`.\n\nReturn _the **distance** of the **widest** pair of indices. If no pair of indices meets the conditions, return_ `0`.\n\n"}
{"question": "You are given an array of strings `nums` and an integer `k`. Each string in `nums` represents an integer without leading zeros.\n\nReturn _the string that represents the_ `kth` _**largest integer** in_ `nums`.\n\n**Note**: Duplicate numbers should be counted distinctly. For example, if `nums` is `[ \"1 \", \"2 \", \"2 \"]`, `\"2 \"` is the first largest integer, `\"2 \"` is the second-largest integer, and `\"1 \"` is the third-largest integer.\n\n"}
{"question": "There are `n` tasks assigned to you. The task times are represented as an integer array `tasks` of length `n`, where the `ith` task takes `tasks[i]` hours to finish. A **work session** is when you work for **at most** `sessionTime` consecutive hours and then take a break.\n\nYou should finish the given tasks in a way that satisfies the following conditions:\n\n*   If you start a task in a work session, you must complete it in the **same** work session.\n*   You can start a new task **immediately** after finishing the previous one.\n*   You may complete the tasks in **any order**.\n\nGiven `tasks` and `sessionTime`, return _the **minimum** number of **work sessions** needed to finish all the tasks following the conditions above._\n\nThe tests are generated such that `sessionTime` is **greater** than or **equal** to the **maximum** element in `tasks[i]`.\n\n"}
{"question": "You are playing a game of tag with your friends. In tag, people are divided into two teams: people who are \"it \", and people who are not \"it \". The people who are \"it \" want to catch as many people as possible who are not \"it \".\n\nYou are given a **0-indexed** integer array `team` containing only zeros (denoting people who are **not** \"it \") and ones (denoting people who are \"it \"), and an integer `dist`. A person who is \"it \" at index `i` can catch any **one** person whose index is in the range `[i - dist, i + dist]` (**inclusive**) and is **not** \"it \".\n\nReturn _the **maximum** number of people that the people who are \"it \" can catch_.\n\n"}
{"question": "You are given a **0-indexed** `m x n` binary matrix `land` where a `0` represents a hectare of forested land and a `1` represents a hectare of farmland.\n\nTo keep the land organized, there are designated rectangular areas of hectares that consist **entirely** of farmland. These rectangular areas are called **groups**. No two groups are adjacent, meaning farmland in one group is **not** four-directionally adjacent to another farmland in a different group.\n\n`land` can be represented by a coordinate system where the top left corner of `land` is `(0, 0)` and the bottom right corner of `land` is `(m-1, n-1)`. Find the coordinates of the top left and bottom right corner of each **group** of farmland. A **group** of farmland with a top left corner at `(r1, c1)` and a bottom right corner at `(r2, c2)` is represented by the 4-length array `[r1, c1, r2, c2].`\n\nReturn _a 2D array containing the 4-length arrays described above for each **group** of farmland in_ `land`_. If there are no groups of farmland, return an empty array. You may return the answer in **any order**_.\n\n"}
{"question": "You are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of the `ith` node. The root of the tree is node `0`, so `parent[0] = -1` since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\n\nThe data structure should support the following functions:\n\n*   **Lock:** **Locks** the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.\n*   **Unlock: Unlocks** the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.\n*   **Upgrade****: Locks** the given node for the given user and **unlocks** all of its descendants **regardless** of who locked it. You may only upgrade a node if **all** 3 conditions are true:\n    *   The node is unlocked,\n    *   It has at least one locked descendant (by **any** user), and\n    *   It does not have any locked ancestors.\n\nImplement the `LockingTree` class:\n\n*   `LockingTree(int[] parent)` initializes the data structure with the parent array.\n*   `lock(int num, int user)` returns `true` if it is possible for the user with id `user` to lock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **locked** by the user with id `user`.\n*   `unlock(int num, int user)` returns `true` if it is possible for the user with id `user` to unlock the node `num`, or `false` otherwise. If it is possible, the node `num` will become **unlocked**.\n*   `upgrade(int num, int user)` returns `true` if it is possible for the user with id `user` to upgrade the node `num`, or `false` otherwise. If it is possible, the node `num` will be **upgraded**.\n\n"}
{"question": "You are playing a game that contains multiple characters, and each of the characters has **two** main properties: **attack** and **defense**. You are given a 2D integer array `properties` where `properties[i] = [attacki, defensei]` represents the properties of the `ith` character in the game.\n\nA character is said to be **weak** if any other character has **both** attack and defense levels **strictly greater** than this character's attack and defense levels. More formally, a character `i` is said to be **weak** if there exists another character `j` where `attackj > attacki` and `defensej > defensei`.\n\nReturn _the number of **weak** characters_.\n\n"}
{"question": "There are `n` rooms you need to visit, labeled from `0` to `n - 1`. Each day is labeled, starting from `0`. You will go in and visit one room a day.\n\nInitially on day `0`, you visit room `0`. The **order** you visit the rooms for the coming days is determined by the following **rules** and a given **0-indexed** array `nextVisit` of length `n`:\n\n*   Assuming that on a day, you visit room `i`,\n*   if you have been in room `i` an **odd** number of times (**including** the current visit), on the **next** day you will visit a room with a **lower or equal room number** specified by `nextVisit[i]` where `0 <= nextVisit[i] <= i`;\n*   if you have been in room `i` an **even** number of times (**including** the current visit), on the **next** day you will visit room `(i + 1) mod n`.\n\nReturn _the label of the **first** day where you have been in **all** the rooms_. It can be shown that such a day exists. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "Given three integers, `k`, `digit1`, and `digit2`, you want to find the **smallest** integer that is:\n\n*   **Larger** than `k`,\n*   A **multiple** of `k`, and\n*   Comprised of **only** the digits `digit1` and/or `digit2`.\n\nReturn _the **smallest** such integer. If no such integer exists or the integer exceeds the limit of a signed 32-bit integer (_`231 - 1`_), return_ `-1`.\n\n"}
{"question": "You are given `n` rectangles represented by a **0-indexed** 2D integer array `rectangles`, where `rectangles[i] = [widthi, heighti]` denotes the width and height of the `ith` rectangle.\n\nTwo rectangles `i` and `j` (`i < j`) are considered **interchangeable** if they have the **same** width-to-height ratio. More formally, two rectangles are **interchangeable** if `widthi/heighti == widthj/heightj` (using decimal division, not integer division).\n\nReturn _the **number** of pairs of **interchangeable** rectangles in_ `rectangles`.\n\n"}
{"question": "Given a string `s`, find two **disjoint palindromic subsequences** of `s` such that the **product** of their lengths is **maximized**. The two subsequences are **disjoint** if they do not both pick a character at the same index.\n\nReturn _the **maximum** possible **product** of the lengths of the two palindromic subsequences_.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is **palindromic** if it reads the same forward and backward.\n\n"}
{"question": "An integer array `original` is transformed into a **doubled** array `changed` by appending **twice the value** of every element in `original`, and then randomly **shuffling** the resulting array.\n\nGiven an array `changed`, return `original` _if_ `changed` _is a **doubled** array. If_ `changed` _is not a **doubled** array, return an empty array. The elements in_ `original` _may be returned in **any** order_.\n\n"}
{"question": "There are `n` points on a road you are driving your taxi on. The `n` points on the road are labeled from `1` to `n` in the direction you are going, and you want to drive from point `1` to point `n` to make money by picking up passengers. You cannot change the direction of the taxi.\n\nThe passengers are represented by a **0-indexed** 2D integer array `rides`, where `rides[i] = [starti, endi, tipi]` denotes the `ith` passenger requesting a ride from point `starti` to point `endi` who is willing to give a `tipi` dollar tip.\n\nFor **each** passenger `i` you pick up, you **earn** `endi - starti + tipi` dollars. You may only drive **at most one** passenger at a time.\n\nGiven `n` and `rides`, return _the **maximum** number of dollars you can earn by picking up the passengers optimally._\n\n**Note:** You may drop off a passenger and pick up a different passenger at the same point.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. For each index `i` (`1 <= i <= nums.length - 2`) the **beauty** of `nums[i]` equals:\n\n*   `2`, if `nums[j] < nums[i] < nums[k]`, for **all** `0 <= j < i` and for **all** `i < k <= nums.length - 1`.\n*   `1`, if `nums[i - 1] < nums[i] < nums[i + 1]`, and the previous condition is not satisfied.\n*   `0`, if none of the previous conditions holds.\n\nReturn _the **sum of beauty** of all_ `nums[i]` _where_ `1 <= i <= nums.length - 2`.\n\n"}
{"question": "You are given a stream of points on the X-Y plane. Design an algorithm that:\n\n*   **Adds** new points from the stream into a data structure. **Duplicate** points are allowed and should be treated as different points.\n*   Given a query point, **counts** the number of ways to choose three points from the data structure such that the three points and the query point form an **axis-aligned square** with **positive area**.\n\nAn **axis-aligned square** is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\n\nImplement the `DetectSquares` class:\n\n*   `DetectSquares()` Initializes the object with an empty data structure.\n*   `void add(int[] point)` Adds a new point `point = [x, y]` to the data structure.\n*   `int count(int[] point)` Counts the number of ways to form **axis-aligned squares** with point `point = [x, y]` as described above.\n\n"}
{"question": "A perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array `buildings`, where `buildings[i] = [starti, endi, heighti]`. This means that there is a building with `heighti` in the **half-closed segment** `[starti, endi)`.\n\nYou want to **describe** the heights of the buildings on the street with the **minimum** number of non-overlapping **segments**. The street can be represented by the 2D integer array `street` where `street[j] = [leftj, rightj, averagej]` describes a **half-closed segment** `[leftj, rightj)` of the road where the **average** heights of the buildings in the **segment** is `averagej`.\n\n*   For example, if `buildings = [[1,5,2],[3,10,4]],` the street could be represented by `street = [[1,3,2],[3,5,3],[5,10,4]]` because:\n    *   From 1 to 3, there is only the first building with an average height of `2 / 1 = 2`.\n    *   From 3 to 5, both the first and the second building are there with an average height of `(2+4) / 2 = 3`.\n    *   From 5 to 10, there is only the second building with an average height of `4 / 1 = 4`.\n\nGiven `buildings`, return _the 2D integer array_ `street` _as described above (**excluding** any areas of the street where there are no buldings). You may return the array in **any order**_.\n\nThe **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`.\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n"}
{"question": "You are given a **0-indexed** 2D array `grid` of size `2 x n`, where `grid[r][c]` represents the number of points at position `(r, c)` on the matrix. Two robots are playing a game on this matrix.\n\nBoth robots initially start at `(0, 0)` and want to reach `(1, n-1)`. Each robot may only move to the **right** (`(r, c)` to `(r, c + 1)`) or **down** (`(r, c)` to `(r + 1, c)`).\n\nAt the start of the game, the **first** robot moves from `(0, 0)` to `(1, n-1)`, collecting all the points from the cells on its path. For all cells `(r, c)` traversed on the path, `grid[r][c]` is set to `0`. Then, the **second** robot moves from `(0, 0)` to `(1, n-1)`, collecting the points on its path. Note that their paths may intersect with one another.\n\nThe **first** robot wants to **minimize** the number of points collected by the **second** robot. In contrast, the **second** robot wants to **maximize** the number of points it collects. If both robots play **optimally**, return _the **number of points** collected by the **second** robot._\n\n"}
{"question": "You are given an `m x n` matrix `board`, representing the **current** state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), `' '` to represent any **empty** cells, and `'#'` to represent any **blocked** cells.\n\nA word can be placed **horizontally** (left to right **or** right to left) or **vertically** (top to bottom **or** bottom to top) in the board if:\n\n*   It does not occupy a cell containing the character `'#'`.\n*   The cell each letter is placed in must either be `' '` (empty) or **match** the letter already on the `board`.\n*   There must not be any empty cells `' '` or other lowercase letters **directly left or right** of the word if the word was placed **horizontally**.\n*   There must not be any empty cells `' '` or other lowercase letters **directly above or below** the word if the word was placed **vertically**.\n\nGiven a string `word`, return `true` _if_ `word` _can be placed in_ `board`_, or_ `false` _**otherwise**_.\n\n"}
{"question": "A perfectly straight street is represented by a number line. The street has street lamp(s) on it and is represented by a 2D integer array `lights`. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[positioni - rangei, positioni + rangei]` (**inclusive**).\n\nThe **brightness** of a position `p` is defined as the number of street lamp that light up the position `p`.\n\nGiven `lights`, return _the **brightest** position on the_ _street. If there are multiple brightest positions, return the **smallest** one._\n\n"}
{"question": "Given an array of **digit** strings `nums` and a **digit** string `target`, return _the number of pairs of indices_ `(i, j)` _(where_ `i != j`_) such that the **concatenation** of_ `nums[i] + nums[j]` _equals_ `target`.\n\n"}
{"question": "A teacher is writing a test with `n` true/false questions, with `'T'` denoting true and `'F'` denoting false. He wants to confuse the students by **maximizing** the number of **consecutive** questions with the **same** answer (multiple trues or multiple falses in a row).\n\nYou are given a string `answerKey`, where `answerKey[i]` is the original answer to the `ith` question. In addition, you are given an integer `k`, the maximum number of times you may perform the following operation:\n\n*   Change the answer key for any question to `'T'` or `'F'` (i.e., set `answerKey[i]` to `'T'` or `'F'`).\n\nReturn _the **maximum** number of consecutive_ `'T'`s or `'F'`s _in the answer key after performing the operation at most_ `k` _times_.\n\n"}
{"question": "You have observations of `n + m` **6-sided** dice rolls with each face numbered from `1` to `6`. `n` of the observations went missing, and you only have the observations of `m` rolls. Fortunately, you have also calculated the **average value** of the `n + m` rolls.\n\nYou are given an integer array `rolls` of length `m` where `rolls[i]` is the value of the `ith` observation. You are also given the two integers `mean` and `n`.\n\nReturn _an array of length_ `n` _containing the missing observations such that the **average value** of the_ `n + m` _rolls is **exactly**_ `mean`. If there are multiple valid answers, return _any of them_. If no such array exists, return _an empty array_.\n\nThe **average value** of a set of `k` numbers is the sum of the numbers divided by `k`.\n\nNote that `mean` is an integer, so the sum of the `n + m` rolls should be divisible by `n + m`.\n\n"}
{"question": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array `stones`, where `stones[i]` is the **value** of the `ith` stone.\n\nAlice and Bob take turns, with **Alice** starting first. On each turn, the player may remove any stone from `stones`. The player who removes a stone **loses** if the **sum** of the values of **all removed stones** is divisible by `3`. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\n\nAssuming both players play **optimally**, return `true` _if Alice wins and_ `false` _if Bob wins_.\n\n"}
{"question": "You are given a binary array `nums` containing only the integers `0` and `1`. Return _the number of **subarrays** in nums that have **more**_ `1`'_s than_ `0`_'s. Since the answer may be very large, return it **modulo**_ `109 + 7`.\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n"}
{"question": "You are given a 2D integer `grid` of size `m x n` and an integer `x`. In one operation, you can **add** `x` to or **subtract** `x` from any element in the `grid`.\n\nA **uni-value grid** is a grid where all the elements of it are equal.\n\nReturn _the **minimum** number of operations to make the grid **uni-value**_. If it is not possible, return `-1`.\n\n"}
{"question": "You are given a stream of **records** about a particular stock. Each record contains a **timestamp** and the corresponding **price** of the stock at that timestamp.\n\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream **correcting** the price of the previous wrong record.\n\nDesign an algorithm that:\n\n*   **Updates** the price of the stock at a particular timestamp, **correcting** the price from any previous records at the timestamp.\n*   Finds the **latest price** of the stock based on the current records. The **latest price** is the price at the latest timestamp recorded.\n*   Finds the **maximum price** the stock has been based on the current records.\n*   Finds the **minimum price** the stock has been based on the current records.\n\nImplement the `StockPrice` class:\n\n*   `StockPrice()` Initializes the object with no price records.\n*   `void update(int timestamp, int price)` Updates the `price` of the stock at the given `timestamp`.\n*   `int current()` Returns the **latest price** of the stock.\n*   `int maximum()` Returns the **maximum price** of the stock.\n*   `int minimum()` Returns the **minimum price** of the stock.\n\n"}
{"question": "A **subarray** of a **0-indexed** integer array is a contiguous **non-empty** sequence of elements within an array.\n\nThe **alternating subarray sum** of a subarray that ranges from index `i` to `j` (**inclusive**, `0 <= i <= j < nums.length`) is `nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j]`.\n\nGiven a **0-indexed** integer array `nums`, return _the **maximum alternating subarray sum** of any subarray of_ `nums`.\n\n"}
{"question": "There are `n` pieces arranged in a line, and each piece is colored either by `'A'` or by `'B'`. You are given a string `colors` of length `n` where `colors[i]` is the color of the `ith` piece.\n\nAlice and Bob are playing a game where they take **alternating turns** removing pieces from the line. In this game, Alice moves **first**.\n\n*   Alice is only allowed to remove a piece colored `'A'` if **both its neighbors** are also colored `'A'`. She is **not allowed** to remove pieces that are colored `'B'`.\n*   Bob is only allowed to remove a piece colored `'B'` if **both its neighbors** are also colored `'B'`. He is **not allowed** to remove pieces that are colored `'A'`.\n*   Alice and Bob **cannot** remove pieces from the edge of the line.\n*   If a player cannot make a move on their turn, that player **loses** and the other player **wins**.\n\nAssuming Alice and Bob play optimally, return `true` _if Alice wins, or return_ `false` _if Bob wins_.\n\n"}
{"question": "There is a network of `n` servers, labeled from `0` to `n - 1`. You are given a 2D integer array `edges`, where `edges[i] = [ui, vi]` indicates there is a message channel between servers `ui` and `vi`, and they can pass **any** number of messages to **each other** directly in **one** second. You are also given a **0-indexed** integer array `patience` of length `n`.\n\nAll servers are **connected**, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\n\nThe server labeled `0` is the **master** server. The rest are **data** servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers **optimally**, so every message takes the **least amount of time** to arrive at the master server. The master server will process all newly arrived messages **instantly** and send a reply to the originating server via the **reversed path** the message had gone through.\n\nAt the beginning of second `0`, each data server sends its message to be processed. Starting from second `1`, at the **beginning** of **every** second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\n\n*   If it has not, it will **resend** the message periodically. The data server `i` will resend the message every `patience[i]` second(s), i.e., the data server `i` will resend the message if `patience[i]` second(s) have **elapsed** since the **last** time the message was sent from this server.\n*   Otherwise, **no more resending** will occur from this server.\n\nThe network becomes **idle** when there are **no** messages passing between servers or arriving at servers.\n\nReturn _the **earliest second** starting from which the network becomes **idle**_.\n\n"}
{"question": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has `n` accounts numbered from `1` to `n`. The initial balance of each account is stored in a **0-indexed** integer array `balance`, with the `(i + 1)th` account having an initial balance of `balance[i]`.\n\nExecute all the **valid** transactions. A transaction is **valid** if:\n\n*   The given account number(s) are between `1` and `n`, and\n*   The amount of money withdrawn or transferred from is **less than or equal** to the balance of the account.\n\nImplement the `Bank` class:\n\n*   `Bank(long[] balance)` Initializes the object with the **0-indexed** integer array `balance`.\n*   `boolean transfer(int account1, int account2, long money)` Transfers `money` dollars from the account numbered `account1` to the account numbered `account2`. Return `true` if the transaction was successful, `false` otherwise.\n*   `boolean deposit(int account, long money)` Deposit `money` dollars into the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n*   `boolean withdraw(int account, long money)` Withdraw `money` dollars from the account numbered `account`. Return `true` if the transaction was successful, `false` otherwise.\n\n"}
{"question": "Given an integer array `nums`, find the **maximum** possible **bitwise OR** of a subset of `nums` and return _the **number of different non-empty subsets** with the maximum bitwise OR_.\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`. Two subsets are considered **different** if the indices of the elements chosen are different.\n\nThe bitwise OR of an array `a` is equal to `a[0] **OR** a[1] **OR** ... **OR** a[a.length - 1]` (**0-indexed**).\n\n"}
{"question": "Given the `head` of a singly linked list that is sorted in **non-decreasing** order using the **absolute values** of its nodes, return _the list sorted in **non-decreasing** order using the **actual values** of its nodes_.\n\n"}
{"question": "An integer `x` is **numerically balanced** if for every digit `d` in the number `x`, there are **exactly** `d` occurrences of that digit in `x`.\n\nGiven an integer `n`, return _the **smallest numerically balanced** number **strictly greater** than_ `n`_._\n\n"}
{"question": "There is a **binary** tree rooted at `0` consisting of `n` nodes. The nodes are labeled from `0` to `n - 1`. You are given a **0-indexed** integer array `parents` representing the tree, where `parents[i]` is the parent of node `i`. Since node `0` is the root, `parents[0] == -1`.\n\nEach node has a **score**. To find the score of a node, consider if the node and the edges connected to it were **removed**. The tree would become one or more **non-empty** subtrees. The **size** of a subtree is the number of the nodes in it. The **score** of the node is the **product of the sizes** of all those subtrees.\n\nReturn _the **number** of nodes that have the **highest score**_.\n\n"}
{"question": "You are given a string `sentence` containing words separated by spaces, and an integer `k`. Your task is to separate `sentence` into **rows** where the number of characters in each row is **at most** `k`. You may assume that `sentence` does not begin or end with a space, and the words in `sentence` are separated by a single space.\n\nYou can split `sentence` into rows by inserting line breaks between words in `sentence`. A word **cannot** be split between two rows. Each word must be used exactly once, and the word order cannot be rearranged. Adjacent words in a row should be separated by a single space, and rows should not begin or end with spaces.\n\nThe **cost** of a row with length `n` is `(k - n)2`, and the **total cost** is the sum of the **costs** for all rows **except** the last one.\n\n*   For example if `sentence = \"i love leetcode \"` and `k = 12`:\n    *   Separating `sentence` into `\"i \"`, `\"love \"`, and `\"leetcode \"` has a cost of `(12 - 1)2 + (12 - 4)2 = 185`.\n    *   Separating `sentence` into `\"i love \"`, and `\"leetcode \"` has a cost of `(12 - 6)2 = 36`.\n    *   Separating `sentence` into `\"i \"`, and `\"love leetcode \"` is not possible because the length of `\"love leetcode \"` is greater than `k`.\n\nReturn _the **minimum** possible total cost of separating_ `sentence` _into rows._\n\n"}
{"question": "You are given a **0-indexed** 2D integer array of `events` where `events[i] = [startTimei, endTimei, valuei]`. The `ith` event starts at `startTimei` and ends at `endTimei`, and if you attend this event, you will receive a value of `valuei`. You can choose **at most** **two** **non-overlapping** events to attend such that the sum of their values is **maximized**.\n\nReturn _this **maximum** sum._\n\nNote that the start time and end time is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time `t`, the next event must start at or after `t + 1`.\n\n"}
{"question": "There is a long table with a line of plates and candles arranged on top of it. You are given a **0-indexed** string `s` consisting of characters `'*'` and `'|'` only, where a `'*'` represents a **plate** and a `'|'` represents a **candle**.\n\nYou are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [lefti, righti]` denotes the **substring** `s[lefti...righti]` (**inclusive**). For each query, you need to find the **number** of plates **between candles** that are **in the substring**. A plate is considered **between candles** if there is at least one candle to its left **and** at least one candle to its right **in the substring**.\n\n*   For example, `s = \"||**||**|* \"`, and a query `[3, 8]` denotes the substring `\"*||******| \"`. The number of plates between candles in this substring is `2`, as each of the two plates has at least one candle **in the substring** to its left **and** right.\n\nReturn _an integer array_ `answer` _where_ `answer[i]` _is the answer to the_ `ith` _query_.\n\n"}
{"question": "A **critical point** in a linked list is defined as **either** a **local maxima** or a **local minima**.\n\nA node is a **local maxima** if the current node has a value **strictly greater** than the previous node and the next node.\n\nA node is a **local minima** if the current node has a value **strictly smaller** than the previous node and the next node.\n\nNote that a node can only be a local maxima/minima if there exists **both** a previous node and a next node.\n\nGiven a linked list `head`, return _an array of length 2 containing_ `[minDistance, maxDistance]` _where_ `minDistance` _is the **minimum distance** between **any two distinct** critical points and_ `maxDistance` _is the **maximum distance** between **any two distinct** critical points. If there are **fewer** than two critical points, return_ `[-1, -1]`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` containing **distinct** numbers, an integer `start`, and an integer `goal`. There is an integer `x` that is initially set to `start`, and you want to perform operations on `x` such that it is converted to `goal`. You can perform the following operation repeatedly on the number `x`:\n\nIf `0 <= x <= 1000`, then for any index `i` in the array (`0 <= i < nums.length`), you can set `x` to any of the following:\n\n*   `x + nums[i]`\n*   `x - nums[i]`\n*   `x ^ nums[i]` (bitwise-XOR)\n\nNote that you can use each `nums[i]` any number of times in any order. Operations that set `x` to be out of the range `0 <= x <= 1000` are valid, but no more operations can be done afterward.\n\nReturn _the **minimum** number of operations needed to convert_ `x = start` _into_ `goal`_, and_ `-1` _if it is not possible_.\n\n"}
{"question": "A room is represented by a **0-indexed** 2D binary matrix `room` where a `0` represents an **empty** space and a `1` represents a space with an **object**. The top left corner of the room will be empty in all test cases.\n\nA cleaning robot starts at the top left corner of the room and is facing right. The robot will continue heading straight until it reaches the edge of the room or it hits an object, after which it will turn 90 degrees **clockwise** and repeat this process. The starting space and all spaces that the robot visits are **cleaned** by it.\n\nReturn _the number of **clean** spaces in the room if the robot runs indefinetely._\n\n"}
{"question": "Given a string `word`, return _the **sum of the number of vowels** (_`'a'`, `'e'`_,_ `'i'`_,_ `'o'`_, and_ `'u'`_)_ _in every substring of_ `word`.\n\nA **substring** is a contiguous (non-empty) sequence of characters within a string.\n\n**Note:** Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\n\n"}
{"question": "You are given an integer `n` indicating there are `n` specialty retail stores. There are `m` product types of varying amounts, which are given as a **0-indexed** integer array `quantities`, where `quantities[i]` represents the number of products of the `ith` product type.\n\nYou need to distribute **all products** to the retail stores following these rules:\n\n*   A store can only be given **at most one product type** but can be given **any** amount of it.\n*   After distribution, each store will have been given some number of products (possibly `0`). Let `x` represent the maximum number of products given to any store. You want `x` to be as small as possible, i.e., you want to **minimize** the **maximum** number of products that are given to any store.\n\nReturn _the minimum possible_ `x`.\n\n"}
{"question": "You are given a **0-indexed** string `s` consisting of only lowercase English letters, and an integer `count`. A **substring** of `s` is said to be an **equal count substring** if, for each **unique** letter in the substring, it appears exactly `count` times in the substring.\n\nReturn _the number of **equal count substrings** in_ `s`.\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n"}
{"question": "A `width x height` grid is on an XY-plane with the **bottom-left** cell at `(0, 0)` and the **top-right** cell at `(width - 1, height - 1)`. The grid is aligned with the four cardinal directions ( `\"North \"`, `\"East \"`, `\"South \"`, and `\"West \"`). A robot is **initially** at cell `(0, 0)` facing direction `\"East \"`.\n\nThe robot can be instructed to move for a specific number of **steps**. For each step, it does the following.\n\n1.  Attempts to move **forward one** cell in the direction it is facing.\n2.  If the cell the robot is **moving to** is **out of bounds**, the robot instead **turns** 90 degrees **counterclockwise** and retries the step.\n\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\n\nImplement the `Robot` class:\n\n*   `Robot(int width, int height)` Initializes the `width x height` grid with the robot at `(0, 0)` facing `\"East \"`.\n*   `void step(int num)` Instructs the robot to move forward `num` steps.\n*   `int[] getPos()` Returns the current cell the robot is at, as an array of length 2, `[x, y]`.\n*   `String getDir()` Returns the current direction of the robot, `\"North \"`, `\"East \"`, `\"South \"`, or `\"West \"`.\n\n"}
{"question": "You are given a 2D integer array `items` where `items[i] = [pricei, beautyi]` denotes the **price** and **beauty** of an item respectively.\n\nYou are also given a **0-indexed** integer array `queries`. For each `queries[j]`, you want to determine the **maximum beauty** of an item whose **price** is **less than or equal** to `queries[j]`. If no such item exists, then the answer to this query is `0`.\n\nReturn _an array_ `answer` _of the same length as_ `queries` _where_ `answer[j]` _is the answer to the_ `jth` _query_.\n\n"}
{"question": "You are given the `head` of a linked list.\n\nThe nodes in the linked list are **sequentially** assigned to **non-empty** groups whose lengths form the sequence of the natural numbers (`1, 2, 3, 4, ...`). The **length** of a group is the number of nodes assigned to it. In other words,\n\n*   The `1st` node is assigned to the first group.\n*   The `2nd` and the `3rd` nodes are assigned to the second group.\n*   The `4th`, `5th`, and `6th` nodes are assigned to the third group, and so on.\n\nNote that the length of the last group may be less than or equal to `1 + the length of the second to last group`.\n\n**Reverse** the nodes in each group with an **even** length, and return _the_ `head` _of the modified linked list_.\n\n"}
{"question": "A string `originalText` is encoded using a **slanted transposition cipher** to a string `encodedText` with the help of a matrix having a **fixed number of rows** `rows`.\n\n`originalText` is placed first in a top-left to bottom-right manner.\n\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of `originalText`. The arrow indicates the order in which the cells are filled. All empty cells are filled with `' '`. The number of columns is chosen such that the rightmost column will **not be empty** after filling in `originalText`.\n\n`encodedText` is then formed by appending all characters of the matrix in a row-wise fashion.\n\nThe characters in the blue cells are appended first to `encodedText`, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\n\nFor example, if `originalText = \"cipher \"` and `rows = 3`, then we encode it in the following manner:\n\nThe blue arrows depict how `originalText` is placed in the matrix, and the red arrows denote the order in which `encodedText` is formed. In the above example, `encodedText = \"ch ie pr \"`.\n\nGiven the encoded string `encodedText` and number of rows `rows`, return _the original string_ `originalText`.\n\n**Note:** `originalText` **does not** have any trailing spaces `' '`. The test cases are generated such that there is only one possible `originalText`.\n\n"}
{"question": "A maze consists of `n` rooms numbered from `1` to `n`, and some rooms are connected by corridors. You are given a 2D integer array `corridors` where `corridors[i] = [room1i, room2i]` indicates that there is a corridor connecting `room1i` and `room2i`, allowing a person in the maze to go from `room1i` to `room2i` **and vice versa**.\n\nThe designer of the maze wants to know how confusing the maze is. The **confusion** **score** of the maze is the number of different cycles of **length 3**.\n\n*   For example, `1 -> 2 -> 3 -> 1` is a cycle of length 3, but `1 -> 2 -> 3 -> 4` and `1 -> 2 -> 3 -> 2 -> 1` are not.\n\nTwo cycles are considered to be **different** if one or more of the rooms visited in the first cycle is **not** in the second cycle.\n\nReturn _the_ _**confusion** **score** of the maze._\n\n"}
{"question": "You want to water `n` plants in your garden with a watering can. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`. There is a river at `x = -1` that you can refill your watering can at.\n\nEach plant needs a specific amount of water. You will water the plants in the following way:\n\n*   Water the plants in order from left to right.\n*   After watering the current plant, if you do not have enough water to **completely** water the next plant, return to the river to fully refill the watering can.\n*   You **cannot** refill the watering can early.\n\nYou are initially at the river (i.e., `x = -1`). It takes **one step** to move **one unit** on the x-axis.\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and an integer `capacity` representing the watering can capacity, return _the **number of steps** needed to water all the plants_.\n\n"}
{"question": "Design a data structure to find the **frequency** of a given value in a given subarray.\n\nThe **frequency** of a value in a subarray is the number of occurrences of that value in the subarray.\n\nImplement the `RangeFreqQuery` class:\n\n*   `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`.\n*   `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`.\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n"}
{"question": "You are given a **0-indexed** string `s` consisting of only lowercase English letters. Return _the number of **substrings** in_ `s` _that begin and end with the **same** character._\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n"}
{"question": "You are given a **0-indexed** string `hamsters` where `hamsters[i]` is either:\n\n*   `'H'` indicating that there is a hamster at index `i`, or\n*   `'.'` indicating that index `i` is empty.\n\nYou will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index `i` can be fed if you place a food bucket at index `i - 1` **and/or** at index `i + 1`.\n\nReturn _the minimum number of food buckets you should **place at empty indices** to feed all the hamsters or_ `-1` _if it is impossible to feed all of them_.\n\n"}
{"question": "There is an `m x n` grid, where `(0, 0)` is the top-left cell and `(m - 1, n - 1)` is the bottom-right cell. You are given an integer array `startPos` where `startPos = [startrow, startcol]` indicates that **initially**, a **robot** is at the cell `(startrow, startcol)`. You are also given an integer array `homePos` where `homePos = [homerow, homecol]` indicates that its **home** is at the cell `(homerow, homecol)`.\n\nThe robot needs to go to its home. It can move one cell in four directions: **left**, **right**, **up**, or **down**, and it can not move outside the boundary. Every move incurs some cost. You are further given two **0-indexed** integer arrays: `rowCosts` of length `m` and `colCosts` of length `n`.\n\n*   If the robot moves **up** or **down** into a cell whose **row** is `r`, then this move costs `rowCosts[r]`.\n*   If the robot moves **left** or **right** into a cell whose **column** is `c`, then this move costs `colCosts[c]`.\n\nReturn _the **minimum total cost** for this robot to return home_.\n\n"}
{"question": "You are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\nBuild and return _an array_ `avgs` _of length_ `n` _where_ `avgs[i]` _is the **k-radius average** for the subarray centered at index_ `i`.\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n*   For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n"}
{"question": "You are given a **0-indexed** array of **distinct** integers `nums`.\n\nThere is an element in `nums` that has the **lowest** value and an element that has the **highest** value. We call them the **minimum** and **maximum** respectively. Your goal is to remove **both** these elements from the array.\n\nA **deletion** is defined as either removing an element from the **front** of the array or removing an element from the **back** of the array.\n\nReturn _the **minimum** number of deletions it would take to remove **both** the minimum and maximum element from the array._\n\n"}
{"question": "A series of highways connect `n` cities numbered from `0` to `n - 1`. You are given a 2D integer array `highways` where `highways[i] = [city1i, city2i, tolli]` indicates that there is a highway that connects `city1i` and `city2i`, allowing a car to go from `city1i` to `city2i` **and vice versa** for a cost of `tolli`.\n\nYou are also given an integer `discounts` which represents the number of discounts you have. You can use a discount to travel across the `ith` highway for a cost of `tolli / 2` (**integer** **division**). Each discount may only be used **once**, and you can only use at most **one** discount per highway.\n\nReturn _the **minimum total cost** to go from city_ `0` _to city_ `n - 1`_, or_ `-1` _if it is not possible to go from city_ `0` _to city_ `n - 1`_._\n\n"}
{"question": "You are given the `head` of a linked list. **Delete** the **middle node**, and return _the_ `head` _of the modified linked list_.\n\nThe **middle node** of a linked list of size `n` is the `⌊n / 2⌋th` node from the **start** using **0-based indexing**, where `⌊x⌋` denotes the largest integer less than or equal to `x`.\n\n*   For `n` = `1`, `2`, `3`, `4`, and `5`, the middle nodes are `0`, `1`, `1`, `2`, and `2`, respectively.\n\n"}
{"question": "You are given the `root` of a **binary tree** with `n` nodes. Each node is uniquely assigned a value from `1` to `n`. You are also given an integer `startValue` representing the value of the start node `s`, and a different integer `destValue` representing the value of the destination node `t`.\n\nFind the **shortest path** starting from node `s` and ending at node `t`. Generate step-by-step directions of such path as a string consisting of only the **uppercase** letters `'L'`, `'R'`, and `'U'`. Each letter indicates a specific direction:\n\n*   `'L'` means to go from a node to its **left child** node.\n*   `'R'` means to go from a node to its **right child** node.\n*   `'U'` means to go from a node to its **parent** node.\n\nReturn _the step-by-step directions of the **shortest path** from node_ `s` _to node_ `t`.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`. Find the **largest even sum** of any subsequence of `nums` that has a length of `k`.\n\nReturn _this sum, or_ `-1` _if such a sum does not exist_.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You and a gang of thieves are planning on robbing a bank. You are given a **0-indexed** integer array `security`, where `security[i]` is the number of guards on duty on the `ith` day. The days are numbered starting from `0`. You are also given an integer `time`.\n\nThe `ith` day is a good day to rob the bank if:\n\n*   There are at least `time` days before and after the `ith` day,\n*   The number of guards at the bank for the `time` days **before** `i` are **non-increasing**, and\n*   The number of guards at the bank for the `time` days **after** `i` are **non-decreasing**.\n\nMore formally, this means day `i` is a good day to rob the bank if and only if `security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]`.\n\nReturn _a list of **all** days **(0-indexed)** that are good days to rob the bank_. _The order that the days are returned in does **not** matter._\n\n"}
{"question": "You are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb.\n\nThe bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the `ith` bomb, whereas `ri` denotes the **radius** of its range.\n\nYou may choose to detonate a **single** bomb. When a bomb is detonated, it will detonate **all bombs** that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\n\nGiven the list of `bombs`, return _the **maximum** number of bombs that can be detonated if you are allowed to detonate **only one** bomb_.\n\n"}
{"question": "You are given an integer array `nums`. The **range** of a subarray of `nums` is the difference between the largest and smallest element in the subarray.\n\nReturn _the **sum of all** subarray ranges of_ `nums`_._\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "Alice and Bob want to water `n` plants in their garden. The plants are arranged in a row and are labeled from `0` to `n - 1` from left to right where the `ith` plant is located at `x = i`.\n\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, **initially full**. They water the plants in the following way:\n\n*   Alice waters the plants in order from **left to right**, starting from the `0th` plant. Bob waters the plants in order from **right to left**, starting from the `(n - 1)th` plant. They begin watering the plants **simultaneously**.\n*   It takes the same amount of time to water each plant regardless of how much water it needs.\n*   Alice/Bob **must** water the plant if they have enough in their can to **fully** water it. Otherwise, they **first** refill their can (instantaneously) then water the plant.\n*   In case both Alice and Bob reach the same plant, the one with **more** water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.\n\nGiven a **0-indexed** integer array `plants` of `n` integers, where `plants[i]` is the amount of water the `ith` plant needs, and two integers `capacityA` and `capacityB` representing the capacities of Alice's and Bob's watering cans respectively, return _the **number of times** they have to refill to water all the plants_.\n\n"}
{"question": "You are given a **0-indexed** integer array `candies`, where `candies[i]` represents the flavor of the `ith` candy. Your mom wants you to share these candies with your little sister by giving her `k` **consecutive** candies, but you want to keep as many flavors of candies as possible.\n\nReturn _the **maximum** number of **unique** flavors of candy you can keep after sharing_ _with your sister._\n\n"}
{"question": "You are given a **0-indexed** string `s` and a **0-indexed** integer array `spaces` that describes the indices in the original string where spaces will be added. Each space should be inserted **before** the character at the given index.\n\n*   For example, given `s = \"EnjoyYourCoffee \"` and `spaces = [5, 9]`, we place spaces before `'Y'` and `'C'`, which are at indices `5` and `9` respectively. Thus, we obtain `\"Enjoy **Y**our **C**offee \"`.\n\nReturn _the modified string **after** the spaces have been added._\n\n"}
{"question": "You are given an integer array `prices` representing the daily price history of a stock, where `prices[i]` is the stock price on the `ith` day.\n\nA **smooth descent period** of a stock consists of **one or more contiguous** days such that the price on each day is **lower** than the price on the **preceding day** by **exactly** `1`. The first day of the period is exempted from this rule.\n\nReturn _the number of **smooth descent periods**_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. Initially on minute `0`, the array is unchanged. Every minute, the **leftmost** element in `nums` is removed until no elements remain. Then, every minute, one element is appended to the **end** of `nums`, in the order they were removed in, until the original array is restored. This process repeats indefinitely.\n\n*   For example, the array `[0,1,2]` would change as follows: `[0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> [1,2] -> [2] -> [] -> [0] -> [0,1] -> [0,1,2] -> ...`\n\nYou are also given a 2D integer array `queries` of size `n` where `queries[j] = [timej, indexj]`. The answer to the `jth` query is:\n\n*   `nums[indexj]` if `indexj < nums.length` at minute `timej`\n*   `-1` if `indexj >= nums.length` at minute `timej`\n\nReturn _an integer array `ans` of size_ `n` _where_ `ans[j]` _is the answer to the_ `jth` _query_.\n\n"}
{"question": "You have information about `n` different recipes. You are given a string array `recipes` and a 2D string array `ingredients`. The `ith` recipe has the name `recipes[i]`, and you can **create** it if you have **all** the needed ingredients from `ingredients[i]`. Ingredients to a recipe may need to be created from **other** recipes, i.e., `ingredients[i]` may contain a string that is in `recipes`.\n\nYou are also given a string array `supplies` containing all the ingredients that you initially have, and you have an infinite supply of all of them.\n\nReturn _a list of all the recipes that you can create._ You may return the answer in **any order**.\n\nNote that two recipes may contain each other in their ingredients.\n\n"}
{"question": "A parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is valid if **any** of the following conditions is **true**:\n\n*   It is `()`.\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n*   It can be written as `(A)`, where `A` is a valid parentheses string.\n\nYou are given a parentheses string `s` and a string `locked`, both of length `n`. `locked` is a binary string consisting only of `'0'`s and `'1'`s. For **each** index `i` of `locked`,\n\n*   If `locked[i]` is `'1'`, you **cannot** change `s[i]`.\n*   But if `locked[i]` is `'0'`, you **can** change `s[i]` to either `'('` or `')'`.\n\nReturn `true` _if you can make `s` a valid parentheses string_. Otherwise, return `false`.\n\n"}
{"question": "There is an `n x n` grid, with the top-left cell at `(0, 0)` and the bottom-right cell at `(n - 1, n - 1)`. You are given the integer `n` and an integer array `startPos` where `startPos = [startrow, startcol]` indicates that a robot is initially at cell `(startrow, startcol)`.\n\nYou are also given a **0-indexed** string `s` of length `m` where `s[i]` is the `ith` instruction for the robot: `'L'` (move left), `'R'` (move right), `'U'` (move up), and `'D'` (move down).\n\nThe robot can begin executing from any `ith` instruction in `s`. It executes the instructions one by one towards the end of `s` but it stops if either of these conditions is met:\n\n*   The next instruction will move the robot off the grid.\n*   There are no more instructions left to execute.\n\nReturn _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is **the number of instructions** the robot can execute if the robot **begins executing from** the_ `ith` _instruction in_ `s`.\n\n"}
{"question": "You are given a **0-indexed** array of `n` integers `arr`.\n\nThe **interval** between two elements in `arr` is defined as the **absolute difference** between their indices. More formally, the **interval** between `arr[i]` and `arr[j]` is `|i - j|`.\n\nReturn _an array_ `intervals` _of length_ `n` _where_ `intervals[i]` _is **the sum of intervals** between_ `arr[i]` _and each element in_ `arr` _with the same value as_ `arr[i]`_._\n\n**Note:** `|x|` is the absolute value of `x`.\n\n"}
{"question": "Anti-theft security devices are activated inside a bank. You are given a **0-indexed** binary string array `bank` representing the floor plan of the bank, which is an `m x n` 2D matrix. `bank[i]` represents the `ith` row, consisting of `'0'`s and `'1'`s. `'0'` means the cell is empty, while`'1'` means the cell has a security device.\n\nThere is **one** laser beam between any **two** security devices **if both** conditions are met:\n\n*   The two devices are located on two **different rows**: `r1` and `r2`, where `r1 < r2`.\n*   For **each** row `i` where `r1 < i < r2`, there are **no security devices** in the `ith` row.\n\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\n\nReturn _the total number of laser beams in the bank_.\n\n"}
{"question": "You are given an integer `mass`, which represents the original mass of a planet. You are further given an integer array `asteroids`, where `asteroids[i]` is the mass of the `ith` asteroid.\n\nYou can arrange for the planet to collide with the asteroids in **any arbitrary order**. If the mass of the planet is **greater than or equal to** the mass of the asteroid, the asteroid is **destroyed** and the planet **gains** the mass of the asteroid. Otherwise, the planet is destroyed.\n\nReturn `true` _if **all** asteroids can be destroyed. Otherwise, return_ `false`_._\n\n"}
{"question": "You are given an `m x n` binary matrix `grid`.\n\nIn one operation, you can choose **any** row or column and flip each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\nReturn `true` _if it is possible to remove all_ `1`_'s from_ `grid` using **any** number of operations or `false` otherwise.\n\n"}
{"question": "In a linked list of size `n`, where `n` is **even**, the `ith` node (**0-indexed**) of the linked list is known as the **twin** of the `(n-1-i)th` node, if `0 <= i <= (n / 2) - 1`.\n\n*   For example, if `n = 4`, then node `0` is the twin of node `3`, and node `1` is the twin of node `2`. These are the only nodes with twins for `n = 4`.\n\nThe **twin sum** is defined as the sum of a node and its twin.\n\nGiven the `head` of a linked list with even length, return _the **maximum twin sum** of the linked list_.\n\n"}
{"question": "You are given an array of strings `words`. Each element of `words` consists of **two** lowercase English letters.\n\nCreate the **longest possible palindrome** by selecting some elements from `words` and concatenating them in **any order**. Each element can be selected **at most once**.\n\nReturn _the **length** of the longest palindrome that you can create_. If it is impossible to create any palindrome, return `0`.\n\nA **palindrome** is a string that reads the same forward and backward.\n\n"}
{"question": "A **swap** is defined as taking two **distinct** positions in an array and swapping the values in them.\n\nA **circular** array is defined as an array where we consider the **first** element and the **last** element to be **adjacent**.\n\nGiven a **binary** **circular** array `nums`, return _the minimum number of swaps required to group all_ `1`_'s present in the array together at **any location**_.\n\n"}
{"question": "You are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only.\n\nFor each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`.\n\nThe **conversion operation** is described in the following two steps:\n\n1.  **Append** any lowercase letter that is **not present** in the string to its end.\n    *   For example, if the string is `\"abc \"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd \"`.\n2.  **Rearrange** the letters of the new string in **any** arbitrary order.\n    *   For example, `\"abcd \"` can be rearranged to `\"acbd \"`, `\"bacd \"`, `\"cbda \"`, and so on. Note that it can also be rearranged to `\"abcd \"` itself.\n\nReturn _the **number of strings** in_ `targetWords` _that can be obtained by performing the operations on **any** string of_ `startWords`.\n\n**Note** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.\n\n"}
{"question": "You have `n` buckets each containing some gallons of water in it, represented by a **0-indexed** integer array `buckets`, where the `ith` bucket contains `buckets[i]` gallons of water. You are also given an integer `loss`.\n\nYou want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour `k` gallons of water, you spill `loss` **percent** of `k`.\n\nReturn _the **maximum** amount of water in each bucket after making the amount of water equal._ Answers within `10-5` of the actual answer will be accepted.\n\n"}
{"question": "You are playing a game with integers. You start with the integer `1` and you want to reach the integer `target`.\n\nIn one move, you can either:\n\n*   **Increment** the current integer by one (i.e., `x = x + 1`).\n*   **Double** the current integer (i.e., `x = 2 * x`).\n\nYou can use the **increment** operation **any** number of times, however, you can only use the **double** operation **at most** `maxDoubles` times.\n\nGiven the two integers `target` and `maxDoubles`, return _the minimum number of moves needed to reach_ `target` _starting with_ `1`.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `questions` where `questions[i] = [pointsi, brainpoweri]`.\n\nThe array describes the questions of an exam, where you have to process the questions **in order** (i.e., starting from question `0`) and make a decision whether to **solve** or **skip** each question. Solving question `i` will **earn** you `pointsi` points but you will be **unable** to solve each of the next `brainpoweri` questions. If you skip question `i`, you get to make the decision on the next question.\n\n*   For example, given `questions = [[3, 2], [4, 3], [4, 4], [2, 5]]`:\n    *   If question `0` is solved, you will earn `3` points but you will be unable to solve questions `1` and `2`.\n    *   If instead, question `0` is skipped and question `1` is solved, you will earn `4` points but you will be unable to solve questions `2` and `3`.\n\nReturn _the **maximum** points you can earn for the exam_.\n\n"}
{"question": "You are given a **0-indexed** array of `n` integers `differences`, which describes the **differences** between each pair of **consecutive** integers of a **hidden** sequence of length `(n + 1)`. More formally, call the hidden sequence `hidden`, then we have that `differences[i] = hidden[i + 1] - hidden[i]`.\n\nYou are further given two integers `lower` and `upper` that describe the **inclusive** range of values `[lower, upper]` that the hidden sequence can contain.\n\n*   For example, given `differences = [1, -3, 4]`, `lower = 1`, `upper = 6`, the hidden sequence is a sequence of length `4` whose elements are in between `1` and `6` (**inclusive**).\n    *   `[3, 4, 1, 5]` and `[4, 5, 2, 6]` are possible hidden sequences.\n    *   `[5, 6, 3, 7]` is not possible since it contains an element greater than `6`.\n    *   `[1, 2, 3, 4]` is not possible since the differences are not correct.\n\nReturn _the number of **possible** hidden sequences there are._ If there are no possible sequences, return `0`.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `grid` of size `m x n` that represents a map of the items in a shop. The integers in the grid represent the following:\n\n*   `0` represents a wall that you cannot pass through.\n*   `1` represents an empty cell that you can freely move to and from.\n*   All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\n\nIt takes `1` step to travel between adjacent grid cells.\n\nYou are also given integer arrays `pricing` and `start` where `pricing = [low, high]` and `start = [row, col]` indicates that you start at the position `(row, col)` and are interested only in items with a price in the range of `[low, high]` (**inclusive**). You are further given an integer `k`.\n\nYou are interested in the **positions** of the `k` **highest-ranked** items whose prices are **within** the given price range. The rank is determined by the **first** of these criteria that is different:\n\n1.  Distance, defined as the length of the shortest path from the `start` (**shorter** distance has a higher rank).\n2.  Price (**lower** price has a higher rank, but it must be **in the price range**).\n3.  The row number (**smaller** row number has a higher rank).\n4.  The column number (**smaller** column number has a higher rank).\n\nReturn _the_ `k` _highest-ranked items within the price range **sorted** by their rank (highest to lowest)_. If there are fewer than `k` reachable items within the price range, return _**all** of them_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of **even** length consisting of an **equal** number of positive and negative integers.\n\nYou should **rearrange** the elements of `nums` such that the modified array follows the given conditions:\n\n1.  Every **consecutive pair** of integers have **opposite signs**.\n2.  For all integers with the same sign, the **order** in which they were present in `nums` is **preserved**.\n3.  The rearranged array begins with a positive integer.\n\nReturn _the modified array after rearranging the elements to satisfy the aforementioned conditions_.\n\n"}
{"question": "You are given an integer array `nums`. A number `x` is **lonely** when it appears only **once**, and no **adjacent** numbers (i.e. `x + 1` and `x - 1)` appear in the array.\n\nReturn _**all** lonely numbers in_ `nums`. You may return the answer in **any order**.\n\n"}
{"question": "You are given an array `points` where `points[i] = [xi, yi]` represents a point on an **X-Y** plane.\n\n**Straight lines** are going to be added to the **X-Y** plane, such that every point is covered by at **least** one line.\n\nReturn _the **minimum** number of **straight lines** needed to cover all the points_.\n\n"}
{"question": "You are given a **0-indexed** binary array `nums` of length `n`. `nums` can be divided at index `i` (where `0 <= i <= n)` into two arrays (possibly empty) `numsleft` and `numsright`:\n\n*   `numsleft` has all the elements of `nums` between index `0` and `i - 1` **(inclusive)**, while `numsright` has all the elements of nums between index `i` and `n - 1` **(inclusive)**.\n*   If `i == 0`, `numsleft` is **empty**, while `numsright` has all the elements of `nums`.\n*   If `i == n`, `numsleft` has all the elements of nums, while `numsright` is **empty**.\n\nThe **division score** of an index `i` is the **sum** of the number of `0`'s in `numsleft` and the number of `1`'s in `numsright`.\n\nReturn _**all distinct indices** that have the **highest** possible **division score**_. You may return the answer in **any order**.\n\n"}
{"question": "A generic microwave supports cooking times for:\n\n*   at least `1` second.\n*   at most `99` minutes and `99` seconds.\n\nTo set the cooking time, you push **at most four digits**. The microwave normalizes what you push as four digits by **prepending zeroes**. It interprets the **first** two digits as the minutes and the **last** two digits as the seconds. It then **adds** them up as the cooking time. For example,\n\n*   You push `9` `5` `4` (three digits). It is normalized as `0954` and interpreted as `9` minutes and `54` seconds.\n*   You push `0` `0` `0` `8` (four digits). It is interpreted as `0` minutes and `8` seconds.\n*   You push `8` `0` `9` `0`. It is interpreted as `80` minutes and `90` seconds.\n*   You push `8` `1` `3` `0`. It is interpreted as `81` minutes and `30` seconds.\n\nYou are given integers `startAt`, `moveCost`, `pushCost`, and `targetSeconds`. **Initially**, your finger is on the digit `startAt`. Moving the finger above **any specific digit** costs `moveCost` units of fatigue. Pushing the digit below the finger **once** costs `pushCost` units of fatigue.\n\nThere can be multiple ways to set the microwave to cook for `targetSeconds` seconds but you are interested in the way with the minimum cost.\n\nReturn _the **minimum cost** to set_ `targetSeconds` _seconds of cooking time_.\n\nRemember that one minute consists of `60` seconds.\n\n"}
{"question": "You are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\nReturn _the rearranged number with minimal value_.\n\nNote that the sign of the number does not change after rearranging the digits.\n\n"}
{"question": "A **Bitset** is a data structure that compactly stores bits.\n\nImplement the `Bitset` class:\n\n*   `Bitset(int size)` Initializes the Bitset with `size` bits, all of which are `0`.\n*   `void fix(int idx)` Updates the value of the bit at the index `idx` to `1`. If the value was already `1`, no change occurs.\n*   `void unfix(int idx)` Updates the value of the bit at the index `idx` to `0`. If the value was already `0`, no change occurs.\n*   `void flip()` Flips the values of each bit in the Bitset. In other words, all bits with value `0` will now have value `1` and vice versa.\n*   `boolean all()` Checks if the value of **each** bit in the Bitset is `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n*   `boolean one()` Checks if there is **at least one** bit in the Bitset with value `1`. Returns `true` if it satisfies the condition, `false` otherwise.\n*   `int count()` Returns the **total number** of bits in the Bitset which have value `1`.\n*   `String toString()` Returns the current composition of the Bitset. Note that in the resultant string, the character at the `ith` index should coincide with the value at the `ith` bit of the Bitset.\n\n"}
{"question": "Given a digit string `s`, return _the number of **unique substrings** of_ `s` _where every digit appears the same number of times._\n\n"}
{"question": "You are given a **0-indexed** array `nums` consisting of `n` positive integers.\n\nThe array `nums` is called **alternating** if:\n\n*   `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`.\n*   `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`.\n\nIn one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer.\n\nReturn _the **minimum number of operations** required to make the array alternating_.\n\n"}
{"question": "You are given an array of **positive** integers `beans`, where each integer represents the number of magic beans found in a particular magic bag.\n\n**Remove** any number of beans (**possibly none**) from each bag such that the number of beans in each remaining **non-empty** bag (still containing **at least one** bean) is **equal**. Once a bean has been removed from a bag, you are **not** allowed to return it to any of the bags.\n\nReturn _the **minimum** number of magic beans that you have to remove_.\n\n"}
{"question": "You are given a **0-indexed** `m x n` **binary** matrix `grid`.\n\nIn one operation, you can choose any `i` and `j` that meet the following conditions:\n\n*   `0 <= i < m`\n*   `0 <= j < n`\n*   `grid[i][j] == 1`\n\nand change the values of **all** cells in row `i` and column `j` to zero.\n\nReturn _the **minimum** number of operations needed to remove all_ `1`_'s from_ `grid`_._\n\n"}
{"question": "Given an integer `num`, return _three consecutive integers (as a sorted array)_ _that **sum** to_ `num`. If `num` cannot be expressed as the sum of three consecutive integers, return _an **empty** array._\n\n"}
{"question": "You are given an integer `finalSum`. Split it into a sum of a **maximum** number of **unique** positive even integers.\n\n*   For example, given `finalSum = 12`, the following splits are **valid** (unique positive even integers summing up to `finalSum`): `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`. Among them, `(2 + 4 + 6)` contains the maximum number of integers. Note that `finalSum` cannot be split into `(2 + 2 + 4 + 4)` as all the numbers should be unique.\n\nReturn _a list of integers that represent a valid split containing a **maximum** number of integers_. If no valid split exists for `finalSum`, return _an **empty** list_. You may return the integers in **any** order.\n\n"}
{"question": "You are given the `head` of a linked list, which contains a series of integers **separated** by `0`'s. The **beginning** and **end** of the linked list will have `Node.val == 0`.\n\nFor **every** two consecutive `0`'s, **merge** all the nodes lying in between them into a single node whose value is the **sum** of all the merged nodes. The modified list should not contain any `0`'s.\n\nReturn _the_ `head` _of the modified linked list_.\n\n"}
{"question": "You are given a string `s` and an integer `repeatLimit`. Construct a new string `repeatLimitedString` using the characters of `s` such that no letter appears **more than** `repeatLimit` times **in a row**. You do **not** have to use all characters from `s`.\n\nReturn _the **lexicographically largest**_ `repeatLimitedString` _possible_.\n\nA string `a` is **lexicographically larger** than a string `b` if in the first position where `a` and `b` differ, string `a` has a letter that appears later in the alphabet than the corresponding letter in `b`. If the first `min(a.length, b.length)` characters do not differ, then the longer string is the lexicographically larger one.\n\n"}
{"question": "You are given integers `height` and `width` which specify the dimensions of a brick wall you are building. You are also given a **0-indexed** array of **unique** integers `bricks`, where the `ith` brick has a height of `1` and a width of `bricks[i]`. You have an **infinite** supply of each type of brick and bricks may **not** be rotated.\n\nEach row in the wall must be exactly `width` units long. For the wall to be **sturdy**, adjacent rows in the wall should **not** join bricks at the same location, except at the ends of the wall.\n\nReturn _the number of ways to build a **sturdy** wall._ Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given two strings `s` and `t`. In one step, you can append **any character** to either `s` or `t`.\n\nReturn _the minimum number of steps to make_ `s` _and_ `t` _**anagrams** of each other._\n\nAn **anagram** of a string is a string that contains the same characters with a different (or the same) ordering.\n\n"}
{"question": "You are given an array `time` where `time[i]` denotes the time taken by the `ith` bus to complete **one trip**.\n\nEach bus can make multiple trips **successively**; that is, the next trip can start **immediately after** completing the current trip. Also, each bus operates **independently**; that is, the trips of one bus do not influence the trips of any other bus.\n\nYou are also given an integer `totalTrips`, which denotes the number of trips all buses should make **in total**. Return _the **minimum time** required for all buses to complete **at least**_ `totalTrips` _trips_.\n\n"}
{"question": "You are given an integer `n` representing the number of playing cards you have. A **house of cards** meets the following conditions:\n\n*   A **house of cards** consists of one or more rows of **triangles** and horizontal cards.\n*   **Triangles** are created by leaning two cards against each other.\n*   One card must be placed horizontally between **all adjacent** triangles in a row.\n*   Any triangle on a row higher than the first must be placed on a horizontal card from the previous row.\n*   Each triangle is placed in the **leftmost** available spot in the row.\n\nReturn _the number of **distinct** **house of cards** you can build using **all**_ `n` _cards._ Two houses of cards are considered distinct if there exists a row where the two houses contain a different number of cards.\n\n"}
{"question": "You are given a **0-indexed** integer array `mapping` which represents the mapping rule of a shuffled decimal system. `mapping[i] = j` means digit `i` should be mapped to digit `j` in this system.\n\nThe **mapped value** of an integer is the new integer obtained by replacing each occurrence of digit `i` in the integer with `mapping[i]` for all `0 <= i <= 9`.\n\nYou are also given another integer array `nums`. Return _the array_ `nums` _sorted in **non-decreasing** order based on the **mapped values** of its elements._\n\n**Notes:**\n\n*   Elements with the same mapped values should appear in the **same relative order** as in the input.\n*   The elements of `nums` should only be sorted based on their mapped values and **not be replaced** by them.\n\n"}
{"question": "You are given a positive integer `n` representing the number of nodes of a **Directed Acyclic Graph** (DAG). The nodes are numbered from `0` to `n - 1` (**inclusive**).\n\nYou are also given a 2D integer array `edges`, where `edges[i] = [fromi, toi]` denotes that there is a **unidirectional** edge from `fromi` to `toi` in the graph.\n\nReturn _a list_ `answer`_, where_ `answer[i]` _is the **list of ancestors** of the_ `ith` _node, sorted in **ascending order**_.\n\nA node `u` is an **ancestor** of another node `v` if `u` can reach `v` via a set of edges.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`. Append `k` **unique positive** integers that do **not** appear in `nums` to `nums` such that the resulting total sum is **minimum**.\n\nReturn _the sum of the_ `k` _integers appended to_ `nums`.\n\n"}
{"question": "You are given a 2D integer array `descriptions` where `descriptions[i] = [parenti, childi, isLefti]` indicates that `parenti` is the **parent** of `childi` in a **binary** tree of **unique** values. Furthermore,\n\n*   If `isLefti == 1`, then `childi` is the left child of `parenti`.\n*   If `isLefti == 0`, then `childi` is the right child of `parenti`.\n\nConstruct the binary tree described by `descriptions` and return _its **root**_.\n\nThe test cases will be generated such that the binary tree is **valid**.\n\n"}
{"question": "You are given a **0-indexed** array of positive integers `nums`. A triplet of three **distinct** indices `(i, j, k)` is called a **single divisor triplet** of `nums` if `nums[i] + nums[j] + nums[k]` is divisible by **exactly one** of `nums[i]`, `nums[j]`, or `nums[k]`.\n\nReturn _the number of **single divisor triplets** of_ `nums`_._\n\n"}
{"question": "There is an `n x n` **0-indexed** grid with some artifacts buried in it. You are given the integer `n` and a **0-indexed** 2D integer array `artifacts` describing the positions of the rectangular artifacts where `artifacts[i] = [r1i, c1i, r2i, c2i]` denotes that the `ith` artifact is buried in the subgrid where:\n\n*   `(r1i, c1i)` is the coordinate of the **top-left** cell of the `ith` artifact and\n*   `(r2i, c2i)` is the coordinate of the **bottom-right** cell of the `ith` artifact.\n\nYou will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.\n\nGiven a **0-indexed** 2D integer array `dig` where `dig[i] = [ri, ci]` indicates that you will excavate the cell `(ri, ci)`, return _the number of artifacts that you can extract_.\n\nThe test cases are generated such that:\n\n*   No two artifacts overlap.\n*   Each artifact only covers at most `4` cells.\n*   The entries of `dig` are unique.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` representing the contents of a **pile**, where `nums[0]` is the topmost element of the pile.\n\nIn one move, you can perform **either** of the following:\n\n*   If the pile is not empty, **remove** the topmost element of the pile.\n*   If there are one or more removed elements, **add** any one of them back onto the pile. This element becomes the new topmost element.\n\nYou are also given an integer `k`, which denotes the total number of moves to be made.\n\nReturn _the **maximum value** of the topmost element of the pile possible after **exactly**_ `k` _moves_. In case it is not possible to obtain a non-empty pile after `k` moves, return `-1`.\n\n"}
{"question": "You are given an array `nums` of positive integers. In one operation, you can choose **any** number from `nums` and reduce it to **exactly** half the number. (Note that you may choose this reduced number in future operations.)\n\nReturn _the **minimum** number of operations to reduce the sum of_ `nums` _by **at least** half._\n\n"}
{"question": "There are `n` cars on an infinitely long road. The cars are numbered from `0` to `n - 1` from left to right and each car is present at a **unique** point.\n\nYou are given a **0-indexed** string `directions` of length `n`. `directions[i]` can be either `'L'`, `'R'`, or `'S'` denoting whether the `ith` car is moving towards the **left**, towards the **right**, or **staying** at its current point respectively. Each moving car has the **same speed**.\n\nThe number of collisions can be calculated as follows:\n\n*   When two cars moving in **opposite** directions collide with each other, the number of collisions increases by `2`.\n*   When a moving car collides with a stationary car, the number of collisions increases by `1`.\n\nAfter a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.\n\nReturn _the **total number of collisions** that will happen on the road_.\n\n"}
{"question": "Alice and Bob are opponents in an archery competition. The competition has set the following rules:\n\n1.  Alice first shoots `numArrows` arrows and then Bob shoots `numArrows` arrows.\n2.  The points are then calculated as follows:\n    1.  The target has integer scoring sections ranging from `0` to `11` **inclusive**.\n    2.  For **each** section of the target with score `k` (in between `0` to `11`), say Alice and Bob have shot `ak` and `bk` arrows on that section respectively. If `ak >= bk`, then Alice takes `k` points. If `ak < bk`, then Bob takes `k` points.\n    3.  However, if `ak == bk == 0`, then **nobody** takes `k` points.\n\n*   For example, if Alice and Bob both shot `2` arrows on the section with score `11`, then Alice takes `11` points. On the other hand, if Alice shot `0` arrows on the section with score `11` and Bob shot `2` arrows on that same section, then Bob takes `11` points.\n    \n\nYou are given the integer `numArrows` and an integer array `aliceArrows` of size `12`, which represents the number of arrows Alice shot on each scoring section from `0` to `11`. Now, Bob wants to **maximize** the total number of points he can obtain.\n\nReturn _the array_ `bobArrows` _which represents the number of arrows Bob shot on **each** scoring section from_ `0` _to_ `11`. The sum of the values in `bobArrows` should equal `numArrows`.\n\nIf there are multiple ways for Bob to earn the maximum total points, return **any** one of them.\n\n"}
{"question": "You are playing a game that has `n` levels numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `damage` where `damage[i]` is the amount of health you will lose to complete the `ith` level.\n\nYou are also given an integer `armor`. You may use your armor ability **at most once** during the game on **any** level which will protect you from **at most** `armor` damage.\n\nYou must complete the levels in order and your health must be **greater than** `0` at all times to beat the game.\n\nReturn _the **minimum** health you need to start with to beat the game._\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. The array `nums` is **beautiful** if:\n\n*   `nums.length` is even.\n*   `nums[i] != nums[i + 1]` for all `i % 2 == 0`.\n\nNote that an empty array is considered beautiful.\n\nYou can delete any number of elements from `nums`. When you delete an element, all the elements to the right of the deleted element will be **shifted one unit to the left** to fill the gap created and all the elements to the left of the deleted element will remain **unchanged**.\n\nReturn _the **minimum** number of elements to delete from_ `nums` _to make it_ _beautiful._\n\n"}
{"question": "Given an integer array `queries` and a **positive** integer `intLength`, return _an array_ `answer` _where_ `answer[i]` _is either the_ `queries[i]th` _smallest **positive palindrome** of length_ `intLength` _or_ `-1` _if no such palindrome exists_.\n\nA **palindrome** is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`.\n\nThe **sum** **score** of `nums` at an index `i` where `0 <= i < n` is the **maximum** of:\n\n*   The sum of the **first** `i + 1` elements of `nums`.\n*   The sum of the **last** `n - i` elements of `nums`.\n\nReturn _the **maximum** **sum** **score** of_ `nums` _at any index._\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`, where `nums[i]` is a digit between `0` and `9` (**inclusive**).\n\nThe **triangular sum** of `nums` is the value of the only element present in `nums` after the following process terminates:\n\n1.  Let `nums` comprise of `n` elements. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n - 1`.\n2.  For each index `i`, where `0 <= i < n - 1`, **assign** the value of `newNums[i]` as `(nums[i] + nums[i+1]) % 10`, where `%` denotes modulo operator.\n3.  **Replace** the array `nums` with `newNums`.\n4.  **Repeat** the entire process starting from step 1.\n\nReturn _the triangular sum of_ `nums`.\n\n"}
{"question": "You are given a **0-indexed** binary string `s` which represents the types of buildings along a street where:\n\n*   `s[i] = '0'` denotes that the `ith` building is an office and\n*   `s[i] = '1'` denotes that the `ith` building is a restaurant.\n\nAs a city official, you would like to **select** 3 buildings for random inspection. However, to ensure variety, **no two consecutive** buildings out of the **selected** buildings can be of the same type.\n\n*   For example, given `s = \"0**0**1**1**0**1** \"`, we cannot select the `1st`, `3rd`, and `5th` buildings as that would form `\"0**11** \"` which is **not** allowed due to having two consecutive buildings of the same type.\n\nReturn _the **number of valid ways** to select 3 buildings._\n\n"}
{"question": "You are given an integer array `matches` where `matches[i] = [winneri, loseri]` indicates that the player `winneri` defeated player `loseri` in a match.\n\nReturn _a list_ `answer` _of size_ `2` _where:_\n\n*   `answer[0]` is a list of all players that have **not** lost any matches.\n*   `answer[1]` is a list of all players that have lost exactly **one** match.\n\nThe values in the two lists should be returned in **increasing** order.\n\n**Note:**\n\n*   You should only consider the players that have played **at least one** match.\n*   The testcases will be generated such that **no** two matches will have the **same** outcome.\n\n"}
{"question": "You are given a **0-indexed** integer array `candies`. Each element in the array denotes a pile of candies of size `candies[i]`. You can divide each pile into any number of **sub piles**, but you **cannot** merge two piles together.\n\nYou are also given an integer `k`. You should allocate piles of candies to `k` children such that each child gets the **same** number of candies. Each child can take **at most one** pile of candies and some piles of candies may go unused.\n\nReturn _the **maximum number of candies** each child can get._\n\n"}
{"question": "You are given a **0-indexed** string `expression` of the form `\"+ \"` where and represent positive integers.\n\nAdd a pair of parentheses to `expression` such that after the addition of parentheses, `expression` is a **valid** mathematical expression and evaluates to the **smallest** possible value. The left parenthesis **must** be added to the left of `'+'` and the right parenthesis **must** be added to the right of `'+'`.\n\nReturn `expression` _after adding a pair of parentheses such that_ `expression` _evaluates to the **smallest** possible value._ If there are multiple answers that yield the same result, return any of them.\n\nThe input has been generated such that the original value of `expression`, and the value of `expression` after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.\n\n"}
{"question": "You are given an array of non-negative integers `nums` and an integer `k`. In one operation, you may choose **any** element from `nums` and **increment** it by `1`.\n\nReturn _the **maximum** **product** of_ `nums` _after **at most**_ `k` _operations._ Since the answer may be very large, return it **modulo** `109 + 7`. Note that you should maximize the product before taking the modulo.\n\n"}
{"question": "You are given an integer `n`. A perfectly straight street is represented by a number line ranging from `0` to `n - 1`. You are given a 2D integer array `lights` representing the street lamp(s) on the street. Each `lights[i] = [positioni, rangei]` indicates that there is a street lamp at position `positioni` that lights up the area from `[max(0, positioni - rangei), min(n - 1, positioni + rangei)]` (**inclusive**).\n\nThe **brightness** of a position `p` is defined as the number of street lamps that light up the position `p`. You are given a **0-indexed** integer array `requirement` of size `n` where `requirement[i]` is the minimum **brightness** of the `ith` position on the street.\n\nReturn _the number of positions_ `i` _on the street between_ `0` _and_ `n - 1` _that have a **brightness**_ _of **at least**_ `requirement[i]`_._\n\n"}
{"question": "You are given an integer `total` indicating the amount of money you have. You are also given two integers `cost1` and `cost2` indicating the price of a pen and pencil respectively. You can spend **part or all** of your money to buy multiple quantities (or none) of each kind of writing utensil.\n\nReturn _the **number of distinct ways** you can buy some number of pens and pencils._\n\n"}
{"question": "There is an ATM machine that stores banknotes of `5` denominations: `20`, `50`, `100`, `200`, and `500` dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.\n\nWhen withdrawing, the machine prioritizes using banknotes of **larger** values.\n\n*   For example, if you want to withdraw `$300` and there are `2` `$50` banknotes, `1` `$100` banknote, and `1` `$200` banknote, then the machine will use the `$100` and `$200` banknotes.\n*   However, if you try to withdraw `$600` and there are `3` `$200` banknotes and `1` `$500` banknote, then the withdraw request will be rejected because the machine will first try to use the `$500` banknote and then be unable to use banknotes to complete the remaining `$100`. Note that the machine is **not** allowed to use the `$200` banknotes instead of the `$500` banknote.\n\nImplement the ATM class:\n\n*   `ATM()` Initializes the ATM object.\n*   `void deposit(int[] banknotesCount)` Deposits new banknotes in the order `$20`, `$50`, `$100`, `$200`, and `$500`.\n*   `int[] withdraw(int amount)` Returns an array of length `5` of the number of banknotes that will be handed to the user in the order `$20`, `$50`, `$100`, `$200`, and `$500`, and update the number of banknotes in the ATM after withdrawing. Returns `[-1]` if it is not possible (do **not** withdraw any banknotes in this case).\n\n"}
{"question": "You are given a **0-indexed** integer array `tasks`, where `tasks[i]` represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the **same difficulty level**.\n\nReturn _the **minimum** rounds required to complete all the tasks, or_ `-1` _if it is not possible to complete all the tasks._\n\n"}
{"question": "You are given a 2D integer array `grid` of size `m x n`, where each cell contains a positive integer.\n\nA **cornered path** is defined as a set of adjacent cells with **at most** one turn. More specifically, the path should exclusively move either **horizontally** or **vertically** up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the **alternate** direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.\n\nThe **product** of a path is defined as the product of all the values in the path.\n\nReturn _the **maximum** number of **trailing zeros** in the product of a cornered path found in_ `grid`.\n\nNote:\n\n*   **Horizontal** movement means moving in either the left or right direction.\n*   **Vertical** movement means moving in either the up or down direction.\n\n"}
{"question": "Given a 2D integer array `circles` where `circles[i] = [xi, yi, ri]` represents the center `(xi, yi)` and radius `ri` of the `ith` circle drawn on a grid, return _the **number of lattice points**_ _that are present inside **at least one** circle_.\n\n**Note:**\n\n*   A **lattice point** is a point with integer coordinates.\n*   Points that lie **on the circumference of a circle** are also considered to be inside it.\n\n"}
{"question": "You are given a 2D integer array `rectangles` where `rectangles[i] = [li, hi]` indicates that `ith` rectangle has a length of `li` and a height of `hi`. You are also given a 2D integer array `points` where `points[j] = [xj, yj]` is a point with coordinates `(xj, yj)`.\n\nThe `ith` rectangle has its **bottom-left corner** point at the coordinates `(0, 0)` and its **top-right corner** point at `(li, hi)`.\n\nReturn _an integer array_ `count` _of length_ `points.length` _where_ `count[j]` _is the number of rectangles that **contain** the_ `jth` _point._\n\nThe `ith` rectangle **contains** the `jth` point if `0 <= xj <= li` and `0 <= yj <= hi`. Note that points that lie on the **edges** of a rectangle are also considered to be contained by that rectangle.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`.\n\nThe **average difference** of the index `i` is the **absolute** **difference** between the average of the **first** `i + 1` elements of `nums` and the average of the **last** `n - i - 1` elements. Both averages should be **rounded down** to the nearest integer.\n\nReturn _the index with the **minimum average difference**_. If there are multiple such indices, return the **smallest** one.\n\n**Note:**\n\n*   The **absolute difference** of two numbers is the absolute value of their difference.\n*   The **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`.\n*   The average of `0` elements is considered to be `0`.\n\n"}
{"question": "You are given two integers `m` and `n` representing a **0-indexed** `m x n` grid. You are also given two 2D integer arrays `guards` and `walls` where `guards[i] = [rowi, coli]` and `walls[j] = [rowj, colj]` represent the positions of the `ith` guard and `jth` wall respectively.\n\nA guard can see **every** cell in the four cardinal directions (north, east, south, or west) starting from their position unless **obstructed** by a wall or another guard. A cell is **guarded** if there is **at least** one guard that can see it.\n\nReturn _the number of unoccupied cells that are **not** **guarded**._\n\n"}
{"question": "You are given an integer array `cards` where `cards[i]` represents the **value** of the `ith` card. A pair of cards are **matching** if the cards have the **same** value.\n\nReturn _the **minimum** number of **consecutive** cards you have to pick up to have a pair of **matching** cards among the picked cards._ If it is impossible to have matching cards, return `-1`.\n\n"}
{"question": "Given an integer array `nums` and two integers `k` and `p`, return _the number of **distinct subarrays** which have **at most**_ `k` _elements divisible by_ `p`.\n\nTwo arrays `nums1` and `nums2` are said to be **distinct** if:\n\n*   They are of **different** lengths, or\n*   There exists **at least** one index `i` where `nums1[i] != nums2[i]`.\n\nA **subarray** is defined as a **non-empty** contiguous sequence of elements in an array.\n\n"}
{"question": "Given the `root` of a binary tree, return _the number of nodes where the value of the node is equal to the **average** of the values in its **subtree**_.\n\n**Note:**\n\n*   The **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.\n*   A **subtree** of `root` is a tree consisting of `root` and all of its descendants.\n\n"}
{"question": "Alice is texting Bob using her phone. The **mapping** of digits to letters is shown in the figure below.\n\nIn order to **add** a letter, Alice has to **press** the key of the corresponding digit `i` times, where `i` is the position of the letter in the key.\n\n*   For example, to add the letter `'s'`, Alice has to press `'7'` four times. Similarly, to add the letter `'k'`, Alice has to press `'5'` twice.\n*   Note that the digits `'0'` and `'1'` do not map to any letters, so Alice **does not** use them.\n\nHowever, due to an error in transmission, Bob did not receive Alice's text message but received a **string of pressed keys** instead.\n\n*   For example, when Alice sent the message `\"bob \"`, Bob received the string `\"2266622 \"`.\n\nGiven a string `pressedKeys` representing the string received by Bob, return _the **total number of possible text messages** Alice could have sent_.\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You have a keypad with `9` buttons, numbered from `1` to `9`, each mapped to lowercase English letters. You can choose which characters each button is matched to as long as:\n\n*   All 26 lowercase English letters are mapped to.\n*   Each character is mapped to by **exactly** `1` button.\n*   Each button maps to **at most** `3` characters.\n\nTo type the first character matched to a button, you press the button once. To type the second character, you press the button twice, and so on.\n\nGiven a string `s`, return _the **minimum** number of keypresses needed to type_ `s` _using your keypad._\n\n**Note** that the characters mapped to by each button, and the order they are mapped in cannot be changed.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`.\n\n`nums` contains a **valid split** at index `i` if the following are true:\n\n*   The sum of the first `i + 1` elements is **greater than or equal to** the sum of the last `n - i - 1` elements.\n*   There is **at least one** element to the right of `i`. That is, `0 <= i < n - 1`.\n\nReturn _the number of **valid splits** in_ `nums`.\n\n"}
{"question": "You are given a 2D integer array `tiles` where `tiles[i] = [li, ri]` represents that every tile `j` in the range `li <= j <= ri` is colored white.\n\nYou are also given an integer `carpetLen`, the length of a single carpet that can be placed **anywhere**.\n\nReturn _the **maximum** number of white tiles that can be covered by the carpet_.\n\n"}
{"question": "Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be **special floors**, used for relaxation only.\n\nYou are given two integers `bottom` and `top`, which denote that Alice has rented all the floors from `bottom` to `top` (**inclusive**). You are also given the integer array `special`, where `special[i]` denotes a special floor that Alice has designated for relaxation.\n\nReturn _the **maximum** number of consecutive floors without a special floor_.\n\n"}
{"question": "The **bitwise AND** of an array `nums` is the bitwise AND of all integers in `nums`.\n\n*   For example, for `nums = [1, 5, 3]`, the bitwise AND is equal to `1 & 5 & 3 = 1`.\n*   Also, for `nums = [7]`, the bitwise AND is `7`.\n\nYou are given an array of positive integers `candidates`. Evaluate the **bitwise AND** of every **combination** of numbers of `candidates`. Each number in `candidates` may only be used **once** in each combination.\n\nReturn _the size of the **largest** combination of_ `candidates` _with a bitwise AND **greater** than_ `0`.\n\n"}
{"question": "You have `n` bags numbered from `0` to `n - 1`. You are given two **0-indexed** integer arrays `capacity` and `rocks`. The `ith` bag can hold a maximum of `capacity[i]` rocks and currently contains `rocks[i]` rocks. You are also given an integer `additionalRocks`, the number of additional rocks you can place in **any** of the bags.\n\nReturn _the **maximum** number of bags that could have full capacity after placing the additional rocks in some bags._\n\n"}
{"question": "You are given a 2D integer array `stockPrices` where `stockPrices[i] = [dayi, pricei]` indicates the price of the stock on day `dayi` is `pricei`. A **line chart** is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:\n\nReturn _the **minimum number of lines** needed to represent the line chart_.\n\n"}
{"question": "You are given an `m x n` **0-indexed** 2D array of positive integers `heights` where `heights[i][j]` is the height of the person standing at position `(i, j)`.\n\nA person standing at position `(row1, col1)` can see a person standing at position `(row2, col2)` if:\n\n*   The person at `(row2, col2)` is to the right **or** below the person at `(row1, col1)`. More formally, this means that either `row1 == row2` and `col1 < col2` **or** `row1 < row2` and `col1 == col2`.\n*   Everyone in between them is shorter than **both** of them.\n\nReturn _an_ `m x n` _2D array of integers_ `answer` _where_ `answer[i][j]` _is the number of people that the person at position_ `(i, j)` _can see._\n\n"}
{"question": "You have a chat log of `n` messages. You are given two string arrays `messages` and `senders` where `messages[i]` is a **message** sent by `senders[i]`.\n\nA **message** is list of **words** that are separated by a single space with no leading or trailing spaces. The **word count** of a sender is the total number of **words** sent by the sender. Note that a sender may send more than one message.\n\nReturn _the sender with the **largest** word count_. If there is more than one sender with the largest word count, return _the one with the **lexicographically largest** name_.\n\n**Note:**\n\n*   Uppercase letters come before lowercase letters in lexicographical order.\n*   `\"Alice \"` and `\"alice \"` are distinct.\n\n"}
{"question": "You are given an integer `n` denoting the number of cities in a country. The cities are numbered from `0` to `n - 1`.\n\nYou are also given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional** road connecting cities `ai` and `bi`.\n\nYou need to assign each city with an integer value from `1` to `n`, where each value can only be used **once**. The **importance** of a road is then defined as the **sum** of the values of the two cities it connects.\n\nReturn _the **maximum total importance** of all roads possible after assigning the values optimally._\n\n"}
{"question": "A **sentence** is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign `'$'`. A word represents a **price** if it is a sequence of digits preceded by a dollar sign.\n\n*   For example, `\"$100 \"`, `\"$23 \"`, and `\"$6 \"` represent prices while `\"100 \"`, `\"$ \"`, and `\"$1e5 \"` do not.\n\nYou are given a string `sentence` representing a sentence and an integer `discount`. For each word representing a price, apply a discount of `discount%` on the price and **update** the word in the sentence. All updated prices should be represented with **exactly two** decimal places.\n\nReturn _a string representing the modified sentence_.\n\nNote that all prices will contain **at most** `10` digits.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. In one step, **remove** all elements `nums[i]` where `nums[i - 1] > nums[i]` for all `0 < i < nums.length`.\n\nReturn _the number of steps performed until_ `nums` _becomes a **non-decreasing** array_.\n\n"}
{"question": "You are given two **0-indexed** integer arrays of the same length `present` and `future` where `present[i]` is the current price of the `ith` stock and `future[i]` is the price of the `ith` stock a year in the future. You may buy each stock at most **once**. You are also given an integer `budget` representing the amount of money you currently have.\n\nReturn _the maximum amount of profit you can make._\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`. You may partition `nums` into one or more **subsequences** such that each element in `nums` appears in **exactly** one of the subsequences.\n\nReturn _the **minimum** number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is **at most**_ `k`_._\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given a **0-indexed** array `nums` that consists of `n` **distinct** positive integers. Apply `m` operations to this array, where in the `ith` operation you replace the number `operations[i][0]` with `operations[i][1]`.\n\nIt is guaranteed that in the `ith` operation:\n\n*   `operations[i][0]` **exists** in `nums`.\n*   `operations[i][1]` does **not** exist in `nums`.\n\nReturn _the array obtained after applying all the operations_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`. You are initially standing at index `0`. You can jump from index `i` to index `j` where `i < j` if:\n\n*   `nums[i] <= nums[j]` and `nums[k] < nums[i]` for all indexes `k` in the range `i < k < j`, or\n*   `nums[i] > nums[j]` and `nums[k] >= nums[i]` for all indexes `k` in the range `i < k < j`.\n\nYou are also given an integer array `costs` of length `n` where `costs[i]` denotes the cost of jumping **to** index `i`.\n\nReturn _the **minimum** cost to jump to the index_ `n - 1`.\n\n"}
{"question": "You are given two positive integer arrays `spells` and `potions`, of length `n` and `m` respectively, where `spells[i]` represents the strength of the `ith` spell and `potions[j]` represents the strength of the `jth` potion.\n\nYou are also given an integer `success`. A spell and potion pair is considered **successful** if the **product** of their strengths is **at least** `success`.\n\nReturn _an integer array_ `pairs` _of length_ `n` _where_ `pairs[i]` _is the number of **potions** that will form a successful pair with the_ `ith` _spell._\n\n"}
{"question": "You are given a **0-indexed** `m x n` integer matrix `grid` consisting of **distinct** integers from `0` to `m * n - 1`. You can move in this matrix from a cell to any other cell in the **next** row. That is, if you are in cell `(x, y)` such that `x < m - 1`, you can move to any of the cells `(x + 1, 0)`, `(x + 1, 1)`, ..., `(x + 1, n - 1)`. **Note** that it is not possible to move from cells in the last row.\n\nEach possible move has a cost given by a **0-indexed** 2D array `moveCost` of size `(m * n) x n`, where `moveCost[i][j]` is the cost of moving from a cell with value `i` to a cell in column `j` of the next row. The cost of moving from cells in the last row of `grid` can be ignored.\n\nThe cost of a path in `grid` is the **sum** of all values of cells visited plus the **sum** of costs of all the moves made. Return _the **minimum** cost of a path that starts from any cell in the **first** row and ends at any cell in the **last** row._\n\n"}
{"question": "You are given an integer array `cookies`, where `cookies[i]` denotes the number of cookies in the `ith` bag. You are also given an integer `k` that denotes the number of children to distribute **all** the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\n\nThe **unfairness** of a distribution is defined as the **maximum** **total** cookies obtained by a single child in the distribution.\n\nReturn _the **minimum** unfairness of all distributions_.\n\n"}
{"question": "Given two integers `num` and `k`, consider a set of positive integers with the following properties:\n\n*   The units digit of each integer is `k`.\n*   The sum of the integers is `num`.\n\nReturn _the **minimum** possible size of such a set, or_ `-1` _if no such set exists._\n\nNote:\n\n*   The set can contain multiple instances of the same integer, and the sum of an empty set is considered `0`.\n*   The **units digit** of a number is the rightmost digit of the number.\n\n"}
{"question": "You are given a binary string `s` and a positive integer `k`.\n\nReturn _the length of the **longest** subsequence of_ `s` _that makes up a **binary** number less than or equal to_ `k`.\n\nNote:\n\n*   The subsequence can contain **leading zeroes**.\n*   The empty string is considered to be equal to `0`.\n*   A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n"}
{"question": "You are given an integer `n`. There is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`. You are given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\nReturn _the **number of pairs** of different nodes that are **unreachable** from each other_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. In one operation, select **any** non-negative integer `x` and an index `i`, then **update** `nums[i]` to be equal to `nums[i] AND (nums[i] XOR x)`.\n\nNote that `AND` is the bitwise AND operation and `XOR` is the bitwise XOR operation.\n\nReturn _the **maximum** possible bitwise XOR of all elements of_ `nums` _after applying the operation **any number** of times_.\n\n"}
{"question": "There is a street with `n * 2` **plots**, where there are `n` plots on each side of the street. The plots on each side are numbered from `1` to `n`. On each plot, a house can be placed.\n\nReturn _the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nNote that if a house is placed on the `ith` plot on one side of the street, a house can also be placed on the `ith` plot on the other side of the street.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `jobs` and `workers` of **equal** length, where `jobs[i]` is the amount of time needed to complete the `ith` job, and `workers[j]` is the amount of time the `jth` worker can work each day.\n\nEach job should be assigned to **exactly** one worker, such that each worker completes **exactly** one job.\n\nReturn _the **minimum** number of days needed to complete all the jobs after assignment._\n\n"}
{"question": "You are given two integers `m` and `n`, which represent the dimensions of a matrix.\n\nYou are also given the `head` of a linked list of integers.\n\nGenerate an `m x n` matrix that contains the integers in the linked list presented in **spiral** order **(clockwise)**, starting from the **top-left** of the matrix. If there are remaining empty spaces, fill them with `-1`.\n\nReturn _the generated matrix_.\n\n"}
{"question": "On day `1`, one person discovers a secret.\n\nYou are given an integer `delay`, which means that each person will **share** the secret with a new person **every day**, starting from `delay` days after discovering the secret. You are also given an integer `forget`, which means that each person will **forget** the secret `forget` days after discovering it. A person **cannot** share the secret on the same day they forgot it, or on any day afterwards.\n\nGiven an integer `n`, return _the number of people who know the secret at the end of day_ `n`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given a **0-indexed** string `s` consisting of only lowercase English letters. In one operation, you can change **any** character of `s` to any **other** character.\n\nReturn `true` _if you can make_ `s` _a palindrome after performing **exactly** one or two operations, or return_ `false` _otherwise._\n\n"}
{"question": "You are given a **0-indexed** integer array `buses` of length `n`, where `buses[i]` represents the departure time of the `ith` bus. You are also given a **0-indexed** integer array `passengers` of length `m`, where `passengers[j]` represents the arrival time of the `jth` passenger. All bus departure times are unique. All passenger arrival times are unique.\n\nYou are given an integer `capacity`, which represents the **maximum** number of passengers that can get on each bus.\n\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at `x` minutes if you arrive at `y` minutes where `y <= x`, and the bus is not full. Passengers with the **earliest** arrival times get on the bus first.\n\nMore formally when a bus arrives, either:\n\n*   If `capacity` or fewer passengers are waiting for a bus, they will **all** get on the bus, or\n*   The `capacity` passengers with the **earliest** arrival times will get on the bus.\n\nReturn _the latest time you may arrive at the bus station to catch a bus_. You **cannot** arrive at the same time as another passenger.\n\n**Note:** The arrays `buses` and `passengers` are not necessarily sorted.\n\n"}
{"question": "You are given two positive **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`.\n\nThe **sum of squared difference** of arrays `nums1` and `nums2` is defined as the **sum** of `(nums1[i] - nums2[i])2` for each `0 <= i < n`.\n\nYou are also given two positive integers `k1` and `k2`. You can modify any of the elements of `nums1` by `+1` or `-1` at most `k1` times. Similarly, you can modify any of the elements of `nums2` by `+1` or `-1` at most `k2` times.\n\nReturn _the minimum **sum of squared difference** after modifying array_ `nums1` _at most_ `k1` _times and modifying array_ `nums2` _at most_ `k2` _times_.\n\n**Note**: You are allowed to modify the array elements to become **negative** integers.\n\n"}
{"question": "You have a set which contains all positive integers `[1, 2, 3, 4, 5, ...]`.\n\nImplement the `SmallestInfiniteSet` class:\n\n*   `SmallestInfiniteSet()` Initializes the **SmallestInfiniteSet** object to contain **all** positive integers.\n*   `int popSmallest()` **Removes** and returns the smallest integer contained in the infinite set.\n*   `void addBack(int num)` **Adds** a positive integer `num` back into the infinite set, if it is **not** already in the infinite set.\n\n"}
{"question": "You are given two strings `start` and `target`, both of length `n`. Each string consists **only** of the characters `'L'`, `'R'`, and `'_'` where:\n\n*   The characters `'L'` and `'R'` represent pieces, where a piece `'L'` can move to the **left** only if there is a **blank** space directly to its left, and a piece `'R'` can move to the **right** only if there is a **blank** space directly to its right.\n*   The character `'_'` represents a blank space that can be occupied by **any** of the `'L'` or `'R'` pieces.\n\nReturn `true` _if it is possible to obtain the string_ `target` _by moving the pieces of the string_ `start` _**any** number of times_. Otherwise, return `false`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`.\n\n**Swaps** of **adjacent** elements are able to be performed on `nums`.\n\nA **valid** array meets the following conditions:\n\n*   The largest element (any of the largest elements if there are multiple) is at the rightmost position in the array.\n*   The smallest element (any of the smallest elements if there are multiple) is at the leftmost position in the array.\n\nReturn _the **minimum** swaps required to make_ `nums` _a valid array_.\n\n"}
{"question": "You are given a **0-indexed** array `nums` consisting of **positive** integers. You can choose two indices `i` and `j`, such that `i != j`, and the sum of digits of the number `nums[i]` is equal to that of `nums[j]`.\n\nReturn _the **maximum** value of_ `nums[i] + nums[j]` _that you can obtain over all possible indices_ `i` _and_ `j` _that satisfy the conditions._\n\n"}
{"question": "You are given a **0-indexed** array of strings `nums`, where each string is of **equal length** and consists of only digits.\n\nYou are also given a **0-indexed** 2D integer array `queries` where `queries[i] = [ki, trimi]`. For each `queries[i]`, you need to:\n\n*   **Trim** each number in `nums` to its **rightmost** `trimi` digits.\n*   Determine the **index** of the `kith` smallest trimmed number in `nums`. If two trimmed numbers are equal, the number with the **lower** index is considered to be smaller.\n*   Reset each number in `nums` to its original length.\n\nReturn _an array_ `answer` _of the same length as_ `queries`, _where_ `answer[i]` _is the answer to the_ `ith` _query._\n\n**Note**:\n\n*   To trim to the rightmost `x` digits means to keep removing the leftmost digit, until only `x` digits remain.\n*   Strings in `nums` may contain leading zeros.\n\n"}
{"question": "You are given a **0-indexed** 2D integer array `peaks` where `peaks[i] = [xi, yi]` states that mountain `i` has a peak at coordinates `(xi, yi)`. A mountain can be described as a right-angled isosceles triangle, with its base along the `x`\\-axis and a right angle at its peak. More formally, the **gradients** of ascending and descending the mountain are `1` and `-1` respectively.\n\nA mountain is considered **visible** if its peak does not lie within another mountain (including the border of other mountains).\n\nReturn _the number of visible mountains_.\n\n"}
{"question": "Given an integer array `nums`, return _the number of **subarrays** filled with_ `0`.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n"}
{"question": "Design a number container system that can do the following:\n\n*   **Insert** or **Replace** a number at the given index in the system.\n*   **Return** the smallest index for the given number in the system.\n\nImplement the `NumberContainers` class:\n\n*   `NumberContainers()` Initializes the number container system.\n*   `void change(int index, int number)` Fills the container at `index` with the `number`. If there is already a number at that `index`, replace it.\n*   `int find(int number)` Returns the smallest index for the given `number`, or `-1` if there is no index that is filled by `number` in the system.\n\n"}
{"question": "Given a **0-indexed** `n x n` integer matrix `grid`, _return the number of pairs_ `(ri, cj)` _such that row_ `ri` _and column_ `cj` _are equal_.\n\nA row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).\n\n"}
{"question": "Design a food rating system that can do the following:\n\n*   **Modify** the rating of a food item listed in the system.\n*   Return the highest-rated food item for a type of cuisine in the system.\n\nImplement the `FoodRatings` class:\n\n*   `FoodRatings(String[] foods, String[] cuisines, int[] ratings)` Initializes the system. The food items are described by `foods`, `cuisines` and `ratings`, all of which have a length of `n`.\n    *   `foods[i]` is the name of the `ith` food,\n    *   `cuisines[i]` is the type of cuisine of the `ith` food, and\n    *   `ratings[i]` is the initial rating of the `ith` food.\n*   `void changeRating(String food, int newRating)` Changes the rating of the food item with the name `food`.\n*   `String highestRated(String cuisine)` Returns the name of the food item that has the highest rating for the given type of `cuisine`. If there is a tie, return the item with the **lexicographically smaller** name.\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n"}
{"question": "You are given a positive integer array `grades` which represents the grades of students in a university. You would like to enter **all** these students into a competition in **ordered** non-empty groups, such that the ordering meets the following conditions:\n\n*   The sum of the grades of students in the `ith` group is **less than** the sum of the grades of students in the `(i + 1)th` group, for all groups (except the last).\n*   The total number of students in the `ith` group is **less than** the total number of students in the `(i + 1)th` group, for all groups (except the last).\n\nReturn _the **maximum** number of groups that can be formed_.\n\n"}
{"question": "You are given a **directed** graph of `n` nodes numbered from `0` to `n - 1`, where each node has **at most one** outgoing edge.\n\nThe graph is represented with a given **0-indexed** array `edges` of size `n`, indicating that there is a directed edge from node `i` to node `edges[i]`. If there is no outgoing edge from `i`, then `edges[i] == -1`.\n\nYou are also given two integers `node1` and `node2`.\n\nReturn _the **index** of the node that can be reached from both_ `node1` _and_ `node2`_, such that the **maximum** between the distance from_ `node1` _to that node, and from_ `node2` _to that node is **minimized**_. If there are multiple answers, return the node with the **smallest** index, and if no possible answer exists, return `-1`.\n\nNote that `edges` may contain cycles.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. A pair of indices `(i, j)` is a **bad pair** if `i < j` and `j - i != nums[j] - nums[i]`.\n\nReturn _the total number of **bad pairs** in_ `nums`.\n\n"}
{"question": "You are given a **0-indexed** array of positive integers `tasks`, representing tasks that need to be completed **in order**, where `tasks[i]` represents the **type** of the `ith` task.\n\nYou are also given a positive integer `space`, which represents the **minimum** number of days that must pass **after** the completion of a task before another task of the **same** type can be performed.\n\nEach day, until all tasks have been completed, you must either:\n\n*   Complete the next task from `tasks`, or\n*   Take a break.\n\nReturn _the **minimum** number of days needed to complete all tasks_.\n\n"}
{"question": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges.\n\nYou are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. You are also given an integer array `restricted` which represents **restricted** nodes.\n\nReturn _the **maximum** number of nodes you can reach from node_ `0` _without visiting a restricted node._\n\nNote that node `0` will **not** be a restricted node.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. You have to partition the array into one or more **contiguous** subarrays.\n\nWe call a partition of the array **valid** if each of the obtained subarrays satisfies **one** of the following conditions:\n\n1.  The subarray consists of **exactly** `2` equal elements. For example, the subarray `[2,2]` is good.\n2.  The subarray consists of **exactly** `3` equal elements. For example, the subarray `[4,4,4]` is good.\n3.  The subarray consists of **exactly** `3` consecutive increasing elements, that is, the difference between adjacent elements is `1`. For example, the subarray `[3,4,5]` is good, but the subarray `[1,3,5]` is not.\n\nReturn `true` _if the array has **at least** one valid partition_. Otherwise, return `false`.\n\n"}
{"question": "You are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n*   `t` is a **subsequence** of the string `s`.\n*   The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\nReturn _the length of the **longest** ideal string_.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n**Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n"}
{"question": "You are given a directed graph with `n` nodes labeled from `0` to `n - 1`, where each node has **exactly one** outgoing edge.\n\nThe graph is represented by a given **0-indexed** integer array `edges` of length `n`, where `edges[i]` indicates that there is a **directed** edge from node `i` to node `edges[i]`.\n\nThe **edge score** of a node `i` is defined as the sum of the **labels** of all the nodes that have an edge pointing to `i`.\n\nReturn _the node with the highest **edge score**_. If multiple nodes have the same **edge score**, return the node with the **smallest** index.\n\n"}
{"question": "You are given a **0-indexed** string `pattern` of length `n` consisting of the characters `'I'` meaning **increasing** and `'D'` meaning **decreasing**.\n\nA **0-indexed** string `num` of length `n + 1` is created using the following conditions:\n\n*   `num` consists of the digits `'1'` to `'9'`, where each digit is used **at most** once.\n*   If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`.\n*   If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`.\n\nReturn _the lexicographically **smallest** possible string_ `num` _that meets the conditions._\n\n"}
{"question": "You are given a **weighted** tree consisting of `n` nodes numbered from `0` to `n - 1`.\n\nThe tree is **rooted** at node `0` and represented with a **2D** array `edges` of size `n` where `edges[i] = [pari, weighti]` indicates that node `pari` is the **parent** of node `i`, and the edge between them has a weight equal to `weighti`. Since the root does **not** have a parent, you have `edges[0] = [-1, -1]`.\n\nChoose some edges from the tree such that no two chosen edges are **adjacent** and the **sum** of the weights of the chosen edges is maximized.\n\nReturn _the **maximum** sum of the chosen edges_.\n\n**Note**:\n\n*   You are allowed to **not** choose any edges in the tree, the sum of weights in this case will be `0`.\n*   Two edges `Edge1` and `Edge2` in the tree are **adjacent** if they have a **common** node.\n    *   In other words, they are adjacent if `Edge1` connects nodes `a` and `b` and `Edge2` connects nodes `b` and `c`.\n\n"}
{"question": "You are given a binary string `s`. In one second, **all** occurrences of `\"01 \"` are **simultaneously** replaced with `\"10 \"`. This process **repeats** until no occurrences of `\"01 \"` exist.\n\nReturn _the number of seconds needed to complete this process._\n\n"}
{"question": "You are given a string `s` of lowercase English letters and a 2D integer array `shifts` where `shifts[i] = [starti, endi, directioni]`. For every `i`, **shift** the characters in `s` from the index `starti` to the index `endi` (**inclusive**) forward if `directioni = 1`, or shift the characters backward if `directioni = 0`.\n\nShifting a character **forward** means replacing it with the **next** letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Similarly, shifting a character **backward** means replacing it with the **previous** letter in the alphabet (wrapping around so that `'a'` becomes `'z'`).\n\nReturn _the final string after all such shifts to_ `s` _are applied_.\n\n"}
{"question": "You are given a string `num` consisting of digits only.\n\nReturn _the **largest palindromic** integer (in the form of a string) that can be formed using digits taken from_ `num`. It should not contain **leading zeroes**.\n\n**Notes:**\n\n*   You do **not** need to use all the digits of `num`, but you must use **at least** one digit.\n*   The digits can be reordered.\n\n"}
{"question": "You are given the `root` of a binary tree with **unique** values, and an integer `start`. At minute `0`, an **infection** starts from the node with value `start`.\n\nEach minute, a node becomes infected if:\n\n*   The node is currently uninfected.\n*   The node is adjacent to an infected node.\n\nReturn _the number of minutes needed for the entire tree to be infected._\n\n"}
{"question": "Given an `m x n` matrix `grid` containing an **odd** number of integers where each row is sorted in **non-decreasing** order, return _the **median** of the matrix_.\n\nYou must solve the problem in less than `O(m * n)` time complexity.\n\n"}
{"question": "You are given a string `s`, which contains stars `*`.\n\nIn one operation, you can:\n\n*   Choose a star in `s`.\n*   Remove the closest **non-star** character to its **left**, as well as remove the star itself.\n\nReturn _the string after **all** stars have been removed_.\n\n**Note:**\n\n*   The input will be generated such that the operation is always possible.\n*   It can be shown that the resulting string will always be unique.\n\n"}
{"question": "You are given a **0-indexed** array of strings `garbage` where `garbage[i]` represents the assortment of garbage at the `ith` house. `garbage[i]` consists only of the characters `'M'`, `'P'` and `'G'` representing one unit of metal, paper and glass garbage respectively. Picking up **one** unit of any type of garbage takes `1` minute.\n\nYou are also given a **0-indexed** integer array `travel` where `travel[i]` is the number of minutes needed to go from house `i` to house `i + 1`.\n\nThere are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house `0` and must visit each house **in order**; however, they do **not** need to visit every house.\n\nOnly **one** garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks **cannot** do anything.\n\nReturn _the **minimum** number of minutes needed to pick up all the garbage._\n\n"}
{"question": "You are given an array `nums` consisting of **positive** integers.\n\nReturn _the number of **subarrays** of_ `nums` _that are in **strictly increasing** order._\n\nA **subarray** is a **contiguous** part of an array.\n\n"}
{"question": "An integer `n` is **strictly palindromic** if, for **every** base `b` between `2` and `n - 2` (**inclusive**), the string representation of the integer `n` in base `b` is **palindromic**.\n\nGiven an integer `n`, return `true` _if_ `n` _is **strictly palindromic** and_ `false` _otherwise_.\n\nA string is **palindromic** if it reads the same forward and backward.\n\n"}
{"question": "You are given a **0-indexed** `m x n` binary matrix `matrix` and an integer `numSelect`, which denotes the number of **distinct** columns you must select from `matrix`.\n\nLet us consider `s = {c1, c2, ...., cnumSelect}` as the set of columns selected by you. A row `row` is **covered** by `s` if:\n\n*   For each cell `matrix[row][col]` (`0 <= col <= n - 1`) where `matrix[row][col] == 1`, `col` is present in `s` or,\n*   **No cell** in `row` has a value of `1`.\n\nYou need to choose `numSelect` columns such that the number of rows that are covered is **maximized**.\n\nReturn _the **maximum** number of rows that can be **covered** by a set of_ `numSelect` _columns._\n\n"}
{"question": "You are given two **positive** integers `startPos` and `endPos`. Initially, you are standing at position `startPos` on an **infinite** number line. With one step, you can move either one position to the left, or one position to the right.\n\nGiven a positive integer `k`, return _the number of **different** ways to reach the position_ `endPos` _starting from_ `startPos`_, such that you perform **exactly**_ `k` _steps_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\nTwo ways are considered different if the order of the steps made is not exactly the same.\n\n**Note** that the number line includes negative integers.\n\n"}
{"question": "You are given an array `nums` consisting of **positive** integers.\n\nWe call a subarray of `nums` **nice** if the bitwise **AND** of every pair of elements that are in **different** positions in the subarray is equal to `0`.\n\nReturn _the length of the **longest** nice subarray_.\n\nA **subarray** is a **contiguous** part of an array.\n\n**Note** that subarrays of length `1` are always considered nice.\n\n"}
{"question": "Given a string `s`, partition the string into one or more **substrings** such that the characters in each substring are **unique**. That is, no letter appears in a single substring more than **once**.\n\nReturn _the **minimum** number of substrings in such a partition._\n\nNote that each character should belong to exactly one substring in a partition.\n\n"}
{"question": "You are given a 2D integer array `intervals` where `intervals[i] = [lefti, righti]` represents the **inclusive** interval `[lefti, righti]`.\n\nYou have to divide the intervals into one or more **groups** such that each interval is in **exactly** one group, and no two intervals that are in the same group **intersect** each other.\n\nReturn _the **minimum** number of groups you need to make_.\n\nTwo intervals **intersect** if there is at least one common number between them. For example, the intervals `[1, 5]` and `[5, 8]` intersect.\n\n"}
{"question": "You are given `n` tables represented with two arrays `names` and `columns`, where `names[i]` is the name of the `ith` table and `columns[i]` is the number of columns of the `ith` table.\n\nYou should be able to perform the following **operations**:\n\n*   **Insert** a row in a specific table. Each row you insert has an id. The id is assigned using an auto-increment method where the id of the first inserted row is 1, and the id of each other row inserted into the same table is the id of the last inserted row (even if it was deleted) plus one.\n*   **Delete** a row from a specific table. **Note** that deleting a row does not affect the id of the next inserted row.\n*   **Select** a specific cell from any table and return its value.\n\nImplement the `SQL` class:\n\n*   `SQL(String[] names, int[] columns)` Creates the `n` tables.\n*   `void insertRow(String name, String[] row)` Adds a row to the table `name`. It is **guaranteed** that the table will exist, and the size of the array `row` is equal to the number of columns in the table.\n*   `void deleteRow(String name, int rowId)` Removes the row `rowId` from the table `name`. It is **guaranteed** that the table and row will **exist**.\n*   `String selectCell(String name, int rowId, int columnId)` Returns the value of the cell in the row `rowId` and the column `columnId` from the table `name`.\n\n"}
{"question": "You are given a **0-indexed** integer array `players`, where `players[i]` represents the **ability** of the `ith` player. You are also given a **0-indexed** integer array `trainers`, where `trainers[j]` represents the **training capacity** of the `jth` trainer.\n\nThe `ith` player can **match** with the `jth` trainer if the player's ability is **less than or equal to** the trainer's training capacity. Additionally, the `ith` player can be matched with at most one trainer, and the `jth` trainer can be matched with at most one player.\n\nReturn _the **maximum** number of matchings between_ `players` _and_ `trainers` _that satisfy these conditions._\n\n"}
{"question": "You are given a **0-indexed** array `nums` of length `n`, consisting of non-negative integers. For each index `i` from `0` to `n - 1`, you must determine the size of the **minimum sized** non-empty subarray of `nums` starting at `i` (**inclusive**) that has the **maximum** possible **bitwise OR**.\n\n*   In other words, let `Bij` be the bitwise OR of the subarray `nums[i...j]`. You need to find the smallest subarray starting at `i`, such that bitwise OR of this subarray is equal to `max(Bik)` where `i <= k <= n - 1`.\n\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\n\nReturn _an integer array_ `answer` _of size_ `n` _where_ `answer[i]` _is the length of the **minimum** sized subarray starting at_ `i` _with **maximum** bitwise OR._\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n"}
{"question": "An **alphabetical continuous string** is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string `\"abcdefghijklmnopqrstuvwxyz \"`.\n\n*   For example, `\"abc \"` is an alphabetical continuous string, while `\"acb \"` and `\"za \"` are not.\n\nGiven a string `s` consisting of lowercase letters only, return the _length of the **longest** alphabetical continuous substring._\n\n"}
{"question": "Given the `root` of a **perfect** binary tree, reverse the node values at each **odd** level of the tree.\n\n*   For example, suppose the node values at level 3 are `[2,1,3,4,7,11,29,18]`, then it should become `[18,29,11,7,4,3,1,2]`.\n\nReturn _the root of the reversed tree_.\n\nA binary tree is **perfect** if all parent nodes have two children and all leaves are on the same level.\n\nThe **level** of a node is the number of edges along the path between it and the root node.\n\n"}
{"question": "You are given a **positive** integer `n`.\n\nWe call an integer `k` fair if the number of **even** digits in `k` is equal to the number of **odd** digits in it.\n\nReturn _the **smallest** fair integer that is **greater than or equal** to_ `n`.\n\n"}
{"question": "You are given an integer array `nums` of size `n`.\n\nConsider a **non-empty** subarray from `nums` that has the **maximum** possible **bitwise AND**.\n\n*   In other words, let `k` be the maximum value of the bitwise AND of **any** subarray of `nums`. Then, only subarrays with a bitwise AND equal to `k` should be considered.\n\nReturn _the length of the **longest** such subarray_.\n\nThe bitwise AND of an array is the bitwise AND of all the numbers in it.\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of size `n` and a positive integer `k`.\n\nWe call an index `i` in the range `k <= i < n - k` **good** if the following conditions are satisfied:\n\n*   The `k` elements that are just **before** the index `i` are in **non-increasing** order.\n*   The `k` elements that are just **after** the index `i` are in **non-decreasing** order.\n\nReturn _an array of all good indices sorted in **increasing** order_.\n\n"}
{"question": "You are given an array `nums` consisting of **positive** integers.\n\nYou can perform the following operation on the array **any** number of times:\n\n*   Choose any two **adjacent** elements and **replace** them with their **sum**.\n    *   For example, if `nums = [1,2,3,1]`, you can apply one operation to make it `[1,5,1]`.\n\nReturn _the **minimum** number of operations needed to turn the array into a **palindrome**_.\n\n"}
{"question": "You are given a stream of `n` videos, each represented by a **distinct** number from `1` to `n` that you need to \"upload \" to a server. You need to implement a data structure that calculates the length of the **longest uploaded prefix** at various points in the upload process.\n\nWe consider `i` to be an uploaded prefix if all videos in the range `1` to `i` (**inclusive**) have been uploaded to the server. The longest uploaded prefix is the **maximum** value of `i` that satisfies this definition.  \n  \nImplement the `LUPrefix` class:\n\n*   `LUPrefix(int n)` Initializes the object for a stream of `n` videos.\n*   `void upload(int video)` Uploads `video` to the server.\n*   `int longest()` Returns the length of the **longest uploaded prefix** defined above.\n\n"}
{"question": "You are given two **0-indexed** arrays, `nums1` and `nums2`, consisting of non-negative integers. There exists another array, `nums3`, which contains the bitwise XOR of **all pairings** of integers between `nums1` and `nums2` (every integer in `nums1` is paired with every integer in `nums2` **exactly once**).\n\nReturn _the **bitwise XOR** of all integers in_ `nums3`.\n\n"}
{"question": "You are given an `m x n` integer matrix `grid`.\n\nWe define an **hourglass** as a part of the matrix with the following form:\n\nReturn _the **maximum** sum of the elements of an hourglass_.\n\n**Note** that an hourglass cannot be rotated and must be entirely contained within the matrix.\n\n"}
{"question": "Given two positive integers `num1` and `num2`, find the positive integer `x` such that:\n\n*   `x` has the same number of set bits as `num2`, and\n*   The value `x XOR num1` is **minimal**.\n\nNote that `XOR` is the bitwise XOR operation.\n\nReturn _the integer_ `x`. The test cases are generated such that `x` is **uniquely determined**.\n\nThe number of **set bits** of an integer is the number of `1`'s in its binary representation.\n\n"}
{"question": "You are given two non-negative integer arrays `price` and `tastiness`, both arrays have the same length `n`. You are also given two non-negative integers `maxAmount` and `maxCoupons`.\n\nFor every integer `i` in range `[0, n - 1]`:\n\n*   `price[i]` describes the price of `ith` fruit.\n*   `tastiness[i]` describes the tastiness of `ith` fruit.\n\nYou want to purchase some fruits such that total tastiness is maximized and the total price does not exceed `maxAmount`.\n\nAdditionally, you can use a coupon to purchase fruit for **half of its price** (rounded down to the closest integer). You can use at most `maxCoupons` of such coupons.\n\nReturn _the maximum total tastiness that can be purchased_.\n\n**Note that:**\n\n*   You can purchase each fruit at most once.\n*   You can use coupons on some fruit at most once.\n\n"}
{"question": "You are given an **integer** array `pref` of size `n`. Find and return _the array_ `arr` _of size_ `n` _that satisfies_:\n\n*   `pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]`.\n\nNote that `^` denotes the **bitwise-xor** operation.\n\nIt can be proven that the answer is **unique**.\n\n"}
{"question": "You are given a string `s` and a robot that currently holds an empty string `t`. Apply one of the following operations until `s` and `t` **are both empty**:\n\n*   Remove the **first** character of a string `s` and give it to the robot. The robot will append this character to the string `t`.\n*   Remove the **last** character of a string `t` and give it to the robot. The robot will write this character on paper.\n\nReturn _the lexicographically smallest string that can be written on the paper._\n\n"}
{"question": "You are given an array `nums` consisting of positive integers.\n\nSplit the array into **one or more** disjoint subarrays such that:\n\n*   Each element of the array belongs to **exactly one** subarray, and\n*   The **GCD** of the elements of each subarray is strictly greater than `1`.\n\nReturn _the minimum number of subarrays that can be obtained after the split_.\n\n**Note** that:\n\n*   The **GCD** of a subarray is the largest positive integer that evenly divides all the elements of the subarray.\n*   A **subarray** is a contiguous part of the array.\n\n"}
{"question": "Given a positive integer `n`, there exists a **0-indexed** array called `powers`, composed of the **minimum** number of powers of `2` that sum to `n`. The array is sorted in **non-decreasing** order, and there is **only one** way to form the array.\n\nYou are also given a **0-indexed** 2D integer array `queries`, where `queries[i] = [lefti, righti]`. Each `queries[i]` represents a query where you have to find the product of all `powers[j]` with `lefti <= j <= righti`.\n\nReturn _an array_ `answers`_, equal in length to_ `queries`_, where_ `answers[i]` _is the answer to the_ `ith` _query_. Since the answer to the `ith` query may be too large, each `answers[i]` should be returned **modulo** `109 + 7`.\n\n"}
{"question": "You are given a **0-indexed** array `nums` comprising of `n` non-negative integers.\n\nIn one operation, you must:\n\n*   Choose an integer `i` such that `1 <= i < n` and `nums[i] > 0`.\n*   Decrease `nums[i]` by 1.\n*   Increase `nums[i - 1]` by 1.\n\nReturn _the **minimum** possible value of the **maximum** integer of_ `nums` _after performing **any** number of operations_.\n\n"}
{"question": "You are given an array `nums` consisting of **positive** integers.\n\nYou have to take each integer in the array, **reverse its digits**, and add it to the end of the array. You should apply this operation to the original integers in `nums`.\n\nReturn _the number of **distinct** integers in the final array_.\n\n"}
{"question": "Given a **non-negative** integer `num`, return `true` _if_ `num` _can be expressed as the sum of any **non-negative** integer and its reverse, or_ `false` _otherwise._\n\n"}
{"question": "There is an **undirected** connected tree with `n` nodes labeled from `1` to `n` and `n - 1` edges. You are given the integer `n`. The parent node of a node with a label `v` is the node with the label `floor (v / 2)`. The root of the tree is the node with the label `1`.\n\n*   For example, if `n = 7`, then the node with the label `3` has the node with the label `floor(3 / 2) = 1` as its parent, and the node with the label `7` has the node with the label `floor(7 / 2) = 3` as its parent.\n\nYou are also given an integer array `queries`. Initially, every node has a value `0` on it. For each query `queries[i]`, you should flip all values in the subtree of the node with the label `queries[i]`.\n\nReturn _the total number of nodes with the value_ `1` _**after processing all the queries**_.\n\n**Note** that:\n\n*   Flipping the value of a node means that the node with the value `0` becomes `1` and vice versa.\n*   `floor(x)` is equivalent to rounding `x` down to the nearest integer.\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the number of **subarrays** of_ `nums` _where the greatest common divisor of the subarray's elements is_ `k`.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\nThe **greatest common divisor of an array** is the largest integer that evenly divides all the array elements.\n\n"}
{"question": "You are given a **binary** string `s` and a positive integer `k`.\n\nYou can apply the following operation on the string **any** number of times:\n\n*   Choose any substring of size `k` from `s` and **flip** all its characters, that is, turn all `1`'s into `0`'s, and all `0`'s into `1`'s.\n\nReturn _the number of **distinct** strings you can obtain_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n**Note** that:\n\n*   A binary string is a string that consists **only** of the characters `0` and `1`.\n*   A substring is a contiguous part of a string.\n\n"}
{"question": "You are given two string arrays, `queries` and `dictionary`. All words in each array comprise of lowercase English letters and have the same length.\n\nIn one **edit** you can take a word from `queries`, and change any letter in it to any other letter. Find all words from `queries` that, after a **maximum** of two edits, equal some word from `dictionary`.\n\nReturn _a list of all words from_ `queries`_,_ _that match with some word from_ `dictionary` _after a maximum of **two edits**_. Return the words in the **same order** they appear in `queries`.\n\n"}
{"question": "You are given a **0-indexed** array `nums` consisting of positive integers, representing targets on a number line. You are also given an integer `space`.\n\nYou have a machine which can destroy targets. **Seeding** the machine with some `nums[i]` allows it to destroy all targets with values that can be represented as `nums[i] + c * space`, where `c` is any non-negative integer. You want to destroy the **maximum** number of targets in `nums`.\n\nReturn _the **minimum value** of_ `nums[i]` _you can seed the machine with to destroy the maximum number of targets._\n\n"}
{"question": "You are given two string arrays `creators` and `ids`, and an integer array `views`, all of length `n`. The `ith` video on a platform was created by `creator[i]`, has an id of `ids[i]`, and has `views[i]` views.\n\nThe **popularity** of a creator is the **sum** of the number of views on **all** of the creator's videos. Find the creator with the **highest** popularity and the id of their **most** viewed video.\n\n*   If multiple creators have the highest popularity, find all of them.\n*   If multiple videos have the highest view count for a creator, find the lexicographically **smallest** id.\n\nReturn _a 2D array of strings_ `answer` _where_ `answer[i] = [creatori, idi]` _means that_ `creatori` _has the **highest** popularity and_ `idi` _is the id of their most popular video._ The answer can be returned in any order.\n\n"}
{"question": "You are given two positive integers `n` and `target`.\n\nAn integer is considered **beautiful** if the sum of its digits is less than or equal to `target`.\n\nReturn the _minimum **non-negative** integer_ `x` _such that_ `n + x` _is beautiful_. The input will be generated such that it is always possible to make `n` beautiful.\n\n"}
{"question": "You are given an integer array `nums` and an integer `k`. Find the maximum subarray sum of all the subarrays of `nums` that meet the following conditions:\n\n*   The length of the subarray is `k`, and\n*   All the elements of the subarray are **distinct**.\n\nReturn _the maximum subarray sum of all the subarrays that meet the conditions__._ If no subarray meets the conditions, return `0`.\n\n_A **subarray** is a contiguous non-empty sequence of elements within an array._\n\n"}
{"question": "You are given a **0-indexed** integer array `costs` where `costs[i]` is the cost of hiring the `ith` worker.\n\nYou are also given two integers `k` and `candidates`. We want to hire exactly `k` workers according to the following rules:\n\n*   You will run `k` sessions and hire exactly one worker in each session.\n*   In each hiring session, choose the worker with the lowest cost from either the first `candidates` workers or the last `candidates` workers. Break the tie by the smallest index.\n    *   For example, if `costs = [3,2,7,7,1,2]` and `candidates = 2`, then in the first hiring session, we will choose the `4th` worker because they have the lowest cost `[3,2,7,7,**1**,2]`.\n    *   In the second hiring session, we will choose `1st` worker because they have the same lowest cost as `4th` worker but they have the smallest index `[3,**2**,7,7,2]`. Please note that the indexing may be changed in the process.\n*   If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\n*   A worker can only be chosen once.\n\nReturn _the total cost to hire exactly_ `k` _workers._\n\n"}
{"question": "You are given an integer array `nums`.\n\nSplitting of an integer array `nums` into **subarrays** is **valid** if:\n\n*   the _greatest common divisor_ of the first and last elements of each subarray is **greater** than `1`, and\n*   each element of `nums` belongs to exactly one subarray.\n\nReturn _the **minimum** number of subarrays in a **valid** subarray splitting of_ `nums`. If a valid subarray splitting is not possible, return `-1`.\n\n**Note** that:\n\n*   The **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n*   A **subarray** is a contiguous non-empty part of an array.\n\n"}
{"question": "Given the integers `zero`, `one`, `low`, and `high`, we can construct a string by starting with an empty string, and then at each step perform either of the following:\n\n*   Append the character `'0'` `zero` times.\n*   Append the character `'1'` `one` times.\n\nThis can be performed any number of times.\n\nA **good** string is a string constructed by the above process having a **length** between `low` and `high` (**inclusive**).\n\nReturn _the number of **different** good strings that can be constructed satisfying these properties._ Since the answer can be large, return it **modulo** `109 + 7`.\n\n"}
{"question": "There is an undirected tree with `n` nodes labeled from `0` to `n - 1`, rooted at node `0`. You are given a 2D integer array `edges` of length `n - 1` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\nAt every node `i`, there is a gate. You are also given an array of even integers `amount`, where `amount[i]` represents:\n\n*   the price needed to open the gate at node `i`, if `amount[i]` is negative, or,\n*   the cash reward obtained on opening the gate at node `i`, otherwise.\n\nThe game goes on as follows:\n\n*   Initially, Alice is at node `0` and Bob is at node `bob`.\n*   At every second, Alice and Bob **each** move to an adjacent node. Alice moves towards some **leaf node**, while Bob moves towards node `0`.\n*   For **every** node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:\n    *   If the gate is **already open**, no price will be required, nor will there be any cash reward.\n    *   If Alice and Bob reach the node **simultaneously**, they share the price/reward for opening the gate there. In other words, if the price to open the gate is `c`, then both Alice and Bob pay `c / 2` each. Similarly, if the reward at the gate is `c`, both of them receive `c / 2` each.\n*   If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node `0`, he stops moving. Note that these events are **independent** of each other.\n\nReturn _the **maximum** net income Alice can have if she travels towards the optimal leaf node._\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the number of **subarrays** of_ `nums` _where the least common multiple of the subarray's elements is_ `k`.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\nThe **least common multiple of an array** is the smallest positive integer that is divisible by all the array elements.\n\n"}
{"question": "You are given the `root` of a binary tree with **unique values**.\n\nIn one operation, you can choose any two nodes **at the same level** and swap their values.\n\nReturn _the minimum number of operations needed to make the values at each level sorted in a **strictly increasing order**_.\n\nThe **level** of a node is the number of edges along the path between it and the root node_._\n\n"}
{"question": "You are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads`, where `roads[i] = [ai, bi, costi]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a cost of traveling equal to `costi`.\n\nYou can buy apples in **any** city you want, but some cities have different costs to buy apples. You are given the array `appleCost` where `appleCost[i]` is the cost of buying one apple from city `i`.\n\nYou start at some city, traverse through various roads, and eventually buy **exactly** one apple from **any** city. After you buy that apple, you have to return back to the city you **started** at, but now the cost of all the roads will be **multiplied** by a given factor `k`.\n\nGiven the integer `k`, return _an array_ `answer` _of size_ `n` _where_ `answer[i]` _is the **minimum** total cost to buy an apple if you start at city_ `i`.\n\n"}
{"question": "You are given the `root` of a **binary search tree** and an array `queries` of size `n` consisting of positive integers.\n\nFind a **2D** array `answer` of size `n` where `answer[i] = [mini, maxi]`:\n\n*   `mini` is the **largest** value in the tree that is smaller than or equal to `queries[i]`. If a such value does not exist, add `-1` instead.\n*   `maxi` is the **smallest** value in the tree that is greater than or equal to `queries[i]`. If a such value does not exist, add `-1` instead.\n\nReturn _the array_ `answer`.\n\n"}
{"question": "There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of `n` cities numbered from `0` to `n - 1` and exactly `n - 1` roads. The capital city is city `0`. You are given a 2D integer array `roads` where `roads[i] = [ai, bi]` denotes that there exists a **bidirectional road** connecting cities `ai` and `bi`.\n\nThere is a meeting for the representatives of each city. The meeting is in the capital city.\n\nThere is a car in each city. You are given an integer `seats` that indicates the number of seats in each car.\n\nA representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.\n\nReturn _the minimum number of liters of fuel to reach the capital city_.\n\n"}
{"question": "You are given a **0-indexed** `m x n` binary matrix `grid`.\n\nA **0-indexed** `m x n` difference matrix `diff` is created with the following procedure:\n\n*   Let the number of ones in the `ith` row be `onesRowi`.\n*   Let the number of ones in the `jth` column be `onesColj`.\n*   Let the number of zeros in the `ith` row be `zerosRowi`.\n*   Let the number of zeros in the `jth` column be `zerosColj`.\n*   `diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj`\n\nReturn _the difference matrix_ `diff`.\n\n"}
{"question": "You are given the customer visit log of a shop represented by a **0-indexed** string `customers` consisting only of characters `'N'` and `'Y'`:\n\n*   if the `ith` character is `'Y'`, it means that customers come at the `ith` hour\n*   whereas `'N'` indicates that no customers come at the `ith` hour.\n\nIf the shop closes at the `jth` hour (`0 <= j <= n`), the **penalty** is calculated as follows:\n\n*   For every hour when the shop is open and no customers come, the penalty increases by `1`.\n*   For every hour when the shop is closed and customers come, the penalty increases by `1`.\n\nReturn _the **earliest** hour at which the shop must be closed to incur a **minimum** penalty._\n\n**Note** that if a shop closes at the `jth` hour, it means the shop is closed at the hour `j`.\n\n"}
{"question": "You are given two strings `s` and `t` consisting of only lowercase English letters.\n\nReturn _the minimum number of characters that need to be appended to the end of_ `s` _so that_ `t` _becomes a **subsequence** of_ `s`.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n"}
{"question": "You are given the `head` of a linked list.\n\nRemove every node which has a node with a **strictly greater** value anywhere to the right side of it.\n\nReturn _the_ `head` _of the modified linked list._\n\n"}
{"question": "You are given a binary string `s`, and two integers `num1` and `num2`. `num1` and `num2` are coprime numbers.\n\nA **ratio substring** is a substring of s where the ratio between the number of `0`'s and the number of `1`'s in the substring is exactly `num1 : num2`.\n\n*   For example, if `num1 = 2` and `num2 = 3`, then `\"01011 \"` and `\"1110000111 \"` are ratio substrings, while `\"11000 \"` is not.\n\nReturn _the number of **non-empty** ratio substrings of_ `s`.\n\n**Note** that:\n\n*   A **substring** is a contiguous sequence of characters within a string.\n*   Two values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\n"}
{"question": "You are given a positive integer array `skill` of **even** length `n` where `skill[i]` denotes the skill of the `ith` player. Divide the players into `n / 2` teams of size `2` such that the total skill of each team is **equal**.\n\nThe **chemistry** of a team is equal to the **product** of the skills of the players on that team.\n\nReturn _the sum of the **chemistry** of all the teams, or return_ `-1` _if there is no way to divide the players into teams such that the total skill of each team is equal._\n\n"}
{"question": "You are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads` where `roads[i] = [ai, bi, distancei]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a distance equal to `distancei`. The cities graph is not necessarily connected.\n\nThe **score** of a path between two cities is defined as the **minimum** distance of a road in this path.\n\nReturn _the **minimum** possible score of a path between cities_ `1` _and_ `n`.\n\n**Note**:\n\n*   A path is a sequence of roads between two cities.\n*   It is allowed for a path to contain the same road **multiple** times, and you can visit cities `1` and `n` multiple times along the path.\n*   The test cases are generated such that there is **at least** one path between `1` and `n`.\n\n"}
{"question": "Given a **0-indexed** integer array `nums`, return _the number of subarrays of_ `nums` _having an even product_.\n\n"}
{"question": "There is an undirected graph consisting of `n` nodes numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node.\n\nYou are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi.`\n\nA **star graph** is a subgraph of the given graph having a center node containing `0` or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\n\nThe image below shows star graphs with `3` and `4` neighbors respectively, centered at the blue node.\n\nThe **star sum** is the sum of the values of all the nodes present in the star graph.\n\nGiven an integer `k`, return _the **maximum star sum** of a star graph containing **at most**_ `k` _edges._\n\n"}
{"question": "You are given a **0-indexed** integer array `stones` sorted in **strictly increasing order** representing the positions of stones in a river.\n\nA frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone **at most once**.\n\nThe **length** of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.\n\n*   More formally, if the frog is at `stones[i]` and is jumping to `stones[j]`, the length of the jump is `|stones[i] - stones[j]|`.\n\nThe **cost** of a path is the **maximum length of a jump** among all jumps in the path.\n\nReturn _the **minimum** cost of a path for the frog_.\n\n"}
{"question": "You are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n*   The length of the subsequence is at least `2`, and\n*   **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\nReturn _the length of the **longest square streak** in_ `nums`_, or return_ `-1` _if there is no **square streak**._\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given an integer `n` representing the size of a **0-indexed** memory array. All memory units are initially free.\n\nYou have a memory allocator with the following functionalities:\n\n1.  **Allocate** a block of `size` consecutive free memory units and assign it the id `mID`.\n2.  **Free** all memory units with the given id `mID`.\n\n**Note** that:\n\n*   Multiple blocks can be allocated to the same `mID`.\n*   You should free all the memory units with `mID`, even if they were allocated in different blocks.\n\nImplement the `Allocator` class:\n\n*   `Allocator(int n)` Initializes an `Allocator` object with a memory array of size `n`.\n*   `int allocate(int size, int mID)` Find the **leftmost** block of `size` **consecutive** free memory units and allocate it with the id `mID`. Return the block's first index. If such a block does not exist, return `-1`.\n*   `int free(int mID)` Free all memory units with the id `mID`. Return the number of memory units you have freed.\n\n"}
{"question": "Given an integer array `nums`, return _the value of the bitwise_ **OR** _of the sum of all possible **subsequences** in the array_.\n\nA **subsequence** is a sequence that can be derived from another sequence by removing zero or more elements without changing the order of the remaining elements.\n\n"}
{"question": "You are given a positive integer `n`.\n\nContinuously replace `n` with the sum of its **prime factors**.\n\n*   Note that if a prime factor divides `n` multiple times, it should be included in the sum as many times as it divides `n`.\n\nReturn _the smallest value_ `n` _will take on._\n\n"}
{"question": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)`.\n\nReturn `true` _if there is a path from_ `(0, 0)` _to_ `(m - 1, n - 1)` _that visits an **equal** number of_ `0`_'s and_ `1`_'s_. Otherwise return `false`.\n\n"}
{"question": "You are given two string arrays `positive_feedback` and `negative_feedback`, containing the words denoting positive and negative feedback, respectively. Note that **no** word is both positive and negative.\n\nInitially every student has `0` points. Each positive word in a feedback report **increases** the points of a student by `3`, whereas each negative word **decreases** the points by `1`.\n\nYou are given `n` feedback reports, represented by a **0-indexed** string array `report` and a **0-indexed** integer array `student_id`, where `student_id[i]` represents the ID of the student who has received the feedback report `report[i]`. The ID of each student is **unique**.\n\nGiven an integer `k`, return _the top_ `k` _students after ranking them in **non-increasing** order by their points_. In case more than one student has the same points, the one with the lower ID ranks higher.\n\n"}
{"question": "We have two arrays `arr1` and `arr2` which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\n\n*   `arr1` contains `uniqueCnt1` **distinct** positive integers, each of which is **not divisible** by `divisor1`.\n*   `arr2` contains `uniqueCnt2` **distinct** positive integers, each of which is **not divisible** by `divisor2`.\n*   **No** integer is present in both `arr1` and `arr2`.\n\nGiven `divisor1`, `divisor2`, `uniqueCnt1`, and `uniqueCnt2`, return _the **minimum possible maximum** integer that can be present in either array_.\n\n"}
{"question": "You are given a string `s` consisting of the characters `'a'`, `'b'`, and `'c'` and a non-negative integer `k`. Each minute, you may take either the **leftmost** character of `s`, or the **rightmost** character of `s`.\n\nReturn _the **minimum** number of minutes needed for you to take **at least**_ `k` _of each character, or return_ `-1` _if it is not possible to take_ `k` _of each character._\n\n"}
{"question": "You are given an array of positive integers `price` where `price[i]` denotes the price of the `ith` candy and a positive integer `k`.\n\nThe store sells baskets of `k` **distinct** candies. The **tastiness** of a candy basket is the smallest absolute difference of the **prices** of any two candies in the basket.\n\nReturn _the **maximum** tastiness of a candy basket._\n\n"}
{"question": "Given an array of positive integers `nums`, return _the number of **distinct prime factors** in the product of the elements of_ `nums`.\n\n**Note** that:\n\n*   A number greater than `1` is called **prime** if it is divisible by only `1` and itself.\n*   An integer `val1` is a factor of another integer `val2` if `val2 / val1` is an integer.\n\n"}
{"question": "You are given a string `s` consisting of digits from `1` to `9` and an integer `k`.\n\nA partition of a string `s` is called **good** if:\n\n*   Each digit of `s` is part of **exactly** one substring.\n*   The value of each substring is less than or equal to `k`.\n\nReturn _the **minimum** number of substrings in a **good** partition of_ `s`. If no **good** partition of `s` exists, return `-1`.\n\n**Note** that:\n\n*   The **value** of a string is its result when interpreted as an integer. For example, the value of `\"123 \"` is `123` and the value of `\"1 \"` is `1`.\n*   A **substring** is a contiguous sequence of characters within a string.\n\n"}
{"question": "Given two positive integers `left` and `right`, find the two integers `num1` and `num2` such that:\n\n*   `left <= nums1 < nums2 <= right` .\n*   `nums1` and `nums2` are both **prime** numbers.\n*   `nums2 - nums1` is the **minimum** amongst all other pairs satisfying the above conditions.\n\nReturn _the positive integer array_ `ans = [nums1, nums2]`. _If there are multiple pairs satisfying these conditions, return the one with the minimum_ `nums1` _value or_ `[-1, -1]` _if such numbers do not exist._\n\nA number greater than `1` is called **prime** if it is only divisible by `1` and itself.\n\n"}
{"question": "For a stream of integers, implement a data structure that checks if the last `k` integers parsed in the stream are **equal** to `value`.\n\nImplement the **DataStream** class:\n\n*   `DataStream(int value, int k)` Initializes the object with an empty integer stream and the two integers `value` and `k`.\n*   `boolean consec(int num)` Adds `num` to the stream of integers. Returns `true` if the last `k` integers are equal to `value`, and `false` otherwise. If there are less than `k` integers, the condition does not hold true, so returns `false`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`.\n\nThe **effective value** of three indices `i`, `j`, and `k` is defined as `((nums[i] | nums[j]) & nums[k])`.\n\nThe **xor-beauty** of the array is the XORing of **the effective values of all the possible triplets** of indices `(i, j, k)` where `0 <= i, j, k < n`.\n\nReturn _the xor-beauty of_ `nums`.\n\n**Note** that:\n\n*   `val1 | val2` is bitwise OR of `val1` and `val2`.\n*   `val1 & val2` is bitwise AND of `val1` and `val2`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` and an integer `k`. You have a **starting score** of `0`.\n\nIn one **operation**:\n\n1.  choose an index `i` such that `0 <= i < nums.length`,\n2.  increase your **score** by `nums[i]`, and\n3.  replace `nums[i]` with `ceil(nums[i] / 3)`.\n\nReturn _the maximum possible **score** you can attain after applying **exactly**_ `k` _operations_.\n\nThe ceiling function `ceil(val)` is the least integer greater than or equal to `val`.\n\n"}
{"question": "You are given two **0-indexed** strings `word1` and `word2`.\n\nA **move** consists of choosing two indices `i` and `j` such that `0 <= i < word1.length` and `0 <= j < word2.length` and swapping `word1[i]` with `word2[j]`.\n\nReturn `true` _if it is possible to get the number of distinct characters in_ `word1` _and_ `word2` _to be equal with **exactly one** move._ Return `false` _otherwise_.\n\n"}
{"question": "You are given four integers `minLength`, `maxLength`, `oneGroup` and `zeroGroup`.\n\nA binary string is **good** if it satisfies the following conditions:\n\n*   The length of the string is in the range `[minLength, maxLength]`.\n*   The size of each block of consecutive `1`'s is a multiple of `oneGroup`.\n    *   For example in a binary string `00110111100` sizes of each block of consecutive ones are `[2,4]`.\n*   The size of each block of consecutive `0`'s is a multiple of `zeroGroup`.\n    *   For example, in a binary string `00110111100` sizes of each block of consecutive ones are `[2,1,2]`.\n\nReturn _the number of **good** binary strings_. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n**Note** that `0` is considered a multiple of all the numbers.\n\n"}
{"question": "You are given a positive integer `n`, indicating that we initially have an `n x n` **0-indexed** integer matrix `mat` filled with zeroes.\n\nYou are also given a 2D integer array `query`. For each `query[i] = [row1i, col1i, row2i, col2i]`, you should do the following operation:\n\n*   Add `1` to **every element** in the submatrix with the **top left** corner `(row1i, col1i)` and the **bottom right** corner `(row2i, col2i)`. That is, add `1` to `mat[x][y]` for all `row1i <= x <= row2i` and `col1i <= y <= col2i`.\n\nReturn _the matrix_ `mat` _after performing every query._\n\n"}
{"question": "Given an integer array `nums` and an integer `k`, return _the number of **good** subarrays of_ `nums`.\n\nA subarray `arr` is **good** if it there are **at least** `k` pairs of indices `(i, j)` such that `i < j` and `arr[i] == arr[j]`.\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "A **subsequence** of a string is good if it is not empty and the frequency of each one of its characters is the same.\n\nGiven a string `s`, return _the number of good subsequences of_ `s`. Since the answer may be too large, return it modulo `109 + 7`.\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n"}
{"question": "You are given two integer arrays `nums1` and `nums2` of equal length `n` and an integer `k`. You can perform the following operation on `nums1`:\n\n*   Choose two indexes `i` and `j` and increment `nums1[i]` by `k` and decrement `nums1[j]` by `k`. In other words, `nums1[i] = nums1[i] + k` and `nums1[j] = nums1[j] - k`.\n\n`nums1` is said to be **equal** to `nums2` if for all indices `i` such that `0 <= i < n`, `nums1[i] == nums2[i]`.\n\nReturn _the **minimum** number of operations required to make_ `nums1` _equal to_ `nums2`. If it is impossible to make them equal, return `-1`.\n\n"}
{"question": "You are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length `n` and a positive integer `k`. You must choose a **subsequence** of indices from `nums1` of length `k`.\n\nFor chosen indices `i0`, `i1`, ..., `ik - 1`, your **score** is defined as:\n\n*   The sum of the selected elements from `nums1` multiplied with the **minimum** of the selected elements from `nums2`.\n*   It can defined simply as: `(nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1])`.\n\nReturn _the **maximum** possible score._\n\nA **subsequence** of indices of an array is a set that can be derived from the set `{0, 1, ..., n-1}` by deleting some or no elements.\n\n"}
{"question": "There is a class with `m` students and `n` exams. You are given a **0-indexed** `m x n` integer matrix `score`, where each row represents one student and `score[i][j]` denotes the score the `ith` student got in the `jth` exam. The matrix `score` contains **distinct** integers only.\n\nYou are also given an integer `k`. Sort the students (i.e., the rows of the matrix) by their scores in the `kth` (**0-indexed**) exam from the highest to the lowest.\n\nReturn _the matrix after sorting it._\n\n"}
{"question": "You are given two **0-indexed binary** strings `s` and `target` of the same length `n`. You can do the following operation on `s` **any** number of times:\n\n*   Choose two **different** indices `i` and `j` where `0 <= i, j < n`.\n*   Simultaneously, replace `s[i]` with (`s[i]` **OR** `s[j]`) and `s[j]` with (`s[i]` **XOR** `s[j]`).\n\nFor example, if `s = \"0110 \"`, you can choose `i = 0` and `j = 2`, then simultaneously replace `s[0]` with (`s[0]` **OR** `s[2]` = `0` **OR** `1` = `1`), and `s[2]` with (`s[0]` **XOR** `s[2]` = `0` **XOR** `1` = `1`), so we will have `s = \"1110 \"`.\n\nReturn `true` _if you can make the string_ `s` _equal to_ `target`_, or_ `false` _otherwise_.\n\n"}
{"question": "You are given a 2D integer array `items` where `items[i] = [pricei, weighti]` denotes the price and weight of the `ith` item, respectively.\n\nYou are also given a **positive** integer `capacity`.\n\nEach item can be divided into two items with ratios `part1` and `part2`, where `part1 + part2 == 1`.\n\n*   The weight of the first item is `weighti * part1` and the price of the first item is `pricei * part1`.\n*   Similarly, the weight of the second item is `weighti * part2` and the price of the second item is `pricei * part2`.\n\nReturn _**the maximum total price** to fill a bag of capacity_ `capacity` _with given items_. If it is impossible to fill a bag return `-1`. Answers within `10-5` of the **actual answer** will be considered accepted.\n\n"}
{"question": "There is a regular convex polygon with `n` vertices. The vertices are labeled from `0` to `n - 1` in a clockwise direction, and each vertex has **exactly one monkey**. The following figure shows a convex polygon of `6` vertices.\n\nEach monkey moves simultaneously to a neighboring vertex. A neighboring vertex for a vertex `i` can be:\n\n*   the vertex `(i + 1) % n` in the clockwise direction, or\n*   the vertex `(i - 1 + n) % n` in the counter-clockwise direction.\n\nA **collision** happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.\n\nReturn _the number of ways the monkeys can move so that at least **one collision**_ _happens_. Since the answer may be very large, return it modulo `109 + 7`.\n\n**Note** that each monkey can only move once.\n\n"}
{"question": "You are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n*   The chosen integers have to be in the range `[1, n]`.\n*   Each integer can be chosen **at most once**.\n*   The chosen integers should not be in the array `banned`.\n*   The sum of the chosen integers should not exceed `maxSum`.\n\nReturn _the **maximum** number of integers you can choose following the mentioned rules_.\n\n"}
{"question": "There are some prizes on the **X-axis**. You are given an integer array `prizePositions` that is **sorted in non-decreasing order**, where `prizePositions[i]` is the position of the `ith` prize. There could be different prizes at the same position on the line. You are also given an integer `k`.\n\nYou are allowed to select two segments with integer endpoints. The length of each segment must be `k`. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\n*   For example if `k = 2`, you can choose segments `[1, 3]` and `[2, 4]`, and you will win any prize i that satisfies `1 <= prizePositions[i] <= 3` or `2 <= prizePositions[i] <= 4`.\n\nReturn _the **maximum** number of prizes you can win if you choose the two segments optimally_.\n\n"}
{"question": "You are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)` that has the value `1`. The matrix is **disconnected** if there is no path from `(0, 0)` to `(m - 1, n - 1)`.\n\nYou can flip the value of **at most one** (possibly none) cell. You **cannot flip** the cells `(0, 0)` and `(m - 1, n - 1)`.\n\nReturn `true` _if it is possible to make the matrix disconnect or_ `false` _otherwise_.\n\n**Note** that flipping a cell changes its value from `0` to `1` or from `1` to `0`.\n\n"}
{"question": "You are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n*   The chosen integers have to be in the range `[1, n]`.\n*   Each integer can be chosen **at most once**.\n*   The chosen integers should not be in the array `banned`.\n*   The sum of the chosen integers should not exceed `maxSum`.\n\nReturn _the **maximum** number of integers you can choose following the mentioned rules_.\n\n"}
{"question": "You are given a **0-indexed** array of strings `words` and a 2D array of integers `queries`.\n\nEach query `queries[i] = [li, ri]` asks us to find the number of strings present in the range `li` to `ri` (both **inclusive**) of `words` that start and end with a vowel.\n\nReturn _an array_ `ans` _of size_ `queries.length`_, where_ `ans[i]` _is the answer to the_ `i`th _query_.\n\n**Note** that the vowel letters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n"}
{"question": "There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**.\n\nThe **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\n\nYou are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars.\n\nYou are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses.\n\nReturn _the **minimum** capability of the robber out of all the possible ways to steal at least_ `k` _houses_.\n\n"}
{"question": "Given a **0-indexed** integer array `nums` of size `n` and two integers `lower` and `upper`, return _the number of fair pairs_.\n\nA pair `(i, j)` is **fair** if:\n\n*   `0 <= i < j < n`, and\n*   `lower <= nums[i] + nums[j] <= upper`\n\n"}
{"question": "You are given a **binary string** `s`, and a **2D** integer array `queries` where `queries[i] = [firsti, secondi]`.\n\nFor the `ith` query, find the **shortest substring** of `s` whose **decimal value**, `val`, yields `secondi` when **bitwise XORed** with `firsti`. In other words, `val ^ firsti == secondi`.\n\nThe answer to the `ith` query is the endpoints (**0-indexed**) of the substring `[lefti, righti]` or `[-1, -1]` if no such substring exists. If there are multiple answers, choose the one with the **minimum** `lefti`.\n\n_Return an array_ `ans` _where_ `ans[i] = [lefti, righti]` _is the answer to the_ `ith` _query._\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`.\n\n*   The **low** score of `nums` is the minimum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`.\n*   The **high** score of `nums` is the maximum value of `|nums[i] - nums[j]|` over all `0 <= i < j < nums.length`.\n*   The **score** of `nums` is the sum of the **high** and **low** scores of nums.\n\nTo minimize the score of `nums`, we can change the value of **at most two** elements of `nums`.\n\nReturn _the **minimum** possible **score** after changing the value of **at most two** elements o_f `nums`.\n\nNote that `|x|` denotes the absolute value of `x`.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`.\n\nWe say that an integer x is **expressible** from `nums` if there exist some integers `0 <= index1 < index2 < ... < indexk < nums.length` for which `nums[index1] | nums[index2] | ... | nums[indexk] = x`. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of `nums`.\n\nReturn _the minimum **positive non-zero integer** that is not_ _expressible from_ `nums`.\n\n"}
{"question": "You are given a positive integer `n`, you can do the following operation **any** number of times:\n\n*   Add or subtract a **power** of `2` from `n`.\n\nReturn _the **minimum** number of operations to make_ `n` _equal to_ `0`.\n\nA number `x` is power of `2` if `x == 2i` where `i >= 0`_._\n\n"}
{"question": "You are given a positive integer **0-indexed** array `nums`.\n\nA subset of the array `nums` is **square-free** if the product of its elements is a **square-free integer**.\n\nA **square-free integer** is an integer that is divisible by no square number other than `1`.\n\nReturn _the number of square-free non-empty subsets of the array_ **nums**. Since the answer may be too large, return it **modulo** `109 + 7`.\n\nA **non-empty** **subset** of `nums` is an array that can be obtained by deleting some (possibly none but not all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n"}
{"question": "You are given a **0-indexed** string `word` of length `n` consisting of digits, and a positive integer `m`.\n\nThe **divisibility array** `div` of `word` is an integer array of length `n` such that:\n\n*   `div[i] = 1` if the **numeric value** of `word[0,...,i]` is divisible by `m`, or\n*   `div[i] = 0` otherwise.\n\nReturn _the divisibility array of_ `word`.\n\n"}
{"question": "There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer `n`, indicating that you must do the following routine for `n` minutes:\n\n*   At the first minute, color **any** arbitrary unit cell blue.\n*   Every minute thereafter, color blue **every** uncolored cell that touches a blue cell.\n\nBelow is a pictorial representation of the state of the grid after minutes 1, 2, and 3.\n\nReturn _the number of **colored cells** at the end of_ `n` _minutes_.\n\n"}
{"question": "You are given a 2D integer array `ranges` where `ranges[i] = [starti, endi]` denotes that all integers between `starti` and `endi` (both **inclusive**) are contained in the `ith` range.\n\nYou are to split `ranges` into **two** (possibly empty) groups such that:\n\n*   Each range belongs to exactly one group.\n*   Any two **overlapping** ranges must belong to the **same** group.\n\nTwo ranges are said to be **overlapping** if there exists at least **one** integer that is present in both ranges.\n\n*   For example, `[1, 3]` and `[2, 5]` are overlapping because `2` and `3` occur in both ranges.\n\nReturn _the **total number** of ways to split_ `ranges` _into two groups_. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n"}
{"question": "You are given the `root` of a binary tree and a positive integer `k`.\n\nThe **level sum** in the tree is the sum of the values of the nodes that are on the **same** level.\n\nReturn _the_ `kth` _**largest** level sum in the tree (not necessarily distinct)_. If there are fewer than `k` levels in the tree, return `-1`.\n\n**Note** that two nodes are on the same level if they have the same distance from the root.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. You can rearrange the elements of `nums` to **any order** (including the given order).\n\nLet `prefix` be the array containing the prefix sums of `nums` after rearranging it. In other words, `prefix[i]` is the sum of the elements from `0` to `i` in `nums` after rearranging it. The **score** of `nums` is the number of positive integers in the array `prefix`.\n\nReturn _the maximum score you can achieve_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. In one operation, you can:\n\n*   Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`.\n*   Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`.\n*   Subtract `2k` from `nums[i]` and `nums[j]`.\n\nA subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times.\n\nReturn _the number of **beautiful subarrays** in the array_ `nums`.\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n"}
{"question": "Design a Todo List Where users can add **tasks**, mark them as **complete**, or get a list of pending tasks. Users can also add **tags** to tasks and can filter the tasks by certain tags.\n\nImplement the `TodoList` class:\n\n*   `TodoList()` Initializes the object.\n*   `int addTask(int userId, String taskDescription, int dueDate, List tags)` Adds a task for the user with the ID `userId` with a due date equal to `dueDate` and a list of tags attached to the task. The return value is the ID of the task. This ID starts at `1` and is **sequentially** increasing. That is, the first task's id should be `1`, the second task's id should be `2`, and so on.\n*   `List getAllTasks(int userId)` Returns a list of all the tasks not marked as complete for the user with ID `userId`, ordered by the due date. You should return an empty list if the user has no uncompleted tasks.\n*   `List getTasksForTag(int userId, String tag)` Returns a list of all the tasks that are not marked as complete for the user with the ID `userId` and have `tag` as one of their tags, ordered by their due date. Return an empty list if no such task exists.\n*   `void completeTask(int userId, int taskId)` Marks the task with the ID `taskId` as completed only if the task exists and the user with the ID `userId` has this task, and it is uncompleted.\n\n"}
{"question": "You are given a 0-indexed integer array `nums`. You are allowed to permute `nums` into a new array `perm` of your choosing.\n\nWe define the **greatness** of `nums` be the number of indices `0 <= i < nums.length` for which `perm[i] > nums[i]`.\n\nReturn _the **maximum** possible greatness you can achieve after permuting_ `nums`.\n\n"}
{"question": "You are given an array `nums` consisting of positive integers.\n\nStarting with `score = 0`, apply the following algorithm:\n\n*   Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.\n*   Add the value of the chosen integer to `score`.\n*   Mark **the chosen element and its two adjacent elements if they exist**.\n*   Repeat until all the array elements are marked.\n\nReturn _the score you get after applying the above algorithm_.\n\n"}
{"question": "You are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\nReturn _the **minimum** time taken to repair all the cars._\n\n**Note:** All the mechanics can repair the cars simultaneously.\n\n"}
{"question": "There is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**.\n\nYou are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**.\n\nReturn `true` _if_ `grid` _represents a valid configuration of the knight's movements or_ `false` _otherwise_.\n\n**Note** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n"}
{"question": "You are given an array `nums` of positive integers and a **positive** integer `k`.\n\nA subset of `nums` is **beautiful** if it does not contain two integers with an absolute difference equal to `k`.\n\nReturn _the number of **non-empty beautiful** subsets of the array_ `nums`.\n\nA **subset** of `nums` is an array that can be obtained by deleting some (possibly none) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` and an integer `value`.\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n*   For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n*   For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\nReturn _the maximum MEX of_ `nums` _after applying the mentioned operation **any number of times**_.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums`. You can apply the following operation any number of times:\n\n*   Pick any element from `nums` and put it at the end of `nums`.\n\nThe prefix sum array of `nums` is an array `prefix` of the same length as `nums` such that `prefix[i]` is the sum of all the integers `nums[j]` where `j` is in the inclusive range `[0, i]`.\n\nReturn _the minimum number of operations such that the prefix sum array does not contain negative integers_. The test cases are generated such that it is always possible to make the prefix sum array non-negative.\n\n"}
{"question": "You are given a **0-indexed** integer array `nums` of length `n`.\n\nYou can perform the following operation as many times as you want:\n\n*   Pick an index `i` that you haven't picked before, and pick a prime `p` **strictly less than** `nums[i]`, then subtract `p` from `nums[i]`.\n\nReturn _true if you can make `nums` a strictly increasing array using the above operation and false otherwise._\n\nA **strictly increasing array** is an array whose each element is strictly greater than its preceding element.\n\n"}
{"question": "You are given an array `nums` consisting of positive integers.\n\nYou are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times:\n\n*   **Increase** or **decrease** an element of the array by `1`.\n\nReturn _an array_ `answer` _of size_ `m` _where_ `answer[i]` _is the **minimum** number of operations to make all elements of_ `nums` _equal to_ `queries[i]`.\n\n**Note** that after each query the array is reset to its original state.\n\n"}
{"question": "You are given a string `s`, a string `chars` of **distinct** characters and an integer array `vals` of the same length as `chars`.\n\nThe **cost of the substring** is the sum of the values of each character in the substring. The cost of an empty string is considered `0`.\n\nThe **value of the character** is defined in the following way:\n\n*   If the character is not in the string `chars`, then its value is its corresponding position **(1-indexed)** in the alphabet.\n    *   For example, the value of `'a'` is `1`, the value of `'b'` is `2`, and so on. The value of `'z'` is `26`.\n*   Otherwise, assuming `i` is the index where the character occurs in the string `chars`, then its value is `vals[i]`.\n\nReturn _the maximum cost among all substrings of the string_ `s`.\n\n"}
{"question": "You are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\n\nYou can do the following operation any number of times:\n\n*   Pick any element from `arr` and increase or decrease it by `1`.\n\nReturn _the minimum number of operations such that the sum of each **subarray** of length_ `k` _is equal_.\n\nA **subarray** is a contiguous part of the array.\n\n"}
{"question": "You are given an integer array `nums`. You need to create a 2D array from `nums` satisfying the following conditions:\n\n*   The 2D array should contain **only** the elements of the array `nums`.\n*   Each row in the 2D array contains **distinct** integers.\n*   The number of rows in the 2D array should be **minimal**.\n\nReturn _the resulting array_. If there are multiple answers, return any of them.\n\n**Note** that the 2D array can have a different number of elements on each row.\n\n"}
{"question": "There are two mice and `n` different types of cheese, each type of cheese should be eaten by exactly one mouse.\n\nA point of the cheese with index `i` (**0-indexed**) is:\n\n*   `reward1[i]` if the first mouse eats it.\n*   `reward2[i]` if the second mouse eats it.\n\nYou are given a positive integer array `reward1`, a positive integer array `reward2`, and a non-negative integer `k`.\n\nReturn _**the maximum** points the mice can achieve if the first mouse eats exactly_ `k` _types of cheese._\n\n"}
